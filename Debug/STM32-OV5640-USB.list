
STM32-OV5640-USB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008398  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e0  08008548  08008548  00018548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b28  08008b28  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08008b28  08008b28  00018b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b30  08008b30  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b30  08008b30  00018b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008b34  08008b34  00018b34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08008b38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          0001f8c0  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2001f928  2001f928  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001899c  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000038fc  00000000  00000000  00038a77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001638  00000000  00000000  0003c378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001158  00000000  00000000  0003d9b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00026def  00000000  00000000  0003eb08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001cfb4  00000000  00000000  000658f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e2e9d  00000000  00000000  000828ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000065c0  00000000  00000000  00165748  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005d  00000000  00000000  0016bd08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000068 	.word	0x20000068
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008530 	.word	0x08008530

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	08008530 	.word	0x08008530

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <_write>:
	#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */


#ifdef __GNUC__
int _write(int fd, const void *buf, size_t count){
 800058c:	b580      	push	{r7, lr}
 800058e:	b086      	sub	sp, #24
 8000590:	af00      	add	r7, sp, #0
 8000592:	60f8      	str	r0, [r7, #12]
 8000594:	60b9      	str	r1, [r7, #8]
 8000596:	607a      	str	r2, [r7, #4]
	UNUSED(fd);
	uint8_t * src = (uint8_t *)buf;
 8000598:	68bb      	ldr	r3, [r7, #8]
 800059a:	617b      	str	r3, [r7, #20]
	if(bInit_dma)
 800059c:	4b12      	ldr	r3, [pc, #72]	; (80005e8 <_write+0x5c>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d00e      	beq.n	80005c2 <_write+0x36>
	{
	    if (lwrb_get_free(&usart_tx_buff) >= count) {
 80005a4:	4811      	ldr	r0, [pc, #68]	; (80005ec <_write+0x60>)
 80005a6:	f000 f8db 	bl	8000760 <lwrb_get_free>
 80005aa:	4602      	mov	r2, r0
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	4293      	cmp	r3, r2
 80005b0:	d815      	bhi.n	80005de <_write+0x52>
	        lwrb_write(&usart_tx_buff, buf, count);
 80005b2:	687a      	ldr	r2, [r7, #4]
 80005b4:	68b9      	ldr	r1, [r7, #8]
 80005b6:	480d      	ldr	r0, [pc, #52]	; (80005ec <_write+0x60>)
 80005b8:	f000 f850 	bl	800065c <lwrb_write>
	        usart_start_tx_dma_transfer();
 80005bc:	f000 f81a 	bl	80005f4 <usart_start_tx_dma_transfer>
 80005c0:	e00d      	b.n	80005de <_write+0x52>
	    }
	}
	else
	{
		HAL_StatusTypeDef com_tx_status = HAL_UART_Transmit(&huart3, src, count, 10);
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	b29a      	uxth	r2, r3
 80005c6:	230a      	movs	r3, #10
 80005c8:	6979      	ldr	r1, [r7, #20]
 80005ca:	4809      	ldr	r0, [pc, #36]	; (80005f0 <_write+0x64>)
 80005cc:	f005 fc16 	bl	8005dfc <HAL_UART_Transmit>
 80005d0:	4603      	mov	r3, r0
 80005d2:	74fb      	strb	r3, [r7, #19]
		if(com_tx_status != HAL_OK)
 80005d4:	7cfb      	ldrb	r3, [r7, #19]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <_write+0x52>
		{
			Error_Handler();
 80005da:	f000 fc4b 	bl	8000e74 <Error_Handler>
		}
	}

	return count;
 80005de:	687b      	ldr	r3, [r7, #4]
}
 80005e0:	4618      	mov	r0, r3
 80005e2:	3718      	adds	r7, #24
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	20000084 	.word	0x20000084
 80005ec:	20000088 	.word	0x20000088
 80005f0:	2000019c 	.word	0x2000019c

080005f4 <usart_start_tx_dma_transfer>:

bool is_using_dma(){
	return bInit_dma;
}

static uint8_t usart_start_tx_dma_transfer(void) {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
    if (usart_tx_dma_current_len == 0 && (usart_tx_dma_current_len = lwrb_get_linear_block_read_length(&usart_tx_buff)) > 0) {
 80005f8:	4b14      	ldr	r3, [pc, #80]	; (800064c <usart_start_tx_dma_transfer+0x58>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d121      	bne.n	8000644 <usart_start_tx_dma_transfer+0x50>
 8000600:	4813      	ldr	r0, [pc, #76]	; (8000650 <usart_start_tx_dma_transfer+0x5c>)
 8000602:	f000 f91d 	bl	8000840 <lwrb_get_linear_block_read_length>
 8000606:	4603      	mov	r3, r0
 8000608:	4a10      	ldr	r2, [pc, #64]	; (800064c <usart_start_tx_dma_transfer+0x58>)
 800060a:	6013      	str	r3, [r2, #0]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d019      	beq.n	8000644 <usart_start_tx_dma_transfer+0x50>

        /* Limit maximal size to transmit at a time */
        if (usart_tx_dma_current_len > 32) {
 8000610:	4b0e      	ldr	r3, [pc, #56]	; (800064c <usart_start_tx_dma_transfer+0x58>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	2b20      	cmp	r3, #32
 8000616:	d902      	bls.n	800061e <usart_start_tx_dma_transfer+0x2a>
            usart_tx_dma_current_len = 32;
 8000618:	4b0c      	ldr	r3, [pc, #48]	; (800064c <usart_start_tx_dma_transfer+0x58>)
 800061a:	2220      	movs	r2, #32
 800061c:	601a      	str	r2, [r3, #0]
        }
    	bPrintfTransferComplete = false;
 800061e:	4b0d      	ldr	r3, [pc, #52]	; (8000654 <usart_start_tx_dma_transfer+0x60>)
 8000620:	2200      	movs	r2, #0
 8000622:	701a      	strb	r2, [r3, #0]
		if(HAL_UART_Transmit_DMA(&huart3, (uint8_t*)lwrb_get_linear_block_read_address(&usart_tx_buff), usart_tx_dma_current_len)!= HAL_OK)
 8000624:	480a      	ldr	r0, [pc, #40]	; (8000650 <usart_start_tx_dma_transfer+0x5c>)
 8000626:	f000 f8e1 	bl	80007ec <lwrb_get_linear_block_read_address>
 800062a:	4601      	mov	r1, r0
 800062c:	4b07      	ldr	r3, [pc, #28]	; (800064c <usart_start_tx_dma_transfer+0x58>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	b29b      	uxth	r3, r3
 8000632:	461a      	mov	r2, r3
 8000634:	4808      	ldr	r0, [pc, #32]	; (8000658 <usart_start_tx_dma_transfer+0x64>)
 8000636:	f005 fc6d 	bl	8005f14 <HAL_UART_Transmit_DMA>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <usart_start_tx_dma_transfer+0x50>
		{
			Error_Handler();
 8000640:	f000 fc18 	bl	8000e74 <Error_Handler>
		}
    }
    return 1;
 8000644:	2301      	movs	r3, #1
}
 8000646:	4618      	mov	r0, r3
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	200000a4 	.word	0x200000a4
 8000650:	20000088 	.word	0x20000088
 8000654:	20000085 	.word	0x20000085
 8000658:	2000019c 	.word	0x2000019c

0800065c <lwrb_write>:
 * \return          Number of bytes written to buffer.
 *                      When returned value is less than `btw`, there was no enough memory available
 *                      to copy full data array
 */
size_t
lwrb_write(LWRB_VOLATILE lwrb_t* buff, const void* data, size_t btw) {
 800065c:	b580      	push	{r7, lr}
 800065e:	b088      	sub	sp, #32
 8000660:	af00      	add	r7, sp, #0
 8000662:	60f8      	str	r0, [r7, #12]
 8000664:	60b9      	str	r1, [r7, #8]
 8000666:	607a      	str	r2, [r7, #4]
    size_t tocopy, free;
    const uint8_t* d = data;
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	61fb      	str	r3, [r7, #28]

    if (!BUF_IS_VALID(buff) || data == NULL || btw == 0) {
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d017      	beq.n	80006a2 <lwrb_write+0x46>
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	4a38      	ldr	r2, [pc, #224]	; (8000758 <lwrb_write+0xfc>)
 8000678:	4293      	cmp	r3, r2
 800067a:	d112      	bne.n	80006a2 <lwrb_write+0x46>
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	699b      	ldr	r3, [r3, #24]
 8000680:	4a36      	ldr	r2, [pc, #216]	; (800075c <lwrb_write+0x100>)
 8000682:	4293      	cmp	r3, r2
 8000684:	d10d      	bne.n	80006a2 <lwrb_write+0x46>
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	685b      	ldr	r3, [r3, #4]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d009      	beq.n	80006a2 <lwrb_write+0x46>
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	689b      	ldr	r3, [r3, #8]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d005      	beq.n	80006a2 <lwrb_write+0x46>
 8000696:	68bb      	ldr	r3, [r7, #8]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d002      	beq.n	80006a2 <lwrb_write+0x46>
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d101      	bne.n	80006a6 <lwrb_write+0x4a>
        return 0;
 80006a2:	2300      	movs	r3, #0
 80006a4:	e053      	b.n	800074e <lwrb_write+0xf2>
    }

    /* Calculate maximum number of bytes available to write */
    free = lwrb_get_free(buff);
 80006a6:	68f8      	ldr	r0, [r7, #12]
 80006a8:	f000 f85a 	bl	8000760 <lwrb_get_free>
 80006ac:	61b8      	str	r0, [r7, #24]
    btw = BUF_MIN(free, btw);
 80006ae:	687a      	ldr	r2, [r7, #4]
 80006b0:	69bb      	ldr	r3, [r7, #24]
 80006b2:	4293      	cmp	r3, r2
 80006b4:	bf28      	it	cs
 80006b6:	4613      	movcs	r3, r2
 80006b8:	607b      	str	r3, [r7, #4]
    if (btw == 0) {
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d101      	bne.n	80006c4 <lwrb_write+0x68>
        return 0;
 80006c0:	2300      	movs	r3, #0
 80006c2:	e044      	b.n	800074e <lwrb_write+0xf2>
    }

    /* Step 1: Write data to linear part of buffer */
    tocopy = BUF_MIN(buff->size - buff->w, btw);
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	689a      	ldr	r2, [r3, #8]
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	691b      	ldr	r3, [r3, #16]
 80006cc:	1ad3      	subs	r3, r2, r3
 80006ce:	687a      	ldr	r2, [r7, #4]
 80006d0:	4293      	cmp	r3, r2
 80006d2:	bf28      	it	cs
 80006d4:	4613      	movcs	r3, r2
 80006d6:	617b      	str	r3, [r7, #20]
    BUF_MEMCPY(&buff->buff[buff->w], d, tocopy);
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	685a      	ldr	r2, [r3, #4]
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	691b      	ldr	r3, [r3, #16]
 80006e0:	4413      	add	r3, r2
 80006e2:	697a      	ldr	r2, [r7, #20]
 80006e4:	69f9      	ldr	r1, [r7, #28]
 80006e6:	4618      	mov	r0, r3
 80006e8:	f007 fa05 	bl	8007af6 <memcpy>
    buff->w += tocopy;
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	691a      	ldr	r2, [r3, #16]
 80006f0:	697b      	ldr	r3, [r7, #20]
 80006f2:	441a      	add	r2, r3
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	611a      	str	r2, [r3, #16]
    btw -= tocopy;
 80006f8:	687a      	ldr	r2, [r7, #4]
 80006fa:	697b      	ldr	r3, [r7, #20]
 80006fc:	1ad3      	subs	r3, r2, r3
 80006fe:	607b      	str	r3, [r7, #4]

    /* Step 2: Write data to beginning of buffer (overflow part) */
    if (btw > 0) {
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d00b      	beq.n	800071e <lwrb_write+0xc2>
        BUF_MEMCPY(buff->buff, &d[tocopy], btw);
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	6858      	ldr	r0, [r3, #4]
 800070a:	69fa      	ldr	r2, [r7, #28]
 800070c:	697b      	ldr	r3, [r7, #20]
 800070e:	4413      	add	r3, r2
 8000710:	687a      	ldr	r2, [r7, #4]
 8000712:	4619      	mov	r1, r3
 8000714:	f007 f9ef 	bl	8007af6 <memcpy>
        buff->w = btw;
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	687a      	ldr	r2, [r7, #4]
 800071c:	611a      	str	r2, [r3, #16]
    }

    /* Step 3: Check end of buffer */
    if (buff->w >= buff->size) {
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	691a      	ldr	r2, [r3, #16]
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	689b      	ldr	r3, [r3, #8]
 8000726:	429a      	cmp	r2, r3
 8000728:	d302      	bcc.n	8000730 <lwrb_write+0xd4>
        buff->w = 0;
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	2200      	movs	r2, #0
 800072e:	611a      	str	r2, [r3, #16]
    }
    BUF_SEND_EVT(buff, LWRB_EVT_WRITE, tocopy + btw);
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	695b      	ldr	r3, [r3, #20]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d007      	beq.n	8000748 <lwrb_write+0xec>
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	695b      	ldr	r3, [r3, #20]
 800073c:	6979      	ldr	r1, [r7, #20]
 800073e:	687a      	ldr	r2, [r7, #4]
 8000740:	440a      	add	r2, r1
 8000742:	2101      	movs	r1, #1
 8000744:	68f8      	ldr	r0, [r7, #12]
 8000746:	4798      	blx	r3
    return tocopy + btw;
 8000748:	697a      	ldr	r2, [r7, #20]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	4413      	add	r3, r2
}
 800074e:	4618      	mov	r0, r3
 8000750:	3720      	adds	r7, #32
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	deadbeef 	.word	0xdeadbeef
 800075c:	21524110 	.word	0x21524110

08000760 <lwrb_get_free>:
 * \brief           Get available size in buffer for write operation
 * \param[in]       buff: Buffer handle
 * \return          Number of free bytes in memory
 */
size_t
lwrb_get_free(LWRB_VOLATILE lwrb_t* buff) {
 8000760:	b480      	push	{r7}
 8000762:	b087      	sub	sp, #28
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
    size_t size, w, r;

    if (!BUF_IS_VALID(buff)) {
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d011      	beq.n	8000792 <lwrb_get_free+0x32>
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	4a1c      	ldr	r2, [pc, #112]	; (80007e4 <lwrb_get_free+0x84>)
 8000774:	4293      	cmp	r3, r2
 8000776:	d10c      	bne.n	8000792 <lwrb_get_free+0x32>
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	699b      	ldr	r3, [r3, #24]
 800077c:	4a1a      	ldr	r2, [pc, #104]	; (80007e8 <lwrb_get_free+0x88>)
 800077e:	4293      	cmp	r3, r2
 8000780:	d107      	bne.n	8000792 <lwrb_get_free+0x32>
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	685b      	ldr	r3, [r3, #4]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d003      	beq.n	8000792 <lwrb_get_free+0x32>
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	689b      	ldr	r3, [r3, #8]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d101      	bne.n	8000796 <lwrb_get_free+0x36>
        return 0;
 8000792:	2300      	movs	r3, #0
 8000794:	e01f      	b.n	80007d6 <lwrb_get_free+0x76>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	691b      	ldr	r3, [r3, #16]
 800079a:	613b      	str	r3, [r7, #16]
    r = buff->r;
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	68db      	ldr	r3, [r3, #12]
 80007a0:	60fb      	str	r3, [r7, #12]
    if (w == r) {
 80007a2:	693a      	ldr	r2, [r7, #16]
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	429a      	cmp	r2, r3
 80007a8:	d103      	bne.n	80007b2 <lwrb_get_free+0x52>
        size = buff->size;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	689b      	ldr	r3, [r3, #8]
 80007ae:	617b      	str	r3, [r7, #20]
 80007b0:	e00f      	b.n	80007d2 <lwrb_get_free+0x72>
    } else if (r > w) {
 80007b2:	68fa      	ldr	r2, [r7, #12]
 80007b4:	693b      	ldr	r3, [r7, #16]
 80007b6:	429a      	cmp	r2, r3
 80007b8:	d904      	bls.n	80007c4 <lwrb_get_free+0x64>
        size = r - w;
 80007ba:	68fa      	ldr	r2, [r7, #12]
 80007bc:	693b      	ldr	r3, [r7, #16]
 80007be:	1ad3      	subs	r3, r2, r3
 80007c0:	617b      	str	r3, [r7, #20]
 80007c2:	e006      	b.n	80007d2 <lwrb_get_free+0x72>
    } else {
        size = buff->size - (w - r);
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	689a      	ldr	r2, [r3, #8]
 80007c8:	68f9      	ldr	r1, [r7, #12]
 80007ca:	693b      	ldr	r3, [r7, #16]
 80007cc:	1acb      	subs	r3, r1, r3
 80007ce:	4413      	add	r3, r2
 80007d0:	617b      	str	r3, [r7, #20]
    }

    /* Buffer free size is always 1 less than actual size */
    return size - 1;
 80007d2:	697b      	ldr	r3, [r7, #20]
 80007d4:	3b01      	subs	r3, #1
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	371c      	adds	r7, #28
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	deadbeef 	.word	0xdeadbeef
 80007e8:	21524110 	.word	0x21524110

080007ec <lwrb_get_linear_block_read_address>:
 * \brief           Get linear address for buffer for fast read
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer start address
 */
void*
lwrb_get_linear_block_read_address(LWRB_VOLATILE lwrb_t* buff) {
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
    if (!BUF_IS_VALID(buff)) {
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d011      	beq.n	800081e <lwrb_get_linear_block_read_address+0x32>
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	4a0e      	ldr	r2, [pc, #56]	; (8000838 <lwrb_get_linear_block_read_address+0x4c>)
 8000800:	4293      	cmp	r3, r2
 8000802:	d10c      	bne.n	800081e <lwrb_get_linear_block_read_address+0x32>
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	4a0c      	ldr	r2, [pc, #48]	; (800083c <lwrb_get_linear_block_read_address+0x50>)
 800080a:	4293      	cmp	r3, r2
 800080c:	d107      	bne.n	800081e <lwrb_get_linear_block_read_address+0x32>
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	685b      	ldr	r3, [r3, #4]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d003      	beq.n	800081e <lwrb_get_linear_block_read_address+0x32>
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	689b      	ldr	r3, [r3, #8]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d101      	bne.n	8000822 <lwrb_get_linear_block_read_address+0x36>
        return NULL;
 800081e:	2300      	movs	r3, #0
 8000820:	e004      	b.n	800082c <lwrb_get_linear_block_read_address+0x40>
    }
    return &buff->buff[buff->r];
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	685a      	ldr	r2, [r3, #4]
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	68db      	ldr	r3, [r3, #12]
 800082a:	4413      	add	r3, r2
}
 800082c:	4618      	mov	r0, r3
 800082e:	370c      	adds	r7, #12
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr
 8000838:	deadbeef 	.word	0xdeadbeef
 800083c:	21524110 	.word	0x21524110

08000840 <lwrb_get_linear_block_read_length>:
 * \brief           Get length of linear block address before it overflows for read operation
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer size in units of bytes for read operation
 */
size_t
lwrb_get_linear_block_read_length(LWRB_VOLATILE lwrb_t* buff) {
 8000840:	b480      	push	{r7}
 8000842:	b087      	sub	sp, #28
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
    size_t w, r, len;

    if (!BUF_IS_VALID(buff)) {
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d011      	beq.n	8000872 <lwrb_get_linear_block_read_length+0x32>
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	4a1a      	ldr	r2, [pc, #104]	; (80008bc <lwrb_get_linear_block_read_length+0x7c>)
 8000854:	4293      	cmp	r3, r2
 8000856:	d10c      	bne.n	8000872 <lwrb_get_linear_block_read_length+0x32>
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	699b      	ldr	r3, [r3, #24]
 800085c:	4a18      	ldr	r2, [pc, #96]	; (80008c0 <lwrb_get_linear_block_read_length+0x80>)
 800085e:	4293      	cmp	r3, r2
 8000860:	d107      	bne.n	8000872 <lwrb_get_linear_block_read_length+0x32>
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	685b      	ldr	r3, [r3, #4]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d003      	beq.n	8000872 <lwrb_get_linear_block_read_length+0x32>
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	689b      	ldr	r3, [r3, #8]
 800086e:	2b00      	cmp	r3, #0
 8000870:	d101      	bne.n	8000876 <lwrb_get_linear_block_read_length+0x36>
        return 0;
 8000872:	2300      	movs	r3, #0
 8000874:	e01b      	b.n	80008ae <lwrb_get_linear_block_read_length+0x6e>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	691b      	ldr	r3, [r3, #16]
 800087a:	613b      	str	r3, [r7, #16]
    r = buff->r;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	68db      	ldr	r3, [r3, #12]
 8000880:	60fb      	str	r3, [r7, #12]
    if (w > r) {
 8000882:	693a      	ldr	r2, [r7, #16]
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	429a      	cmp	r2, r3
 8000888:	d904      	bls.n	8000894 <lwrb_get_linear_block_read_length+0x54>
        len = w - r;
 800088a:	693a      	ldr	r2, [r7, #16]
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	1ad3      	subs	r3, r2, r3
 8000890:	617b      	str	r3, [r7, #20]
 8000892:	e00b      	b.n	80008ac <lwrb_get_linear_block_read_length+0x6c>
    } else if (r > w) {
 8000894:	68fa      	ldr	r2, [r7, #12]
 8000896:	693b      	ldr	r3, [r7, #16]
 8000898:	429a      	cmp	r2, r3
 800089a:	d905      	bls.n	80008a8 <lwrb_get_linear_block_read_length+0x68>
        len = buff->size - r;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	689a      	ldr	r2, [r3, #8]
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	1ad3      	subs	r3, r2, r3
 80008a4:	617b      	str	r3, [r7, #20]
 80008a6:	e001      	b.n	80008ac <lwrb_get_linear_block_read_length+0x6c>
    } else {
        len = 0;
 80008a8:	2300      	movs	r3, #0
 80008aa:	617b      	str	r3, [r7, #20]
    }
    return len;
 80008ac:	697b      	ldr	r3, [r7, #20]
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	371c      	adds	r7, #28
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	deadbeef 	.word	0xdeadbeef
 80008c0:	21524110 	.word	0x21524110

080008c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008c8:	f001 fbcc 	bl	8002064 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008cc:	f000 f84c 	bl	8000968 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008d0:	f000 f9ba 	bl	8000c48 <MX_GPIO_Init>
  MX_DMA_Init();
 80008d4:	f000 f97a 	bl	8000bcc <MX_DMA_Init>
  MX_DCMI_Init();
 80008d8:	f000 f8b8 	bl	8000a4c <MX_DCMI_Init>
  MX_I2C1_Init();
 80008dc:	f000 f8de 	bl	8000a9c <MX_I2C1_Init>
  MX_USART3_UART_Init();
 80008e0:	f000 f91c 	bl	8000b1c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80008e4:	f000 f944 	bl	8000b70 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  printf("\033c");
 80008e8:	4819      	ldr	r0, [pc, #100]	; (8000950 <main+0x8c>)
 80008ea:	f006 ff43 	bl	8007774 <iprintf>

  printf("Duvitech LLC 2024 v0.01\r\n");
 80008ee:	4819      	ldr	r0, [pc, #100]	; (8000954 <main+0x90>)
 80008f0:	f006 ffa6 	bl	8007840 <puts>
  printf("Initializing, please wait ...\r\n");
 80008f4:	4818      	ldr	r0, [pc, #96]	; (8000958 <main+0x94>)
 80008f6:	f006 ffa3 	bl	8007840 <puts>

  while(OV5640_Init())
 80008fa:	e004      	b.n	8000906 <main+0x42>
  {
          printf("OV5640 error, please check !\r\n");
 80008fc:	4817      	ldr	r0, [pc, #92]	; (800095c <main+0x98>)
 80008fe:	f006 ff9f 	bl	8007840 <puts>
          // BSP_LCD_Clear(LCD_COLOR_WHITE);
          // HAL_Delay(200);
          // BSP_LCD_DisplayStringAt(0, 60, (uint8_t *)"OV5640 error, please check !", CENTER_MODE);
          Error_Handler();
 8000902:	f000 fab7 	bl	8000e74 <Error_Handler>
  while(OV5640_Init())
 8000906:	f000 fb29 	bl	8000f5c <OV5640_Init>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d1f5      	bne.n	80008fc <main+0x38>
  }

  printf("Initialized OV5640\r\n");
 8000910:	4813      	ldr	r0, [pc, #76]	; (8000960 <main+0x9c>)
 8000912:	f006 ff95 	bl	8007840 <puts>

  OV5640_RGB565_Mode();
 8000916:	f000 fba1 	bl	800105c <OV5640_RGB565_Mode>
  OV5640_Light_Mode(0);	   //set auto
 800091a:	2000      	movs	r0, #0
 800091c:	f000 fbc2 	bl	80010a4 <OV5640_Light_Mode>
  OV5640_Color_Saturation(3); //default
 8000920:	2003      	movs	r0, #3
 8000922:	f000 fbf3 	bl	800110c <OV5640_Color_Saturation>
  OV5640_Brightness(4);	//default
 8000926:	2004      	movs	r0, #4
 8000928:	f000 fc40 	bl	80011ac <OV5640_Brightness>
  OV5640_Contrast(3);     //default
 800092c:	2003      	movs	r0, #3
 800092e:	f000 fc77 	bl	8001220 <OV5640_Contrast>
  OV5640_Sharpness(33);	//set auto
 8000932:	2021      	movs	r0, #33	; 0x21
 8000934:	f000 fcd0 	bl	80012d8 <OV5640_Sharpness>

  jpeg_test(QVGA_320_240);
 8000938:	2002      	movs	r0, #2
 800093a:	f000 fd75 	bl	8001428 <jpeg_test>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 800093e:	2101      	movs	r1, #1
 8000940:	4808      	ldr	r0, [pc, #32]	; (8000964 <main+0xa0>)
 8000942:	f003 ff4e 	bl	80047e2 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000946:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800094a:	f001 fbcd 	bl	80020e8 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 800094e:	e7f6      	b.n	800093e <main+0x7a>
 8000950:	08008548 	.word	0x08008548
 8000954:	0800854c 	.word	0x0800854c
 8000958:	08008568 	.word	0x08008568
 800095c:	08008588 	.word	0x08008588
 8000960:	080085a8 	.word	0x080085a8
 8000964:	40020400 	.word	0x40020400

08000968 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b094      	sub	sp, #80	; 0x50
 800096c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800096e:	f107 0320 	add.w	r3, r7, #32
 8000972:	2230      	movs	r2, #48	; 0x30
 8000974:	2100      	movs	r1, #0
 8000976:	4618      	mov	r0, r3
 8000978:	f007 f842 	bl	8007a00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800097c:	f107 030c 	add.w	r3, r7, #12
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]
 8000988:	60da      	str	r2, [r3, #12]
 800098a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800098c:	2300      	movs	r3, #0
 800098e:	60bb      	str	r3, [r7, #8]
 8000990:	4b2c      	ldr	r3, [pc, #176]	; (8000a44 <SystemClock_Config+0xdc>)
 8000992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000994:	4a2b      	ldr	r2, [pc, #172]	; (8000a44 <SystemClock_Config+0xdc>)
 8000996:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800099a:	6413      	str	r3, [r2, #64]	; 0x40
 800099c:	4b29      	ldr	r3, [pc, #164]	; (8000a44 <SystemClock_Config+0xdc>)
 800099e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009a4:	60bb      	str	r3, [r7, #8]
 80009a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009a8:	2300      	movs	r3, #0
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	4b26      	ldr	r3, [pc, #152]	; (8000a48 <SystemClock_Config+0xe0>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009b4:	4a24      	ldr	r2, [pc, #144]	; (8000a48 <SystemClock_Config+0xe0>)
 80009b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ba:	6013      	str	r3, [r2, #0]
 80009bc:	4b22      	ldr	r3, [pc, #136]	; (8000a48 <SystemClock_Config+0xe0>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009c4:	607b      	str	r3, [r7, #4]
 80009c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009c8:	2301      	movs	r3, #1
 80009ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80009cc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80009d0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009d2:	2302      	movs	r3, #2
 80009d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009dc:	2304      	movs	r3, #4
 80009de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 120;
 80009e0:	2378      	movs	r3, #120	; 0x78
 80009e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009e4:	2302      	movs	r3, #2
 80009e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80009e8:	2305      	movs	r3, #5
 80009ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ec:	f107 0320 	add.w	r3, r7, #32
 80009f0:	4618      	mov	r0, r3
 80009f2:	f004 f9df 	bl	8004db4 <HAL_RCC_OscConfig>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80009fc:	f000 fa3a 	bl	8000e74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a00:	230f      	movs	r3, #15
 8000a02:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a04:	2302      	movs	r3, #2
 8000a06:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a0c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a10:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a16:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000a18:	f107 030c 	add.w	r3, r7, #12
 8000a1c:	2103      	movs	r1, #3
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f004 fc40 	bl	80052a4 <HAL_RCC_ClockConfig>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000a2a:	f000 fa23 	bl	8000e74 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_PLLCLK, RCC_MCODIV_5);
 8000a2e:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8000a32:	f44f 01c0 	mov.w	r1, #6291456	; 0x600000
 8000a36:	2000      	movs	r0, #0
 8000a38:	f004 fd1a 	bl	8005470 <HAL_RCC_MCOConfig>
}
 8000a3c:	bf00      	nop
 8000a3e:	3750      	adds	r7, #80	; 0x50
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	40023800 	.word	0x40023800
 8000a48:	40007000 	.word	0x40007000

08000a4c <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000a50:	4b10      	ldr	r3, [pc, #64]	; (8000a94 <MX_DCMI_Init+0x48>)
 8000a52:	4a11      	ldr	r2, [pc, #68]	; (8000a98 <MX_DCMI_Init+0x4c>)
 8000a54:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000a56:	4b0f      	ldr	r3, [pc, #60]	; (8000a94 <MX_DCMI_Init+0x48>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8000a5c:	4b0d      	ldr	r3, [pc, #52]	; (8000a94 <MX_DCMI_Init+0x48>)
 8000a5e:	2220      	movs	r2, #32
 8000a60:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8000a62:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <MX_DCMI_Init+0x48>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000a68:	4b0a      	ldr	r3, [pc, #40]	; (8000a94 <MX_DCMI_Init+0x48>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000a6e:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <MX_DCMI_Init+0x48>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000a74:	4b07      	ldr	r3, [pc, #28]	; (8000a94 <MX_DCMI_Init+0x48>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_ENABLE;
 8000a7a:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <MX_DCMI_Init+0x48>)
 8000a7c:	2208      	movs	r2, #8
 8000a7e:	621a      	str	r2, [r3, #32]
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000a80:	4804      	ldr	r0, [pc, #16]	; (8000a94 <MX_DCMI_Init+0x48>)
 8000a82:	f001 fe7b 	bl	800277c <HAL_DCMI_Init>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_DCMI_Init+0x44>
  {
    Error_Handler();
 8000a8c:	f000 f9f2 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000a90:	bf00      	nop
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	200000a8 	.word	0x200000a8
 8000a98:	50050000 	.word	0x50050000

08000a9c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000aa0:	4b1b      	ldr	r3, [pc, #108]	; (8000b10 <MX_I2C1_Init+0x74>)
 8000aa2:	4a1c      	ldr	r2, [pc, #112]	; (8000b14 <MX_I2C1_Init+0x78>)
 8000aa4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000aa6:	4b1a      	ldr	r3, [pc, #104]	; (8000b10 <MX_I2C1_Init+0x74>)
 8000aa8:	4a1b      	ldr	r2, [pc, #108]	; (8000b18 <MX_I2C1_Init+0x7c>)
 8000aaa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000aac:	4b18      	ldr	r3, [pc, #96]	; (8000b10 <MX_I2C1_Init+0x74>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ab2:	4b17      	ldr	r3, [pc, #92]	; (8000b10 <MX_I2C1_Init+0x74>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ab8:	4b15      	ldr	r3, [pc, #84]	; (8000b10 <MX_I2C1_Init+0x74>)
 8000aba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000abe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ac0:	4b13      	ldr	r3, [pc, #76]	; (8000b10 <MX_I2C1_Init+0x74>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ac6:	4b12      	ldr	r3, [pc, #72]	; (8000b10 <MX_I2C1_Init+0x74>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000acc:	4b10      	ldr	r3, [pc, #64]	; (8000b10 <MX_I2C1_Init+0x74>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ad2:	4b0f      	ldr	r3, [pc, #60]	; (8000b10 <MX_I2C1_Init+0x74>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ad8:	480d      	ldr	r0, [pc, #52]	; (8000b10 <MX_I2C1_Init+0x74>)
 8000ada:	f003 fe9d 	bl	8004818 <HAL_I2C_Init>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ae4:	f000 f9c6 	bl	8000e74 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ae8:	2100      	movs	r1, #0
 8000aea:	4809      	ldr	r0, [pc, #36]	; (8000b10 <MX_I2C1_Init+0x74>)
 8000aec:	f003 ffd8 	bl	8004aa0 <HAL_I2CEx_ConfigAnalogFilter>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000af6:	f000 f9bd 	bl	8000e74 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000afa:	2100      	movs	r1, #0
 8000afc:	4804      	ldr	r0, [pc, #16]	; (8000b10 <MX_I2C1_Init+0x74>)
 8000afe:	f004 f80b 	bl	8004b18 <HAL_I2CEx_ConfigDigitalFilter>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000b08:	f000 f9b4 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b0c:	bf00      	nop
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	20000148 	.word	0x20000148
 8000b14:	40005400 	.word	0x40005400
 8000b18:	000186a0 	.word	0x000186a0

08000b1c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b20:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <MX_USART3_UART_Init+0x4c>)
 8000b22:	4a12      	ldr	r2, [pc, #72]	; (8000b6c <MX_USART3_UART_Init+0x50>)
 8000b24:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b26:	4b10      	ldr	r3, [pc, #64]	; (8000b68 <MX_USART3_UART_Init+0x4c>)
 8000b28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b2c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b2e:	4b0e      	ldr	r3, [pc, #56]	; (8000b68 <MX_USART3_UART_Init+0x4c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b34:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <MX_USART3_UART_Init+0x4c>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b3a:	4b0b      	ldr	r3, [pc, #44]	; (8000b68 <MX_USART3_UART_Init+0x4c>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b40:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <MX_USART3_UART_Init+0x4c>)
 8000b42:	220c      	movs	r2, #12
 8000b44:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b46:	4b08      	ldr	r3, [pc, #32]	; (8000b68 <MX_USART3_UART_Init+0x4c>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b4c:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <MX_USART3_UART_Init+0x4c>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b52:	4805      	ldr	r0, [pc, #20]	; (8000b68 <MX_USART3_UART_Init+0x4c>)
 8000b54:	f005 f902 	bl	8005d5c <HAL_UART_Init>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000b5e:	f000 f989 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	2000019c 	.word	0x2000019c
 8000b6c:	40004800 	.word	0x40004800

08000b70 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b74:	4b14      	ldr	r3, [pc, #80]	; (8000bc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b76:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000b7a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000b7c:	4b12      	ldr	r3, [pc, #72]	; (8000bc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b7e:	2204      	movs	r2, #4
 8000b80:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b82:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b84:	2202      	movs	r2, #2
 8000b86:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000b88:	4b0f      	ldr	r3, [pc, #60]	; (8000bc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b8e:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b90:	2202      	movs	r2, #2
 8000b92:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000b94:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b9a:	4b0b      	ldr	r3, [pc, #44]	; (8000bc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000ba0:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000ba6:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000bac:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000bb2:	4805      	ldr	r0, [pc, #20]	; (8000bc8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bb4:	f003 ffef 	bl	8004b96 <HAL_PCD_Init>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000bbe:	f000 f959 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	200002a4 	.word	0x200002a4

08000bcc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	607b      	str	r3, [r7, #4]
 8000bd6:	4b1b      	ldr	r3, [pc, #108]	; (8000c44 <MX_DMA_Init+0x78>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	4a1a      	ldr	r2, [pc, #104]	; (8000c44 <MX_DMA_Init+0x78>)
 8000bdc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000be0:	6313      	str	r3, [r2, #48]	; 0x30
 8000be2:	4b18      	ldr	r3, [pc, #96]	; (8000c44 <MX_DMA_Init+0x78>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bea:	607b      	str	r3, [r7, #4]
 8000bec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	603b      	str	r3, [r7, #0]
 8000bf2:	4b14      	ldr	r3, [pc, #80]	; (8000c44 <MX_DMA_Init+0x78>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	4a13      	ldr	r2, [pc, #76]	; (8000c44 <MX_DMA_Init+0x78>)
 8000bf8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfe:	4b11      	ldr	r3, [pc, #68]	; (8000c44 <MX_DMA_Init+0x78>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c06:	603b      	str	r3, [r7, #0]
 8000c08:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	200c      	movs	r0, #12
 8000c10:	f001 fb46 	bl	80022a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000c14:	200c      	movs	r0, #12
 8000c16:	f001 fb5f 	bl	80022d8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	200e      	movs	r0, #14
 8000c20:	f001 fb3e 	bl	80022a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000c24:	200e      	movs	r0, #14
 8000c26:	f001 fb57 	bl	80022d8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	2039      	movs	r0, #57	; 0x39
 8000c30:	f001 fb36 	bl	80022a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000c34:	2039      	movs	r0, #57	; 0x39
 8000c36:	f001 fb4f 	bl	80022d8 <HAL_NVIC_EnableIRQ>

}
 8000c3a:	bf00      	nop
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40023800 	.word	0x40023800

08000c48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b08c      	sub	sp, #48	; 0x30
 8000c4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4e:	f107 031c 	add.w	r3, r7, #28
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
 8000c56:	605a      	str	r2, [r3, #4]
 8000c58:	609a      	str	r2, [r3, #8]
 8000c5a:	60da      	str	r2, [r3, #12]
 8000c5c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	61bb      	str	r3, [r7, #24]
 8000c62:	4b76      	ldr	r3, [pc, #472]	; (8000e3c <MX_GPIO_Init+0x1f4>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	4a75      	ldr	r2, [pc, #468]	; (8000e3c <MX_GPIO_Init+0x1f4>)
 8000c68:	f043 0310 	orr.w	r3, r3, #16
 8000c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6e:	4b73      	ldr	r3, [pc, #460]	; (8000e3c <MX_GPIO_Init+0x1f4>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	f003 0310 	and.w	r3, r3, #16
 8000c76:	61bb      	str	r3, [r7, #24]
 8000c78:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	617b      	str	r3, [r7, #20]
 8000c7e:	4b6f      	ldr	r3, [pc, #444]	; (8000e3c <MX_GPIO_Init+0x1f4>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	4a6e      	ldr	r2, [pc, #440]	; (8000e3c <MX_GPIO_Init+0x1f4>)
 8000c84:	f043 0304 	orr.w	r3, r3, #4
 8000c88:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8a:	4b6c      	ldr	r3, [pc, #432]	; (8000e3c <MX_GPIO_Init+0x1f4>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	f003 0304 	and.w	r3, r3, #4
 8000c92:	617b      	str	r3, [r7, #20]
 8000c94:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	613b      	str	r3, [r7, #16]
 8000c9a:	4b68      	ldr	r3, [pc, #416]	; (8000e3c <MX_GPIO_Init+0x1f4>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	4a67      	ldr	r2, [pc, #412]	; (8000e3c <MX_GPIO_Init+0x1f4>)
 8000ca0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca6:	4b65      	ldr	r3, [pc, #404]	; (8000e3c <MX_GPIO_Init+0x1f4>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cae:	613b      	str	r3, [r7, #16]
 8000cb0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	60fb      	str	r3, [r7, #12]
 8000cb6:	4b61      	ldr	r3, [pc, #388]	; (8000e3c <MX_GPIO_Init+0x1f4>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	4a60      	ldr	r2, [pc, #384]	; (8000e3c <MX_GPIO_Init+0x1f4>)
 8000cbc:	f043 0301 	orr.w	r3, r3, #1
 8000cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc2:	4b5e      	ldr	r3, [pc, #376]	; (8000e3c <MX_GPIO_Init+0x1f4>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	f003 0301 	and.w	r3, r3, #1
 8000cca:	60fb      	str	r3, [r7, #12]
 8000ccc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	60bb      	str	r3, [r7, #8]
 8000cd2:	4b5a      	ldr	r3, [pc, #360]	; (8000e3c <MX_GPIO_Init+0x1f4>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	4a59      	ldr	r2, [pc, #356]	; (8000e3c <MX_GPIO_Init+0x1f4>)
 8000cd8:	f043 0302 	orr.w	r3, r3, #2
 8000cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cde:	4b57      	ldr	r3, [pc, #348]	; (8000e3c <MX_GPIO_Init+0x1f4>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	f003 0302 	and.w	r3, r3, #2
 8000ce6:	60bb      	str	r3, [r7, #8]
 8000ce8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	607b      	str	r3, [r7, #4]
 8000cee:	4b53      	ldr	r3, [pc, #332]	; (8000e3c <MX_GPIO_Init+0x1f4>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	4a52      	ldr	r2, [pc, #328]	; (8000e3c <MX_GPIO_Init+0x1f4>)
 8000cf4:	f043 0308 	orr.w	r3, r3, #8
 8000cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfa:	4b50      	ldr	r3, [pc, #320]	; (8000e3c <MX_GPIO_Init+0x1f4>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	f003 0308 	and.w	r3, r3, #8
 8000d02:	607b      	str	r3, [r7, #4]
 8000d04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	603b      	str	r3, [r7, #0]
 8000d0a:	4b4c      	ldr	r3, [pc, #304]	; (8000e3c <MX_GPIO_Init+0x1f4>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	4a4b      	ldr	r2, [pc, #300]	; (8000e3c <MX_GPIO_Init+0x1f4>)
 8000d10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d14:	6313      	str	r3, [r2, #48]	; 0x30
 8000d16:	4b49      	ldr	r3, [pc, #292]	; (8000e3c <MX_GPIO_Init+0x1f4>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d1e:	603b      	str	r3, [r7, #0]
 8000d20:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|SIOD_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000d22:	2200      	movs	r2, #0
 8000d24:	f244 0189 	movw	r1, #16521	; 0x4089
 8000d28:	4845      	ldr	r0, [pc, #276]	; (8000e40 <MX_GPIO_Init+0x1f8>)
 8000d2a:	f003 fd41 	bl	80047b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000d2e:	2200      	movs	r2, #0
 8000d30:	2140      	movs	r1, #64	; 0x40
 8000d32:	4844      	ldr	r0, [pc, #272]	; (8000e44 <MX_GPIO_Init+0x1fc>)
 8000d34:	f003 fd3c 	bl	80047b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OV5640_PWDN_GPIO_Port, OV5640_PWDN_Pin, GPIO_PIN_SET);
 8000d38:	2201      	movs	r2, #1
 8000d3a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d3e:	4842      	ldr	r0, [pc, #264]	; (8000e48 <MX_GPIO_Init+0x200>)
 8000d40:	f003 fd36 	bl	80047b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SIOC_GPIO_Port, SIOC_Pin, GPIO_PIN_SET);
 8000d44:	2201      	movs	r2, #1
 8000d46:	2120      	movs	r1, #32
 8000d48:	483d      	ldr	r0, [pc, #244]	; (8000e40 <MX_GPIO_Init+0x1f8>)
 8000d4a:	f003 fd31 	bl	80047b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000d4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d54:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000d5e:	f107 031c 	add.w	r3, r7, #28
 8000d62:	4619      	mov	r1, r3
 8000d64:	4838      	ldr	r0, [pc, #224]	; (8000e48 <MX_GPIO_Init+0x200>)
 8000d66:	f003 fb5f 	bl	8004428 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000d6a:	f244 0381 	movw	r3, #16513	; 0x4081
 8000d6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d70:	2301      	movs	r3, #1
 8000d72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d7c:	f107 031c 	add.w	r3, r7, #28
 8000d80:	4619      	mov	r1, r3
 8000d82:	482f      	ldr	r0, [pc, #188]	; (8000e40 <MX_GPIO_Init+0x1f8>)
 8000d84:	f003 fb50 	bl	8004428 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000d88:	2340      	movs	r3, #64	; 0x40
 8000d8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d90:	2300      	movs	r3, #0
 8000d92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d94:	2300      	movs	r3, #0
 8000d96:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000d98:	f107 031c 	add.w	r3, r7, #28
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4829      	ldr	r0, [pc, #164]	; (8000e44 <MX_GPIO_Init+0x1fc>)
 8000da0:	f003 fb42 	bl	8004428 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000da4:	2380      	movs	r3, #128	; 0x80
 8000da6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000da8:	2300      	movs	r3, #0
 8000daa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000db0:	f107 031c 	add.w	r3, r7, #28
 8000db4:	4619      	mov	r1, r3
 8000db6:	4823      	ldr	r0, [pc, #140]	; (8000e44 <MX_GPIO_Init+0x1fc>)
 8000db8:	f003 fb36 	bl	8004428 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000dbc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dca:	2303      	movs	r3, #3
 8000dcc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd2:	f107 031c 	add.w	r3, r7, #28
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	481c      	ldr	r0, [pc, #112]	; (8000e4c <MX_GPIO_Init+0x204>)
 8000dda:	f003 fb25 	bl	8004428 <HAL_GPIO_Init>

  /*Configure GPIO pin : OV5640_PWDN_Pin */
  GPIO_InitStruct.Pin = OV5640_PWDN_Pin;
 8000dde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000de2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de4:	2301      	movs	r3, #1
 8000de6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de8:	2300      	movs	r3, #0
 8000dea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dec:	2302      	movs	r3, #2
 8000dee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OV5640_PWDN_GPIO_Port, &GPIO_InitStruct);
 8000df0:	f107 031c 	add.w	r3, r7, #28
 8000df4:	4619      	mov	r1, r3
 8000df6:	4814      	ldr	r0, [pc, #80]	; (8000e48 <MX_GPIO_Init+0x200>)
 8000df8:	f003 fb16 	bl	8004428 <HAL_GPIO_Init>

  /*Configure GPIO pin : SIOD_Pin */
  GPIO_InitStruct.Pin = SIOD_Pin;
 8000dfc:	2308      	movs	r3, #8
 8000dfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000e00:	2311      	movs	r3, #17
 8000e02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e04:	2300      	movs	r3, #0
 8000e06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e08:	2303      	movs	r3, #3
 8000e0a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SIOD_GPIO_Port, &GPIO_InitStruct);
 8000e0c:	f107 031c 	add.w	r3, r7, #28
 8000e10:	4619      	mov	r1, r3
 8000e12:	480b      	ldr	r0, [pc, #44]	; (8000e40 <MX_GPIO_Init+0x1f8>)
 8000e14:	f003 fb08 	bl	8004428 <HAL_GPIO_Init>

  /*Configure GPIO pin : SIOC_Pin */
  GPIO_InitStruct.Pin = SIOC_Pin;
 8000e18:	2320      	movs	r3, #32
 8000e1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000e1c:	2311      	movs	r3, #17
 8000e1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e20:	2301      	movs	r3, #1
 8000e22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e24:	2303      	movs	r3, #3
 8000e26:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SIOC_GPIO_Port, &GPIO_InitStruct);
 8000e28:	f107 031c 	add.w	r3, r7, #28
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4804      	ldr	r0, [pc, #16]	; (8000e40 <MX_GPIO_Init+0x1f8>)
 8000e30:	f003 fafa 	bl	8004428 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e34:	bf00      	nop
 8000e36:	3730      	adds	r7, #48	; 0x30
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	40023800 	.word	0x40023800
 8000e40:	40020400 	.word	0x40020400
 8000e44:	40021800 	.word	0x40021800
 8000e48:	40020800 	.word	0x40020800
 8000e4c:	40020000 	.word	0x40020000

08000e50 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a04      	ldr	r2, [pc, #16]	; (8000e70 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d101      	bne.n	8000e66 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e62:	f001 f921 	bl	80020a8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e66:	bf00      	nop
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	40002000 	.word	0x40002000

08000e74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000e78:	2201      	movs	r2, #1
 8000e7a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e7e:	4803      	ldr	r0, [pc, #12]	; (8000e8c <Error_Handler+0x18>)
 8000e80:	f003 fc96 	bl	80047b0 <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e84:	b672      	cpsid	i
}
 8000e86:	bf00      	nop
  __disable_irq();
  while (1)
 8000e88:	e7fe      	b.n	8000e88 <Error_Handler+0x14>
 8000e8a:	bf00      	nop
 8000e8c:	40020400 	.word	0x40020400

08000e90 <OV5640_WR_Reg>:
	{352, 288},	//CIF
	{640, 480},	//VGA
};

uint8_t OV5640_WR_Reg(uint16_t reg,uint8_t data)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	460a      	mov	r2, r1
 8000e9a:	80fb      	strh	r3, [r7, #6]
 8000e9c:	4613      	mov	r3, r2
 8000e9e:	717b      	strb	r3, [r7, #5]
	uint8_t res=0;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	73fb      	strb	r3, [r7, #15]
	SCCB_Start();
 8000ea4:	f000 fbd6 	bl	8001654 <SCCB_Start>
	if(SCCB_WR_Byte(OV5640_ADDR))res=1;
 8000ea8:	2078      	movs	r0, #120	; 0x78
 8000eaa:	f000 fc2f 	bl	800170c <SCCB_WR_Byte>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <OV5640_WR_Reg+0x28>
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	73fb      	strb	r3, [r7, #15]
   	if(SCCB_WR_Byte(reg>>8))res=1;
 8000eb8:	88fb      	ldrh	r3, [r7, #6]
 8000eba:	0a1b      	lsrs	r3, r3, #8
 8000ebc:	b29b      	uxth	r3, r3
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f000 fc23 	bl	800170c <SCCB_WR_Byte>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <OV5640_WR_Reg+0x40>
 8000ecc:	2301      	movs	r3, #1
 8000ece:	73fb      	strb	r3, [r7, #15]
   	if(SCCB_WR_Byte(reg))res=1;
 8000ed0:	88fb      	ldrh	r3, [r7, #6]
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f000 fc19 	bl	800170c <SCCB_WR_Byte>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <OV5640_WR_Reg+0x54>
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	73fb      	strb	r3, [r7, #15]
   	if(SCCB_WR_Byte(data))res=1;
 8000ee4:	797b      	ldrb	r3, [r7, #5]
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f000 fc10 	bl	800170c <SCCB_WR_Byte>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <OV5640_WR_Reg+0x66>
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	73fb      	strb	r3, [r7, #15]
  	SCCB_Stop();
 8000ef6:	f000 fbcb 	bl	8001690 <SCCB_Stop>
  	return	res;
 8000efa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	3710      	adds	r7, #16
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <OV5640_RD_Reg>:


uint8_t OV5640_RD_Reg(uint16_t reg)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	80fb      	strh	r3, [r7, #6]
	uint8_t val=0;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	73fb      	strb	r3, [r7, #15]
	SCCB_Start();
 8000f12:	f000 fb9f 	bl	8001654 <SCCB_Start>
	SCCB_WR_Byte(OV5640_ADDR);
 8000f16:	2078      	movs	r0, #120	; 0x78
 8000f18:	f000 fbf8 	bl	800170c <SCCB_WR_Byte>
   	SCCB_WR_Byte(reg>>8);
 8000f1c:	88fb      	ldrh	r3, [r7, #6]
 8000f1e:	0a1b      	lsrs	r3, r3, #8
 8000f20:	b29b      	uxth	r3, r3
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	4618      	mov	r0, r3
 8000f26:	f000 fbf1 	bl	800170c <SCCB_WR_Byte>
  	SCCB_WR_Byte(reg);
 8000f2a:	88fb      	ldrh	r3, [r7, #6]
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f000 fbec 	bl	800170c <SCCB_WR_Byte>
	SCCB_Stop();
 8000f34:	f000 fbac 	bl	8001690 <SCCB_Stop>

	SCCB_Start();
 8000f38:	f000 fb8c 	bl	8001654 <SCCB_Start>
	SCCB_WR_Byte(OV5640_ADDR|0X01);
 8000f3c:	2079      	movs	r0, #121	; 0x79
 8000f3e:	f000 fbe5 	bl	800170c <SCCB_WR_Byte>
   	val=SCCB_RD_Byte();
 8000f42:	f000 fc33 	bl	80017ac <SCCB_RD_Byte>
 8000f46:	4603      	mov	r3, r0
 8000f48:	73fb      	strb	r3, [r7, #15]
  	SCCB_No_Ack();
 8000f4a:	f000 fbbd 	bl	80016c8 <SCCB_No_Ack>
  	SCCB_Stop();
 8000f4e:	f000 fb9f 	bl	8001690 <SCCB_Stop>
  	return val;
 8000f52:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3710      	adds	r7, #16
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <OV5640_Init>:


uint8_t OV5640_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
	uint16_t i=0;
 8000f62:	2300      	movs	r3, #0
 8000f64:	80fb      	strh	r3, [r7, #6]
	uint16_t reg;


	OV5640_PWDN_Pin_RESET;		//POWER ON
 8000f66:	2200      	movs	r2, #0
 8000f68:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f6c:	4826      	ldr	r0, [pc, #152]	; (8001008 <OV5640_Init+0xac>)
 8000f6e:	f003 fc1f 	bl	80047b0 <HAL_GPIO_WritePin>
	HAL_Delay(30);
 8000f72:	201e      	movs	r0, #30
 8000f74:	f001 f8b8 	bl	80020e8 <HAL_Delay>

	reg=OV5640_RD_Reg(OV5640_CHIPIDH);
 8000f78:	f243 000a 	movw	r0, #12298	; 0x300a
 8000f7c:	f7ff ffc2 	bl	8000f04 <OV5640_RD_Reg>
 8000f80:	4603      	mov	r3, r0
 8000f82:	80bb      	strh	r3, [r7, #4]
	reg<<=8;
 8000f84:	88bb      	ldrh	r3, [r7, #4]
 8000f86:	021b      	lsls	r3, r3, #8
 8000f88:	80bb      	strh	r3, [r7, #4]
	reg|=OV5640_RD_Reg(OV5640_CHIPIDL);
 8000f8a:	f243 000b 	movw	r0, #12299	; 0x300b
 8000f8e:	f7ff ffb9 	bl	8000f04 <OV5640_RD_Reg>
 8000f92:	4603      	mov	r3, r0
 8000f94:	b29a      	uxth	r2, r3
 8000f96:	88bb      	ldrh	r3, [r7, #4]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	80bb      	strh	r3, [r7, #4]
	if(reg!=OV5640_ID)
 8000f9c:	88bb      	ldrh	r3, [r7, #4]
 8000f9e:	f245 6240 	movw	r2, #22080	; 0x5640
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d006      	beq.n	8000fb4 <OV5640_Init+0x58>
	{
		printf("ID: %d \r\n",reg);
 8000fa6:	88bb      	ldrh	r3, [r7, #4]
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4818      	ldr	r0, [pc, #96]	; (800100c <OV5640_Init+0xb0>)
 8000fac:	f006 fbe2 	bl	8007774 <iprintf>
		return 1;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	e024      	b.n	8000ffe <OV5640_Init+0xa2>
	}
	OV5640_WR_Reg(0x3103,0X11);	//system clock from pad, bit[1]
 8000fb4:	2111      	movs	r1, #17
 8000fb6:	f243 1003 	movw	r0, #12547	; 0x3103
 8000fba:	f7ff ff69 	bl	8000e90 <OV5640_WR_Reg>
	OV5640_WR_Reg(0X3008,0X82);
 8000fbe:	2182      	movs	r1, #130	; 0x82
 8000fc0:	f243 0008 	movw	r0, #12296	; 0x3008
 8000fc4:	f7ff ff64 	bl	8000e90 <OV5640_WR_Reg>
	HAL_Delay(10);
 8000fc8:	200a      	movs	r0, #10
 8000fca:	f001 f88d 	bl	80020e8 <HAL_Delay>

	for(i=0;i<sizeof(ov5640_init_reg_tbl)/4;i++)
 8000fce:	2300      	movs	r3, #0
 8000fd0:	80fb      	strh	r3, [r7, #6]
 8000fd2:	e010      	b.n	8000ff6 <OV5640_Init+0x9a>
	{
		OV5640_WR_Reg(ov5640_init_reg_tbl[i][0],ov5640_init_reg_tbl[i][1]);
 8000fd4:	88fb      	ldrh	r3, [r7, #6]
 8000fd6:	4a0e      	ldr	r2, [pc, #56]	; (8001010 <OV5640_Init+0xb4>)
 8000fd8:	f832 2023 	ldrh.w	r2, [r2, r3, lsl #2]
 8000fdc:	88fb      	ldrh	r3, [r7, #6]
 8000fde:	490c      	ldr	r1, [pc, #48]	; (8001010 <OV5640_Init+0xb4>)
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	440b      	add	r3, r1
 8000fe4:	885b      	ldrh	r3, [r3, #2]
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4610      	mov	r0, r2
 8000fec:	f7ff ff50 	bl	8000e90 <OV5640_WR_Reg>
	for(i=0;i<sizeof(ov5640_init_reg_tbl)/4;i++)
 8000ff0:	88fb      	ldrh	r3, [r7, #6]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	80fb      	strh	r3, [r7, #6]
 8000ff6:	88fb      	ldrh	r3, [r7, #6]
 8000ff8:	2bce      	cmp	r3, #206	; 0xce
 8000ffa:	d9eb      	bls.n	8000fd4 <OV5640_Init+0x78>
	}

	return 0x00; 	//ok
 8000ffc:	2300      	movs	r3, #0
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40020800 	.word	0x40020800
 800100c:	080085bc 	.word	0x080085bc
 8001010:	08008730 	.word	0x08008730

08001014 <OV5640_JPEG_Mode>:
	}

	return reg;
}
void OV5640_JPEG_Mode(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
	uint16_t i=0;
 800101a:	2300      	movs	r3, #0
 800101c:	80fb      	strh	r3, [r7, #6]

	for(i=0;i<(sizeof(OV5640_jpeg_reg_tbl)/4);i++)
 800101e:	2300      	movs	r3, #0
 8001020:	80fb      	strh	r3, [r7, #6]
 8001022:	e010      	b.n	8001046 <OV5640_JPEG_Mode+0x32>
	{
		OV5640_WR_Reg(OV5640_jpeg_reg_tbl[i][0],OV5640_jpeg_reg_tbl[i][1]);
 8001024:	88fb      	ldrh	r3, [r7, #6]
 8001026:	4a0c      	ldr	r2, [pc, #48]	; (8001058 <OV5640_JPEG_Mode+0x44>)
 8001028:	f832 2023 	ldrh.w	r2, [r2, r3, lsl #2]
 800102c:	88fb      	ldrh	r3, [r7, #6]
 800102e:	490a      	ldr	r1, [pc, #40]	; (8001058 <OV5640_JPEG_Mode+0x44>)
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	440b      	add	r3, r1
 8001034:	885b      	ldrh	r3, [r3, #2]
 8001036:	b2db      	uxtb	r3, r3
 8001038:	4619      	mov	r1, r3
 800103a:	4610      	mov	r0, r2
 800103c:	f7ff ff28 	bl	8000e90 <OV5640_WR_Reg>
	for(i=0;i<(sizeof(OV5640_jpeg_reg_tbl)/4);i++)
 8001040:	88fb      	ldrh	r3, [r7, #6]
 8001042:	3301      	adds	r3, #1
 8001044:	80fb      	strh	r3, [r7, #6]
 8001046:	88fb      	ldrh	r3, [r7, #6]
 8001048:	2b2c      	cmp	r3, #44	; 0x2c
 800104a:	d9eb      	bls.n	8001024 <OV5640_JPEG_Mode+0x10>
	}
}
 800104c:	bf00      	nop
 800104e:	bf00      	nop
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	080085c8 	.word	0x080085c8

0800105c <OV5640_RGB565_Mode>:

void OV5640_RGB565_Mode(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
	uint16_t i=0;
 8001062:	2300      	movs	r3, #0
 8001064:	80fb      	strh	r3, [r7, #6]

	for(i=0;i<(sizeof(ov5640_rgb565_reg_tbl)/4);i++)
 8001066:	2300      	movs	r3, #0
 8001068:	80fb      	strh	r3, [r7, #6]
 800106a:	e010      	b.n	800108e <OV5640_RGB565_Mode+0x32>
	{
		OV5640_WR_Reg(ov5640_rgb565_reg_tbl[i][0],ov5640_rgb565_reg_tbl[i][1]);
 800106c:	88fb      	ldrh	r3, [r7, #6]
 800106e:	4a0c      	ldr	r2, [pc, #48]	; (80010a0 <OV5640_RGB565_Mode+0x44>)
 8001070:	f832 2023 	ldrh.w	r2, [r2, r3, lsl #2]
 8001074:	88fb      	ldrh	r3, [r7, #6]
 8001076:	490a      	ldr	r1, [pc, #40]	; (80010a0 <OV5640_RGB565_Mode+0x44>)
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	440b      	add	r3, r1
 800107c:	885b      	ldrh	r3, [r3, #2]
 800107e:	b2db      	uxtb	r3, r3
 8001080:	4619      	mov	r1, r3
 8001082:	4610      	mov	r0, r2
 8001084:	f7ff ff04 	bl	8000e90 <OV5640_WR_Reg>
	for(i=0;i<(sizeof(ov5640_rgb565_reg_tbl)/4);i++)
 8001088:	88fb      	ldrh	r3, [r7, #6]
 800108a:	3301      	adds	r3, #1
 800108c:	80fb      	strh	r3, [r7, #6]
 800108e:	88fb      	ldrh	r3, [r7, #6]
 8001090:	2b2c      	cmp	r3, #44	; 0x2c
 8001092:	d9eb      	bls.n	800106c <OV5640_RGB565_Mode+0x10>
	}
}
 8001094:	bf00      	nop
 8001096:	bf00      	nop
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	0800867c 	.word	0x0800867c

080010a4 <OV5640_Light_Mode>:
//      1: sunny
//      2: office
//      3: cloudy
//      4: home
void OV5640_Light_Mode(uint8_t mode)
{
 80010a4:	b590      	push	{r4, r7, lr}
 80010a6:	b085      	sub	sp, #20
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	4603      	mov	r3, r0
 80010ac:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	OV5640_WR_Reg(0x3212,0x03);	//start group 3
 80010ae:	2103      	movs	r1, #3
 80010b0:	f243 2012 	movw	r0, #12818	; 0x3212
 80010b4:	f7ff feec 	bl	8000e90 <OV5640_WR_Reg>
	for(i=0;i<7;i++)OV5640_WR_Reg(0x3400+i,OV5640_LIGHTMODE_TBL[mode][i]);
 80010b8:	2300      	movs	r3, #0
 80010ba:	73fb      	strb	r3, [r7, #15]
 80010bc:	e013      	b.n	80010e6 <OV5640_Light_Mode+0x42>
 80010be:	7bfb      	ldrb	r3, [r7, #15]
 80010c0:	b29b      	uxth	r3, r3
 80010c2:	f503 5350 	add.w	r3, r3, #13312	; 0x3400
 80010c6:	b298      	uxth	r0, r3
 80010c8:	79fa      	ldrb	r2, [r7, #7]
 80010ca:	7bf9      	ldrb	r1, [r7, #15]
 80010cc:	4c0e      	ldr	r4, [pc, #56]	; (8001108 <OV5640_Light_Mode+0x64>)
 80010ce:	4613      	mov	r3, r2
 80010d0:	00db      	lsls	r3, r3, #3
 80010d2:	1a9b      	subs	r3, r3, r2
 80010d4:	4423      	add	r3, r4
 80010d6:	440b      	add	r3, r1
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	4619      	mov	r1, r3
 80010dc:	f7ff fed8 	bl	8000e90 <OV5640_WR_Reg>
 80010e0:	7bfb      	ldrb	r3, [r7, #15]
 80010e2:	3301      	adds	r3, #1
 80010e4:	73fb      	strb	r3, [r7, #15]
 80010e6:	7bfb      	ldrb	r3, [r7, #15]
 80010e8:	2b06      	cmp	r3, #6
 80010ea:	d9e8      	bls.n	80010be <OV5640_Light_Mode+0x1a>
	OV5640_WR_Reg(0x3212,0x13); //end group 3
 80010ec:	2113      	movs	r1, #19
 80010ee:	f243 2012 	movw	r0, #12818	; 0x3212
 80010f2:	f7ff fecd 	bl	8000e90 <OV5640_WR_Reg>
	OV5640_WR_Reg(0x3212,0xa3); //launch group 3
 80010f6:	21a3      	movs	r1, #163	; 0xa3
 80010f8:	f243 2012 	movw	r0, #12818	; 0x3212
 80010fc:	f7ff fec8 	bl	8000e90 <OV5640_WR_Reg>
}
 8001100:	bf00      	nop
 8001102:	3714      	adds	r7, #20
 8001104:	46bd      	mov	sp, r7
 8001106:	bd90      	pop	{r4, r7, pc}
 8001108:	08008a84 	.word	0x08008a84

0800110c <OV5640_Color_Saturation>:


// Color Saturation:
//   sat:  0 - 6
void OV5640_Color_Saturation(uint8_t sat)
{
 800110c:	b590      	push	{r4, r7, lr}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	OV5640_WR_Reg(0x3212,0x03);	//start group 3
 8001116:	2103      	movs	r1, #3
 8001118:	f243 2012 	movw	r0, #12818	; 0x3212
 800111c:	f7ff feb8 	bl	8000e90 <OV5640_WR_Reg>
	OV5640_WR_Reg(0x5381,0x1c);
 8001120:	211c      	movs	r1, #28
 8001122:	f245 3081 	movw	r0, #21377	; 0x5381
 8001126:	f7ff feb3 	bl	8000e90 <OV5640_WR_Reg>
	OV5640_WR_Reg(0x5382,0x5a);
 800112a:	215a      	movs	r1, #90	; 0x5a
 800112c:	f245 3082 	movw	r0, #21378	; 0x5382
 8001130:	f7ff feae 	bl	8000e90 <OV5640_WR_Reg>
	OV5640_WR_Reg(0x5383,0x06);
 8001134:	2106      	movs	r1, #6
 8001136:	f245 3083 	movw	r0, #21379	; 0x5383
 800113a:	f7ff fea9 	bl	8000e90 <OV5640_WR_Reg>
	for(i=0;i<6;i++)  OV5640_WR_Reg(0x5384+i,OV5640_SATURATION_TBL[sat][i]);
 800113e:	2300      	movs	r3, #0
 8001140:	73fb      	strb	r3, [r7, #15]
 8001142:	e015      	b.n	8001170 <OV5640_Color_Saturation+0x64>
 8001144:	7bfb      	ldrb	r3, [r7, #15]
 8001146:	b29b      	uxth	r3, r3
 8001148:	f503 43a7 	add.w	r3, r3, #21376	; 0x5380
 800114c:	3304      	adds	r3, #4
 800114e:	b298      	uxth	r0, r3
 8001150:	79fa      	ldrb	r2, [r7, #7]
 8001152:	7bf9      	ldrb	r1, [r7, #15]
 8001154:	4c14      	ldr	r4, [pc, #80]	; (80011a8 <OV5640_Color_Saturation+0x9c>)
 8001156:	4613      	mov	r3, r2
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	4413      	add	r3, r2
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	4423      	add	r3, r4
 8001160:	440b      	add	r3, r1
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	4619      	mov	r1, r3
 8001166:	f7ff fe93 	bl	8000e90 <OV5640_WR_Reg>
 800116a:	7bfb      	ldrb	r3, [r7, #15]
 800116c:	3301      	adds	r3, #1
 800116e:	73fb      	strb	r3, [r7, #15]
 8001170:	7bfb      	ldrb	r3, [r7, #15]
 8001172:	2b05      	cmp	r3, #5
 8001174:	d9e6      	bls.n	8001144 <OV5640_Color_Saturation+0x38>
	OV5640_WR_Reg(0x538b, 0x98);
 8001176:	2198      	movs	r1, #152	; 0x98
 8001178:	f245 308b 	movw	r0, #21387	; 0x538b
 800117c:	f7ff fe88 	bl	8000e90 <OV5640_WR_Reg>
	OV5640_WR_Reg(0x538a, 0x01);
 8001180:	2101      	movs	r1, #1
 8001182:	f245 308a 	movw	r0, #21386	; 0x538a
 8001186:	f7ff fe83 	bl	8000e90 <OV5640_WR_Reg>
	OV5640_WR_Reg(0x3212, 0x13); //end group 3
 800118a:	2113      	movs	r1, #19
 800118c:	f243 2012 	movw	r0, #12818	; 0x3212
 8001190:	f7ff fe7e 	bl	8000e90 <OV5640_WR_Reg>
	OV5640_WR_Reg(0x3212, 0xa3); //launch group 3
 8001194:	21a3      	movs	r1, #163	; 0xa3
 8001196:	f243 2012 	movw	r0, #12818	; 0x3212
 800119a:	f7ff fe79 	bl	8000e90 <OV5640_WR_Reg>
}
 800119e:	bf00      	nop
 80011a0:	3714      	adds	r7, #20
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd90      	pop	{r4, r7, pc}
 80011a6:	bf00      	nop
 80011a8:	08008aa8 	.word	0x08008aa8

080011ac <OV5640_Brightness>:

//Brightness
//     bright:  0 - 8
void OV5640_Brightness(uint8_t bright)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	71fb      	strb	r3, [r7, #7]
	uint8_t brtval;
	if(bright<4)brtval=4-bright;
 80011b6:	79fb      	ldrb	r3, [r7, #7]
 80011b8:	2b03      	cmp	r3, #3
 80011ba:	d804      	bhi.n	80011c6 <OV5640_Brightness+0x1a>
 80011bc:	79fb      	ldrb	r3, [r7, #7]
 80011be:	f1c3 0304 	rsb	r3, r3, #4
 80011c2:	73fb      	strb	r3, [r7, #15]
 80011c4:	e002      	b.n	80011cc <OV5640_Brightness+0x20>
	else brtval=bright-4;
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	3b04      	subs	r3, #4
 80011ca:	73fb      	strb	r3, [r7, #15]
	OV5640_WR_Reg(0x3212,0x03);	//start group 3
 80011cc:	2103      	movs	r1, #3
 80011ce:	f243 2012 	movw	r0, #12818	; 0x3212
 80011d2:	f7ff fe5d 	bl	8000e90 <OV5640_WR_Reg>
	OV5640_WR_Reg(0x5587,brtval<<4);
 80011d6:	7bfb      	ldrb	r3, [r7, #15]
 80011d8:	011b      	lsls	r3, r3, #4
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	4619      	mov	r1, r3
 80011de:	f245 5087 	movw	r0, #21895	; 0x5587
 80011e2:	f7ff fe55 	bl	8000e90 <OV5640_WR_Reg>
	if(bright<4)OV5640_WR_Reg(0x5588,0x09);
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	2b03      	cmp	r3, #3
 80011ea:	d805      	bhi.n	80011f8 <OV5640_Brightness+0x4c>
 80011ec:	2109      	movs	r1, #9
 80011ee:	f245 5088 	movw	r0, #21896	; 0x5588
 80011f2:	f7ff fe4d 	bl	8000e90 <OV5640_WR_Reg>
 80011f6:	e004      	b.n	8001202 <OV5640_Brightness+0x56>
	else OV5640_WR_Reg(0x5588,0x01);
 80011f8:	2101      	movs	r1, #1
 80011fa:	f245 5088 	movw	r0, #21896	; 0x5588
 80011fe:	f7ff fe47 	bl	8000e90 <OV5640_WR_Reg>
	OV5640_WR_Reg(0x3212,0x13); //end group 3
 8001202:	2113      	movs	r1, #19
 8001204:	f243 2012 	movw	r0, #12818	; 0x3212
 8001208:	f7ff fe42 	bl	8000e90 <OV5640_WR_Reg>
	OV5640_WR_Reg(0x3212,0xa3); //launch group 3
 800120c:	21a3      	movs	r1, #163	; 0xa3
 800120e:	f243 2012 	movw	r0, #12818	; 0x3212
 8001212:	f7ff fe3d 	bl	8000e90 <OV5640_WR_Reg>
}
 8001216:	bf00      	nop
 8001218:	3710      	adds	r7, #16
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
	...

08001220 <OV5640_Contrast>:

//Contrast:
//     contrast:  0 - 6
void OV5640_Contrast(uint8_t contrast)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	4603      	mov	r3, r0
 8001228:	71fb      	strb	r3, [r7, #7]
	uint8_t reg0val=0X00;
 800122a:	2300      	movs	r3, #0
 800122c:	73fb      	strb	r3, [r7, #15]
	uint8_t reg1val=0X20;
 800122e:	2320      	movs	r3, #32
 8001230:	73bb      	strb	r3, [r7, #14]
	switch(contrast)
 8001232:	79fb      	ldrb	r3, [r7, #7]
 8001234:	2b06      	cmp	r3, #6
 8001236:	d82f      	bhi.n	8001298 <OV5640_Contrast+0x78>
 8001238:	a201      	add	r2, pc, #4	; (adr r2, 8001240 <OV5640_Contrast+0x20>)
 800123a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800123e:	bf00      	nop
 8001240:	0800125d 	.word	0x0800125d
 8001244:	08001267 	.word	0x08001267
 8001248:	08001271 	.word	0x08001271
 800124c:	08001299 	.word	0x08001299
 8001250:	0800127b 	.word	0x0800127b
 8001254:	08001285 	.word	0x08001285
 8001258:	0800128f 	.word	0x0800128f
	{
		case 0://-3
			reg1val=reg0val=0X14;
 800125c:	2314      	movs	r3, #20
 800125e:	73fb      	strb	r3, [r7, #15]
 8001260:	7bfb      	ldrb	r3, [r7, #15]
 8001262:	73bb      	strb	r3, [r7, #14]
			break;
 8001264:	e018      	b.n	8001298 <OV5640_Contrast+0x78>
		case 1://-2
			reg1val=reg0val=0X18;
 8001266:	2318      	movs	r3, #24
 8001268:	73fb      	strb	r3, [r7, #15]
 800126a:	7bfb      	ldrb	r3, [r7, #15]
 800126c:	73bb      	strb	r3, [r7, #14]
			break;
 800126e:	e013      	b.n	8001298 <OV5640_Contrast+0x78>
		case 2://-1
			reg1val=reg0val=0X1C;
 8001270:	231c      	movs	r3, #28
 8001272:	73fb      	strb	r3, [r7, #15]
 8001274:	7bfb      	ldrb	r3, [r7, #15]
 8001276:	73bb      	strb	r3, [r7, #14]
			break;
 8001278:	e00e      	b.n	8001298 <OV5640_Contrast+0x78>
		case 4://1
			reg0val=0X10;
 800127a:	2310      	movs	r3, #16
 800127c:	73fb      	strb	r3, [r7, #15]
			reg1val=0X24;
 800127e:	2324      	movs	r3, #36	; 0x24
 8001280:	73bb      	strb	r3, [r7, #14]
			break;
 8001282:	e009      	b.n	8001298 <OV5640_Contrast+0x78>
		case 5://2
			reg0val=0X18;
 8001284:	2318      	movs	r3, #24
 8001286:	73fb      	strb	r3, [r7, #15]
			reg1val=0X28;
 8001288:	2328      	movs	r3, #40	; 0x28
 800128a:	73bb      	strb	r3, [r7, #14]
			break;
 800128c:	e004      	b.n	8001298 <OV5640_Contrast+0x78>
		case 6://3
			reg0val=0X1C;
 800128e:	231c      	movs	r3, #28
 8001290:	73fb      	strb	r3, [r7, #15]
			reg1val=0X2C;
 8001292:	232c      	movs	r3, #44	; 0x2c
 8001294:	73bb      	strb	r3, [r7, #14]
			break;
 8001296:	bf00      	nop
	}
	OV5640_WR_Reg(0x3212,0x03); //start group 3
 8001298:	2103      	movs	r1, #3
 800129a:	f243 2012 	movw	r0, #12818	; 0x3212
 800129e:	f7ff fdf7 	bl	8000e90 <OV5640_WR_Reg>
	OV5640_WR_Reg(0x5585,reg0val);
 80012a2:	7bfb      	ldrb	r3, [r7, #15]
 80012a4:	4619      	mov	r1, r3
 80012a6:	f245 5085 	movw	r0, #21893	; 0x5585
 80012aa:	f7ff fdf1 	bl	8000e90 <OV5640_WR_Reg>
	OV5640_WR_Reg(0x5586,reg1val);
 80012ae:	7bbb      	ldrb	r3, [r7, #14]
 80012b0:	4619      	mov	r1, r3
 80012b2:	f245 5086 	movw	r0, #21894	; 0x5586
 80012b6:	f7ff fdeb 	bl	8000e90 <OV5640_WR_Reg>
	OV5640_WR_Reg(0x3212,0x13); //end group 3
 80012ba:	2113      	movs	r1, #19
 80012bc:	f243 2012 	movw	r0, #12818	; 0x3212
 80012c0:	f7ff fde6 	bl	8000e90 <OV5640_WR_Reg>
	OV5640_WR_Reg(0x3212,0xa3); //launch group 3
 80012c4:	21a3      	movs	r1, #163	; 0xa3
 80012c6:	f243 2012 	movw	r0, #12818	; 0x3212
 80012ca:	f7ff fde1 	bl	8000e90 <OV5640_WR_Reg>
}
 80012ce:	bf00      	nop
 80012d0:	3710      	adds	r7, #16
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop

080012d8 <OV5640_Sharpness>:
// Sharpness:
//    sharp: 0 - 33   (0: close , 33: auto , other: Sharpness)

void OV5640_Sharpness(uint8_t sharp)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4603      	mov	r3, r0
 80012e0:	71fb      	strb	r3, [r7, #7]
	if(sharp<33)
 80012e2:	79fb      	ldrb	r3, [r7, #7]
 80012e4:	2b20      	cmp	r3, #32
 80012e6:	d80b      	bhi.n	8001300 <OV5640_Sharpness+0x28>
	{
		OV5640_WR_Reg(0x5308,0x65);
 80012e8:	2165      	movs	r1, #101	; 0x65
 80012ea:	f245 3008 	movw	r0, #21256	; 0x5308
 80012ee:	f7ff fdcf 	bl	8000e90 <OV5640_WR_Reg>
		OV5640_WR_Reg(0x5302,sharp);
 80012f2:	79fb      	ldrb	r3, [r7, #7]
 80012f4:	4619      	mov	r1, r3
 80012f6:	f245 3002 	movw	r0, #21250	; 0x5302
 80012fa:	f7ff fdc9 	bl	8000e90 <OV5640_WR_Reg>
		OV5640_WR_Reg(0x530a,0x30);
		OV5640_WR_Reg(0x530b,0x04);
		OV5640_WR_Reg(0x530c,0x06);
	}

}
 80012fe:	e02c      	b.n	800135a <OV5640_Sharpness+0x82>
		OV5640_WR_Reg(0x5308,0x25);
 8001300:	2125      	movs	r1, #37	; 0x25
 8001302:	f245 3008 	movw	r0, #21256	; 0x5308
 8001306:	f7ff fdc3 	bl	8000e90 <OV5640_WR_Reg>
		OV5640_WR_Reg(0x5300,0x08);
 800130a:	2108      	movs	r1, #8
 800130c:	f44f 40a6 	mov.w	r0, #21248	; 0x5300
 8001310:	f7ff fdbe 	bl	8000e90 <OV5640_WR_Reg>
		OV5640_WR_Reg(0x5301,0x30);
 8001314:	2130      	movs	r1, #48	; 0x30
 8001316:	f245 3001 	movw	r0, #21249	; 0x5301
 800131a:	f7ff fdb9 	bl	8000e90 <OV5640_WR_Reg>
		OV5640_WR_Reg(0x5302,0x10);
 800131e:	2110      	movs	r1, #16
 8001320:	f245 3002 	movw	r0, #21250	; 0x5302
 8001324:	f7ff fdb4 	bl	8000e90 <OV5640_WR_Reg>
		OV5640_WR_Reg(0x5303,0x00);
 8001328:	2100      	movs	r1, #0
 800132a:	f245 3003 	movw	r0, #21251	; 0x5303
 800132e:	f7ff fdaf 	bl	8000e90 <OV5640_WR_Reg>
		OV5640_WR_Reg(0x5309,0x08);
 8001332:	2108      	movs	r1, #8
 8001334:	f245 3009 	movw	r0, #21257	; 0x5309
 8001338:	f7ff fdaa 	bl	8000e90 <OV5640_WR_Reg>
		OV5640_WR_Reg(0x530a,0x30);
 800133c:	2130      	movs	r1, #48	; 0x30
 800133e:	f245 300a 	movw	r0, #21258	; 0x530a
 8001342:	f7ff fda5 	bl	8000e90 <OV5640_WR_Reg>
		OV5640_WR_Reg(0x530b,0x04);
 8001346:	2104      	movs	r1, #4
 8001348:	f245 300b 	movw	r0, #21259	; 0x530b
 800134c:	f7ff fda0 	bl	8000e90 <OV5640_WR_Reg>
		OV5640_WR_Reg(0x530c,0x06);
 8001350:	2106      	movs	r1, #6
 8001352:	f245 300c 	movw	r0, #21260	; 0x530c
 8001356:	f7ff fd9b 	bl	8000e90 <OV5640_WR_Reg>
}
 800135a:	bf00      	nop
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <OV5640_OutSize_Set>:
	else OV5640_WR_Reg(0X3019,0X00);
}

// set the output size
uint8_t OV5640_OutSize_Set(uint16_t offx,uint16_t offy,uint16_t width,uint16_t height)
{
 8001362:	b590      	push	{r4, r7, lr}
 8001364:	b083      	sub	sp, #12
 8001366:	af00      	add	r7, sp, #0
 8001368:	4604      	mov	r4, r0
 800136a:	4608      	mov	r0, r1
 800136c:	4611      	mov	r1, r2
 800136e:	461a      	mov	r2, r3
 8001370:	4623      	mov	r3, r4
 8001372:	80fb      	strh	r3, [r7, #6]
 8001374:	4603      	mov	r3, r0
 8001376:	80bb      	strh	r3, [r7, #4]
 8001378:	460b      	mov	r3, r1
 800137a:	807b      	strh	r3, [r7, #2]
 800137c:	4613      	mov	r3, r2
 800137e:	803b      	strh	r3, [r7, #0]
        OV5640_WR_Reg(0X3212,0X03);
 8001380:	2103      	movs	r1, #3
 8001382:	f243 2012 	movw	r0, #12818	; 0x3212
 8001386:	f7ff fd83 	bl	8000e90 <OV5640_WR_Reg>

        OV5640_WR_Reg(0x3808,width>>8);
 800138a:	887b      	ldrh	r3, [r7, #2]
 800138c:	0a1b      	lsrs	r3, r3, #8
 800138e:	b29b      	uxth	r3, r3
 8001390:	b2db      	uxtb	r3, r3
 8001392:	4619      	mov	r1, r3
 8001394:	f643 0008 	movw	r0, #14344	; 0x3808
 8001398:	f7ff fd7a 	bl	8000e90 <OV5640_WR_Reg>
        OV5640_WR_Reg(0x3809,width&0xff);
 800139c:	887b      	ldrh	r3, [r7, #2]
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	4619      	mov	r1, r3
 80013a2:	f643 0009 	movw	r0, #14345	; 0x3809
 80013a6:	f7ff fd73 	bl	8000e90 <OV5640_WR_Reg>
        OV5640_WR_Reg(0x380a,height>>8);
 80013aa:	883b      	ldrh	r3, [r7, #0]
 80013ac:	0a1b      	lsrs	r3, r3, #8
 80013ae:	b29b      	uxth	r3, r3
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	4619      	mov	r1, r3
 80013b4:	f643 000a 	movw	r0, #14346	; 0x380a
 80013b8:	f7ff fd6a 	bl	8000e90 <OV5640_WR_Reg>
        OV5640_WR_Reg(0x380b,height&0xff);
 80013bc:	883b      	ldrh	r3, [r7, #0]
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	4619      	mov	r1, r3
 80013c2:	f643 000b 	movw	r0, #14347	; 0x380b
 80013c6:	f7ff fd63 	bl	8000e90 <OV5640_WR_Reg>

        OV5640_WR_Reg(0x3810,offx>>8);
 80013ca:	88fb      	ldrh	r3, [r7, #6]
 80013cc:	0a1b      	lsrs	r3, r3, #8
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	4619      	mov	r1, r3
 80013d4:	f643 0010 	movw	r0, #14352	; 0x3810
 80013d8:	f7ff fd5a 	bl	8000e90 <OV5640_WR_Reg>
        OV5640_WR_Reg(0x3811,offx&0xff);
 80013dc:	88fb      	ldrh	r3, [r7, #6]
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	4619      	mov	r1, r3
 80013e2:	f643 0011 	movw	r0, #14353	; 0x3811
 80013e6:	f7ff fd53 	bl	8000e90 <OV5640_WR_Reg>

        OV5640_WR_Reg(0x3812,offy>>8);
 80013ea:	88bb      	ldrh	r3, [r7, #4]
 80013ec:	0a1b      	lsrs	r3, r3, #8
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	4619      	mov	r1, r3
 80013f4:	f643 0012 	movw	r0, #14354	; 0x3812
 80013f8:	f7ff fd4a 	bl	8000e90 <OV5640_WR_Reg>
        OV5640_WR_Reg(0x3813,offy&0xff);
 80013fc:	88bb      	ldrh	r3, [r7, #4]
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	4619      	mov	r1, r3
 8001402:	f643 0013 	movw	r0, #14355	; 0x3813
 8001406:	f7ff fd43 	bl	8000e90 <OV5640_WR_Reg>

        OV5640_WR_Reg(0X3212,0X13);
 800140a:	2113      	movs	r1, #19
 800140c:	f243 2012 	movw	r0, #12818	; 0x3212
 8001410:	f7ff fd3e 	bl	8000e90 <OV5640_WR_Reg>
        OV5640_WR_Reg(0X3212,0Xa3);
 8001414:	21a3      	movs	r1, #163	; 0xa3
 8001416:	f243 2012 	movw	r0, #12818	; 0x3212
 800141a:	f7ff fd39 	bl	8000e90 <OV5640_WR_Reg>

        return 0;
 800141e:	2300      	movs	r3, #0
}
 8001420:	4618      	mov	r0, r3
 8001422:	370c      	adds	r7, #12
 8001424:	46bd      	mov	sp, r7
 8001426:	bd90      	pop	{r4, r7, pc}

08001428 <jpeg_test>:
	return 0;
}


void jpeg_test(uint8_t jpg_size)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	71fb      	strb	r3, [r7, #7]
        HAL_DCMI_Stop(&hdcmi);
 8001432:	4836      	ldr	r0, [pc, #216]	; (800150c <jpeg_test+0xe4>)
 8001434:	f000 fffe 	bl	8002434 <HAL_DCMI_Stop>

 	OV5640_JPEG_Mode();
 8001438:	f7ff fdec 	bl	8001014 <OV5640_JPEG_Mode>
 	OV5640_OutSize_Set(4, 0, jpeg_size_tbl[jpg_size][0],jpeg_size_tbl[jpg_size][1]);
 800143c:	79fb      	ldrb	r3, [r7, #7]
 800143e:	4a34      	ldr	r2, [pc, #208]	; (8001510 <jpeg_test+0xe8>)
 8001440:	f832 2023 	ldrh.w	r2, [r2, r3, lsl #2]
 8001444:	79fb      	ldrb	r3, [r7, #7]
 8001446:	4932      	ldr	r1, [pc, #200]	; (8001510 <jpeg_test+0xe8>)
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	440b      	add	r3, r1
 800144c:	885b      	ldrh	r3, [r3, #2]
 800144e:	2100      	movs	r1, #0
 8001450:	2004      	movs	r0, #4
 8001452:	f7ff ff86 	bl	8001362 <OV5640_OutSize_Set>

        OV5640_WR_Reg(0x3035,0X41); // slow down OV5640 clocks
 8001456:	2141      	movs	r1, #65	; 0x41
 8001458:	f243 0035 	movw	r0, #12341	; 0x3035
 800145c:	f7ff fd18 	bl	8000e90 <OV5640_WR_Reg>
        OV5640_WR_Reg(0x3036,0x68);
 8001460:	2168      	movs	r1, #104	; 0x68
 8001462:	f243 0036 	movw	r0, #12342	; 0x3036
 8001466:	f7ff fd13 	bl	8000e90 <OV5640_WR_Reg>

        /* DCMI DMA DeInit */
        HAL_DMA_DeInit(&hdma_dcmi);
 800146a:	482a      	ldr	r0, [pc, #168]	; (8001514 <jpeg_test+0xec>)
 800146c:	f001 faa2 	bl	80029b4 <HAL_DMA_DeInit>

        /* DCMI DMA Init */
        /* DCMI Init */
        hdma_dcmi.Instance = DMA2_Stream1;
 8001470:	4b28      	ldr	r3, [pc, #160]	; (8001514 <jpeg_test+0xec>)
 8001472:	4a29      	ldr	r2, [pc, #164]	; (8001518 <jpeg_test+0xf0>)
 8001474:	601a      	str	r2, [r3, #0]
        hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 8001476:	4b27      	ldr	r3, [pc, #156]	; (8001514 <jpeg_test+0xec>)
 8001478:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800147c:	605a      	str	r2, [r3, #4]
        hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800147e:	4b25      	ldr	r3, [pc, #148]	; (8001514 <jpeg_test+0xec>)
 8001480:	2200      	movs	r2, #0
 8001482:	609a      	str	r2, [r3, #8]
        hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8001484:	4b23      	ldr	r3, [pc, #140]	; (8001514 <jpeg_test+0xec>)
 8001486:	2200      	movs	r2, #0
 8001488:	60da      	str	r2, [r3, #12]
        hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 800148a:	4b22      	ldr	r3, [pc, #136]	; (8001514 <jpeg_test+0xec>)
 800148c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001490:	611a      	str	r2, [r3, #16]
        hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001492:	4b20      	ldr	r3, [pc, #128]	; (8001514 <jpeg_test+0xec>)
 8001494:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001498:	615a      	str	r2, [r3, #20]
        hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800149a:	4b1e      	ldr	r3, [pc, #120]	; (8001514 <jpeg_test+0xec>)
 800149c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014a0:	619a      	str	r2, [r3, #24]
        hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 80014a2:	4b1c      	ldr	r3, [pc, #112]	; (8001514 <jpeg_test+0xec>)
 80014a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014a8:	61da      	str	r2, [r3, #28]
        hdma_dcmi.Init.Priority = DMA_PRIORITY_HIGH;
 80014aa:	4b1a      	ldr	r3, [pc, #104]	; (8001514 <jpeg_test+0xec>)
 80014ac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80014b0:	621a      	str	r2, [r3, #32]
        hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80014b2:	4b18      	ldr	r3, [pc, #96]	; (8001514 <jpeg_test+0xec>)
 80014b4:	2204      	movs	r2, #4
 80014b6:	625a      	str	r2, [r3, #36]	; 0x24
        hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80014b8:	4b16      	ldr	r3, [pc, #88]	; (8001514 <jpeg_test+0xec>)
 80014ba:	2203      	movs	r2, #3
 80014bc:	629a      	str	r2, [r3, #40]	; 0x28
        hdma_dcmi.Init.MemBurst = DMA_MBURST_SINGLE;
 80014be:	4b15      	ldr	r3, [pc, #84]	; (8001514 <jpeg_test+0xec>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	62da      	str	r2, [r3, #44]	; 0x2c
        hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80014c4:	4b13      	ldr	r3, [pc, #76]	; (8001514 <jpeg_test+0xec>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	631a      	str	r2, [r3, #48]	; 0x30
        if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 80014ca:	4812      	ldr	r0, [pc, #72]	; (8001514 <jpeg_test+0xec>)
 80014cc:	f001 f9c4 	bl	8002858 <HAL_DMA_Init>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <jpeg_test+0xb2>
        {
        	Error_Handler();
 80014d6:	f7ff fccd 	bl	8000e74 <Error_Handler>
        }

        __HAL_LINKDMA(&hdcmi,DMA_Handle,hdma_dcmi);
 80014da:	4b0c      	ldr	r3, [pc, #48]	; (800150c <jpeg_test+0xe4>)
 80014dc:	4a0d      	ldr	r2, [pc, #52]	; (8001514 <jpeg_test+0xec>)
 80014de:	639a      	str	r2, [r3, #56]	; 0x38
 80014e0:	4b0c      	ldr	r3, [pc, #48]	; (8001514 <jpeg_test+0xec>)
 80014e2:	4a0a      	ldr	r2, [pc, #40]	; (800150c <jpeg_test+0xe4>)
 80014e4:	639a      	str	r2, [r3, #56]	; 0x38

        __HAL_DCMI_ENABLE_IT(&hdcmi,DCMI_IT_FRAME);
 80014e6:	4b09      	ldr	r3, [pc, #36]	; (800150c <jpeg_test+0xe4>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	68da      	ldr	r2, [r3, #12]
 80014ec:	4b07      	ldr	r3, [pc, #28]	; (800150c <jpeg_test+0xe4>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f042 0201 	orr.w	r2, r2, #1
 80014f4:	60da      	str	r2, [r3, #12]

        /* Start the Camera capture */
        HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_CONTINUOUS, (uint32_t)jpeg_data_buf, jpeg_buf_size/4 );
 80014f6:	4a09      	ldr	r2, [pc, #36]	; (800151c <jpeg_test+0xf4>)
 80014f8:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80014fc:	2100      	movs	r1, #0
 80014fe:	4803      	ldr	r0, [pc, #12]	; (800150c <jpeg_test+0xe4>)
 8001500:	f000 fef8 	bl	80022f4 <HAL_DCMI_Start_DMA>
        jpeg_mode = 1;
 8001504:	4b06      	ldr	r3, [pc, #24]	; (8001520 <jpeg_test+0xf8>)
 8001506:	2201      	movs	r2, #1
 8001508:	701a      	strb	r2, [r3, #0]

        while(1)
 800150a:	e7fe      	b.n	800150a <jpeg_test+0xe2>
 800150c:	200000a8 	.word	0x200000a8
 8001510:	08008a6c 	.word	0x08008a6c
 8001514:	200000e8 	.word	0x200000e8
 8001518:	40026428 	.word	0x40026428
 800151c:	2000078c 	.word	0x2000078c
 8001520:	20000788 	.word	0x20000788

08001524 <jpeg_dcmi_frame_callback>:

        }
}

void jpeg_dcmi_frame_callback(DMA_HandleTypeDef *_hdma)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b088      	sub	sp, #32
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
        uint8_t *p;
        uint32_t i=0,jpgstart=0,jpglen=0;
 800152c:	2300      	movs	r3, #0
 800152e:	61fb      	str	r3, [r7, #28]
 8001530:	2300      	movs	r3, #0
 8001532:	61bb      	str	r3, [r7, #24]
 8001534:	2300      	movs	r3, #0
 8001536:	617b      	str	r3, [r7, #20]
        uint8_t  head=0;
 8001538:	2300      	movs	r3, #0
 800153a:	74fb      	strb	r3, [r7, #19]



        HAL_DCMI_Stop(&hdcmi);
 800153c:	4827      	ldr	r0, [pc, #156]	; (80015dc <jpeg_dcmi_frame_callback+0xb8>)
 800153e:	f000 ff79 	bl	8002434 <HAL_DCMI_Stop>

        p=(uint8_t*)jpeg_data_buf;
 8001542:	4b27      	ldr	r3, [pc, #156]	; (80015e0 <jpeg_dcmi_frame_callback+0xbc>)
 8001544:	60fb      	str	r3, [r7, #12]

        for(i=0;i<jpeg_buf_size * 4; i++) //search for 0XFF 0XD8 and 0XFF 0XD9, get size of JPG
 8001546:	2300      	movs	r3, #0
 8001548:	61fb      	str	r3, [r7, #28]
 800154a:	e029      	b.n	80015a0 <jpeg_dcmi_frame_callback+0x7c>
        {
                if((p[i]==0XFF)&&(p[i+1]==0XD8))
 800154c:	68fa      	ldr	r2, [r7, #12]
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	4413      	add	r3, r2
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	2bff      	cmp	r3, #255	; 0xff
 8001556:	d10a      	bne.n	800156e <jpeg_dcmi_frame_callback+0x4a>
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	3301      	adds	r3, #1
 800155c:	68fa      	ldr	r2, [r7, #12]
 800155e:	4413      	add	r3, r2
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	2bd8      	cmp	r3, #216	; 0xd8
 8001564:	d103      	bne.n	800156e <jpeg_dcmi_frame_callback+0x4a>
                {
                        jpgstart=i;
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	61bb      	str	r3, [r7, #24]
                        head=1;	// Already found  FF D8
 800156a:	2301      	movs	r3, #1
 800156c:	74fb      	strb	r3, [r7, #19]
                }
                if((p[i]==0XFF)&&(p[i+1]==0XD9)&&head)  //search for FF D9
 800156e:	68fa      	ldr	r2, [r7, #12]
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	4413      	add	r3, r2
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	2bff      	cmp	r3, #255	; 0xff
 8001578:	d10f      	bne.n	800159a <jpeg_dcmi_frame_callback+0x76>
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	3301      	adds	r3, #1
 800157e:	68fa      	ldr	r2, [r7, #12]
 8001580:	4413      	add	r3, r2
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	2bd9      	cmp	r3, #217	; 0xd9
 8001586:	d108      	bne.n	800159a <jpeg_dcmi_frame_callback+0x76>
 8001588:	7cfb      	ldrb	r3, [r7, #19]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d005      	beq.n	800159a <jpeg_dcmi_frame_callback+0x76>
                {
                        jpglen=i-jpgstart+2;
 800158e:	69fa      	ldr	r2, [r7, #28]
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	3302      	adds	r3, #2
 8001596:	617b      	str	r3, [r7, #20]
                        break;
 8001598:	e006      	b.n	80015a8 <jpeg_dcmi_frame_callback+0x84>
        for(i=0;i<jpeg_buf_size * 4; i++) //search for 0XFF 0XD8 and 0XFF 0XD9, get size of JPG
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	3301      	adds	r3, #1
 800159e:	61fb      	str	r3, [r7, #28]
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	f5b3 3ff8 	cmp.w	r3, #126976	; 0x1f000
 80015a6:	d3d1      	bcc.n	800154c <jpeg_dcmi_frame_callback+0x28>
                }
        }
        if(jpglen)
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d00b      	beq.n	80015c6 <jpeg_dcmi_frame_callback+0xa2>
        {
                p+=jpgstart;	// move to FF D8
 80015ae:	68fa      	ldr	r2, [r7, #12]
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	4413      	add	r3, r2
 80015b4:	60fb      	str	r3, [r7, #12]
                HAL_UART_Transmit(&huart3, p, jpglen, 5000);
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	b29a      	uxth	r2, r3
 80015ba:	f241 3388 	movw	r3, #5000	; 0x1388
 80015be:	68f9      	ldr	r1, [r7, #12]
 80015c0:	4808      	ldr	r0, [pc, #32]	; (80015e4 <jpeg_dcmi_frame_callback+0xc0>)
 80015c2:	f004 fc1b 	bl	8005dfc <HAL_UART_Transmit>

                // printf("jpg_size :  %d \r\n" , jpglen);
                //printf("jpgstart :  %d \r\n" , jpgstart);
        }

        HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_CONTINUOUS, (uint32_t)jpeg_data_buf, jpeg_buf_size/4);
 80015c6:	4a06      	ldr	r2, [pc, #24]	; (80015e0 <jpeg_dcmi_frame_callback+0xbc>)
 80015c8:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80015cc:	2100      	movs	r1, #0
 80015ce:	4803      	ldr	r0, [pc, #12]	; (80015dc <jpeg_dcmi_frame_callback+0xb8>)
 80015d0:	f000 fe90 	bl	80022f4 <HAL_DCMI_Start_DMA>
}
 80015d4:	bf00      	nop
 80015d6:	3720      	adds	r7, #32
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	200000a8 	.word	0x200000a8
 80015e0:	2000078c 	.word	0x2000078c
 80015e4:	2000019c 	.word	0x2000019c

080015e8 <HAL_DCMI_FrameEventCallback>:
  * @brief  Frame Event callback.
  * @param  None
  * @retval None
  */
void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
        if(jpeg_mode == 1)
 80015f0:	4b09      	ldr	r3, [pc, #36]	; (8001618 <HAL_DCMI_FrameEventCallback+0x30>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d102      	bne.n	80015fe <HAL_DCMI_FrameEventCallback+0x16>
        {
					jpeg_dcmi_frame_callback(&hdma_dcmi);
 80015f8:	4808      	ldr	r0, [pc, #32]	; (800161c <HAL_DCMI_FrameEventCallback+0x34>)
 80015fa:	f7ff ff93 	bl	8001524 <jpeg_dcmi_frame_callback>
        }

        __HAL_DCMI_ENABLE_IT(hdcmi,DCMI_IT_FRAME);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	68da      	ldr	r2, [r3, #12]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f042 0201 	orr.w	r2, r2, #1
 800160c:	60da      	str	r2, [r3, #12]
}
 800160e:	bf00      	nop
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	20000788 	.word	0x20000788
 800161c:	200000e8 	.word	0x200000e8

08001620 <delay_6us>:



// Use for STM32F746IGT , HCLK = 200MHz
void delay_6us(void)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
        uint16_t  i;

        for(i=0;i < 250;i++);
 8001626:	2300      	movs	r3, #0
 8001628:	80fb      	strh	r3, [r7, #6]
 800162a:	e002      	b.n	8001632 <delay_6us+0x12>
 800162c:	88fb      	ldrh	r3, [r7, #6]
 800162e:	3301      	adds	r3, #1
 8001630:	80fb      	strh	r3, [r7, #6]
 8001632:	88fb      	ldrh	r3, [r7, #6]
 8001634:	2bf9      	cmp	r3, #249	; 0xf9
 8001636:	d9f9      	bls.n	800162c <delay_6us+0xc>
}
 8001638:	bf00      	nop
 800163a:	bf00      	nop
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr

08001646 <SCCB_Delay>:


void SCCB_Delay(void)
{
 8001646:	b580      	push	{r7, lr}
 8001648:	af00      	add	r7, sp, #0
	delay_6us();
 800164a:	f7ff ffe9 	bl	8001620 <delay_6us>
}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
	...

08001654 <SCCB_Start>:

void SCCB_Start(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
    OV5640_SIOD_H();
 8001658:	2201      	movs	r2, #1
 800165a:	2108      	movs	r1, #8
 800165c:	480b      	ldr	r0, [pc, #44]	; (800168c <SCCB_Start+0x38>)
 800165e:	f003 f8a7 	bl	80047b0 <HAL_GPIO_WritePin>
    OV5640_SIOC_H();
 8001662:	2201      	movs	r2, #1
 8001664:	2120      	movs	r1, #32
 8001666:	4809      	ldr	r0, [pc, #36]	; (800168c <SCCB_Start+0x38>)
 8001668:	f003 f8a2 	bl	80047b0 <HAL_GPIO_WritePin>
    SCCB_Delay();
 800166c:	f7ff ffeb 	bl	8001646 <SCCB_Delay>
    OV5640_SIOD_L();
 8001670:	2200      	movs	r2, #0
 8001672:	2108      	movs	r1, #8
 8001674:	4805      	ldr	r0, [pc, #20]	; (800168c <SCCB_Start+0x38>)
 8001676:	f003 f89b 	bl	80047b0 <HAL_GPIO_WritePin>
    SCCB_Delay();
 800167a:	f7ff ffe4 	bl	8001646 <SCCB_Delay>
    OV5640_SIOC_L();
 800167e:	2200      	movs	r2, #0
 8001680:	2120      	movs	r1, #32
 8001682:	4802      	ldr	r0, [pc, #8]	; (800168c <SCCB_Start+0x38>)
 8001684:	f003 f894 	bl	80047b0 <HAL_GPIO_WritePin>
}
 8001688:	bf00      	nop
 800168a:	bd80      	pop	{r7, pc}
 800168c:	40020400 	.word	0x40020400

08001690 <SCCB_Stop>:

void SCCB_Stop(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
    OV5640_SIOD_L();
 8001694:	2200      	movs	r2, #0
 8001696:	2108      	movs	r1, #8
 8001698:	480a      	ldr	r0, [pc, #40]	; (80016c4 <SCCB_Stop+0x34>)
 800169a:	f003 f889 	bl	80047b0 <HAL_GPIO_WritePin>
    SCCB_Delay();
 800169e:	f7ff ffd2 	bl	8001646 <SCCB_Delay>
    OV5640_SIOC_H();
 80016a2:	2201      	movs	r2, #1
 80016a4:	2120      	movs	r1, #32
 80016a6:	4807      	ldr	r0, [pc, #28]	; (80016c4 <SCCB_Stop+0x34>)
 80016a8:	f003 f882 	bl	80047b0 <HAL_GPIO_WritePin>
    SCCB_Delay();
 80016ac:	f7ff ffcb 	bl	8001646 <SCCB_Delay>
    OV5640_SIOD_H();
 80016b0:	2201      	movs	r2, #1
 80016b2:	2108      	movs	r1, #8
 80016b4:	4803      	ldr	r0, [pc, #12]	; (80016c4 <SCCB_Stop+0x34>)
 80016b6:	f003 f87b 	bl	80047b0 <HAL_GPIO_WritePin>
    SCCB_Delay();
 80016ba:	f7ff ffc4 	bl	8001646 <SCCB_Delay>
}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	40020400 	.word	0x40020400

080016c8 <SCCB_No_Ack>:

void SCCB_No_Ack(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
	SCCB_Delay();
 80016cc:	f7ff ffbb 	bl	8001646 <SCCB_Delay>
	OV5640_SIOD_H();
 80016d0:	2201      	movs	r2, #1
 80016d2:	2108      	movs	r1, #8
 80016d4:	480c      	ldr	r0, [pc, #48]	; (8001708 <SCCB_No_Ack+0x40>)
 80016d6:	f003 f86b 	bl	80047b0 <HAL_GPIO_WritePin>
	OV5640_SIOC_H();
 80016da:	2201      	movs	r2, #1
 80016dc:	2120      	movs	r1, #32
 80016de:	480a      	ldr	r0, [pc, #40]	; (8001708 <SCCB_No_Ack+0x40>)
 80016e0:	f003 f866 	bl	80047b0 <HAL_GPIO_WritePin>
	SCCB_Delay();
 80016e4:	f7ff ffaf 	bl	8001646 <SCCB_Delay>
	OV5640_SIOC_L();
 80016e8:	2200      	movs	r2, #0
 80016ea:	2120      	movs	r1, #32
 80016ec:	4806      	ldr	r0, [pc, #24]	; (8001708 <SCCB_No_Ack+0x40>)
 80016ee:	f003 f85f 	bl	80047b0 <HAL_GPIO_WritePin>
	SCCB_Delay();
 80016f2:	f7ff ffa8 	bl	8001646 <SCCB_Delay>
	OV5640_SIOD_L();
 80016f6:	2200      	movs	r2, #0
 80016f8:	2108      	movs	r1, #8
 80016fa:	4803      	ldr	r0, [pc, #12]	; (8001708 <SCCB_No_Ack+0x40>)
 80016fc:	f003 f858 	bl	80047b0 <HAL_GPIO_WritePin>
	SCCB_Delay();
 8001700:	f7ff ffa1 	bl	8001646 <SCCB_Delay>
}
 8001704:	bf00      	nop
 8001706:	bd80      	pop	{r7, pc}
 8001708:	40020400 	.word	0x40020400

0800170c <SCCB_WR_Byte>:

uint8_t SCCB_WR_Byte(uint8_t dat)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	4603      	mov	r3, r0
 8001714:	71fb      	strb	r3, [r7, #7]
	uint8_t j,res;
	for(j=0;j<8;j++)
 8001716:	2300      	movs	r3, #0
 8001718:	73fb      	strb	r3, [r7, #15]
 800171a:	e022      	b.n	8001762 <SCCB_WR_Byte+0x56>
	{
		if(dat&0x80)OV5640_SIOD_H();
 800171c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001720:	2b00      	cmp	r3, #0
 8001722:	da05      	bge.n	8001730 <SCCB_WR_Byte+0x24>
 8001724:	2201      	movs	r2, #1
 8001726:	2108      	movs	r1, #8
 8001728:	481f      	ldr	r0, [pc, #124]	; (80017a8 <SCCB_WR_Byte+0x9c>)
 800172a:	f003 f841 	bl	80047b0 <HAL_GPIO_WritePin>
 800172e:	e004      	b.n	800173a <SCCB_WR_Byte+0x2e>
		else OV5640_SIOD_L();
 8001730:	2200      	movs	r2, #0
 8001732:	2108      	movs	r1, #8
 8001734:	481c      	ldr	r0, [pc, #112]	; (80017a8 <SCCB_WR_Byte+0x9c>)
 8001736:	f003 f83b 	bl	80047b0 <HAL_GPIO_WritePin>
		dat<<=1;
 800173a:	79fb      	ldrb	r3, [r7, #7]
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	71fb      	strb	r3, [r7, #7]
		SCCB_Delay();
 8001740:	f7ff ff81 	bl	8001646 <SCCB_Delay>
		OV5640_SIOC_H();
 8001744:	2201      	movs	r2, #1
 8001746:	2120      	movs	r1, #32
 8001748:	4817      	ldr	r0, [pc, #92]	; (80017a8 <SCCB_WR_Byte+0x9c>)
 800174a:	f003 f831 	bl	80047b0 <HAL_GPIO_WritePin>
		SCCB_Delay();
 800174e:	f7ff ff7a 	bl	8001646 <SCCB_Delay>
		OV5640_SIOC_L();
 8001752:	2200      	movs	r2, #0
 8001754:	2120      	movs	r1, #32
 8001756:	4814      	ldr	r0, [pc, #80]	; (80017a8 <SCCB_WR_Byte+0x9c>)
 8001758:	f003 f82a 	bl	80047b0 <HAL_GPIO_WritePin>
	for(j=0;j<8;j++)
 800175c:	7bfb      	ldrb	r3, [r7, #15]
 800175e:	3301      	adds	r3, #1
 8001760:	73fb      	strb	r3, [r7, #15]
 8001762:	7bfb      	ldrb	r3, [r7, #15]
 8001764:	2b07      	cmp	r3, #7
 8001766:	d9d9      	bls.n	800171c <SCCB_WR_Byte+0x10>
	}
	SCCB_Delay();
 8001768:	f7ff ff6d 	bl	8001646 <SCCB_Delay>
	OV5640_SIOC_H();
 800176c:	2201      	movs	r2, #1
 800176e:	2120      	movs	r1, #32
 8001770:	480d      	ldr	r0, [pc, #52]	; (80017a8 <SCCB_WR_Byte+0x9c>)
 8001772:	f003 f81d 	bl	80047b0 <HAL_GPIO_WritePin>
	SCCB_Delay();
 8001776:	f7ff ff66 	bl	8001646 <SCCB_Delay>
	if(OV5640_SIOD_READ())res=1;
 800177a:	2108      	movs	r1, #8
 800177c:	480a      	ldr	r0, [pc, #40]	; (80017a8 <SCCB_WR_Byte+0x9c>)
 800177e:	f002 ffff 	bl	8004780 <HAL_GPIO_ReadPin>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d002      	beq.n	800178e <SCCB_WR_Byte+0x82>
 8001788:	2301      	movs	r3, #1
 800178a:	73bb      	strb	r3, [r7, #14]
 800178c:	e001      	b.n	8001792 <SCCB_WR_Byte+0x86>
	else res=0;
 800178e:	2300      	movs	r3, #0
 8001790:	73bb      	strb	r3, [r7, #14]
	OV5640_SIOC_L();
 8001792:	2200      	movs	r2, #0
 8001794:	2120      	movs	r1, #32
 8001796:	4804      	ldr	r0, [pc, #16]	; (80017a8 <SCCB_WR_Byte+0x9c>)
 8001798:	f003 f80a 	bl	80047b0 <HAL_GPIO_WritePin>
	return res;
 800179c:	7bbb      	ldrb	r3, [r7, #14]
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3710      	adds	r7, #16
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	40020400 	.word	0x40020400

080017ac <SCCB_RD_Byte>:

uint8_t SCCB_RD_Byte(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
	uint8_t temp=0,j;
 80017b2:	2300      	movs	r3, #0
 80017b4:	71fb      	strb	r3, [r7, #7]
	for(j=8;j>0;j--)
 80017b6:	2308      	movs	r3, #8
 80017b8:	71bb      	strb	r3, [r7, #6]
 80017ba:	e01d      	b.n	80017f8 <SCCB_RD_Byte+0x4c>
	{
		SCCB_Delay();
 80017bc:	f7ff ff43 	bl	8001646 <SCCB_Delay>
		OV5640_SIOC_H();
 80017c0:	2201      	movs	r2, #1
 80017c2:	2120      	movs	r1, #32
 80017c4:	4810      	ldr	r0, [pc, #64]	; (8001808 <SCCB_RD_Byte+0x5c>)
 80017c6:	f002 fff3 	bl	80047b0 <HAL_GPIO_WritePin>
		temp=temp<<1;
 80017ca:	79fb      	ldrb	r3, [r7, #7]
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	71fb      	strb	r3, [r7, #7]
		if(OV5640_SIOD_READ())temp++;
 80017d0:	2108      	movs	r1, #8
 80017d2:	480d      	ldr	r0, [pc, #52]	; (8001808 <SCCB_RD_Byte+0x5c>)
 80017d4:	f002 ffd4 	bl	8004780 <HAL_GPIO_ReadPin>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d002      	beq.n	80017e4 <SCCB_RD_Byte+0x38>
 80017de:	79fb      	ldrb	r3, [r7, #7]
 80017e0:	3301      	adds	r3, #1
 80017e2:	71fb      	strb	r3, [r7, #7]
		SCCB_Delay();
 80017e4:	f7ff ff2f 	bl	8001646 <SCCB_Delay>
		OV5640_SIOC_L();
 80017e8:	2200      	movs	r2, #0
 80017ea:	2120      	movs	r1, #32
 80017ec:	4806      	ldr	r0, [pc, #24]	; (8001808 <SCCB_RD_Byte+0x5c>)
 80017ee:	f002 ffdf 	bl	80047b0 <HAL_GPIO_WritePin>
	for(j=8;j>0;j--)
 80017f2:	79bb      	ldrb	r3, [r7, #6]
 80017f4:	3b01      	subs	r3, #1
 80017f6:	71bb      	strb	r3, [r7, #6]
 80017f8:	79bb      	ldrb	r3, [r7, #6]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d1de      	bne.n	80017bc <SCCB_RD_Byte+0x10>
	}
	return temp;
 80017fe:	79fb      	ldrb	r3, [r7, #7]
}
 8001800:	4618      	mov	r0, r3
 8001802:	3708      	adds	r7, #8
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	40020400 	.word	0x40020400

0800180c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	607b      	str	r3, [r7, #4]
 8001816:	4b10      	ldr	r3, [pc, #64]	; (8001858 <HAL_MspInit+0x4c>)
 8001818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800181a:	4a0f      	ldr	r2, [pc, #60]	; (8001858 <HAL_MspInit+0x4c>)
 800181c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001820:	6453      	str	r3, [r2, #68]	; 0x44
 8001822:	4b0d      	ldr	r3, [pc, #52]	; (8001858 <HAL_MspInit+0x4c>)
 8001824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001826:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800182a:	607b      	str	r3, [r7, #4]
 800182c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	603b      	str	r3, [r7, #0]
 8001832:	4b09      	ldr	r3, [pc, #36]	; (8001858 <HAL_MspInit+0x4c>)
 8001834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001836:	4a08      	ldr	r2, [pc, #32]	; (8001858 <HAL_MspInit+0x4c>)
 8001838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800183c:	6413      	str	r3, [r2, #64]	; 0x40
 800183e:	4b06      	ldr	r3, [pc, #24]	; (8001858 <HAL_MspInit+0x4c>)
 8001840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001846:	603b      	str	r3, [r7, #0]
 8001848:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800184a:	bf00      	nop
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	40023800 	.word	0x40023800

0800185c <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b08e      	sub	sp, #56	; 0x38
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001864:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	605a      	str	r2, [r3, #4]
 800186e:	609a      	str	r2, [r3, #8]
 8001870:	60da      	str	r2, [r3, #12]
 8001872:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a78      	ldr	r2, [pc, #480]	; (8001a5c <HAL_DCMI_MspInit+0x200>)
 800187a:	4293      	cmp	r3, r2
 800187c:	f040 80e9 	bne.w	8001a52 <HAL_DCMI_MspInit+0x1f6>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001880:	2300      	movs	r3, #0
 8001882:	623b      	str	r3, [r7, #32]
 8001884:	4b76      	ldr	r3, [pc, #472]	; (8001a60 <HAL_DCMI_MspInit+0x204>)
 8001886:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001888:	4a75      	ldr	r2, [pc, #468]	; (8001a60 <HAL_DCMI_MspInit+0x204>)
 800188a:	f043 0301 	orr.w	r3, r3, #1
 800188e:	6353      	str	r3, [r2, #52]	; 0x34
 8001890:	4b73      	ldr	r3, [pc, #460]	; (8001a60 <HAL_DCMI_MspInit+0x204>)
 8001892:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001894:	f003 0301 	and.w	r3, r3, #1
 8001898:	623b      	str	r3, [r7, #32]
 800189a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800189c:	2300      	movs	r3, #0
 800189e:	61fb      	str	r3, [r7, #28]
 80018a0:	4b6f      	ldr	r3, [pc, #444]	; (8001a60 <HAL_DCMI_MspInit+0x204>)
 80018a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a4:	4a6e      	ldr	r2, [pc, #440]	; (8001a60 <HAL_DCMI_MspInit+0x204>)
 80018a6:	f043 0310 	orr.w	r3, r3, #16
 80018aa:	6313      	str	r3, [r2, #48]	; 0x30
 80018ac:	4b6c      	ldr	r3, [pc, #432]	; (8001a60 <HAL_DCMI_MspInit+0x204>)
 80018ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b0:	f003 0310 	and.w	r3, r3, #16
 80018b4:	61fb      	str	r3, [r7, #28]
 80018b6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b8:	2300      	movs	r3, #0
 80018ba:	61bb      	str	r3, [r7, #24]
 80018bc:	4b68      	ldr	r3, [pc, #416]	; (8001a60 <HAL_DCMI_MspInit+0x204>)
 80018be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c0:	4a67      	ldr	r2, [pc, #412]	; (8001a60 <HAL_DCMI_MspInit+0x204>)
 80018c2:	f043 0301 	orr.w	r3, r3, #1
 80018c6:	6313      	str	r3, [r2, #48]	; 0x30
 80018c8:	4b65      	ldr	r3, [pc, #404]	; (8001a60 <HAL_DCMI_MspInit+0x204>)
 80018ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018cc:	f003 0301 	and.w	r3, r3, #1
 80018d0:	61bb      	str	r3, [r7, #24]
 80018d2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018d4:	2300      	movs	r3, #0
 80018d6:	617b      	str	r3, [r7, #20]
 80018d8:	4b61      	ldr	r3, [pc, #388]	; (8001a60 <HAL_DCMI_MspInit+0x204>)
 80018da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018dc:	4a60      	ldr	r2, [pc, #384]	; (8001a60 <HAL_DCMI_MspInit+0x204>)
 80018de:	f043 0304 	orr.w	r3, r3, #4
 80018e2:	6313      	str	r3, [r2, #48]	; 0x30
 80018e4:	4b5e      	ldr	r3, [pc, #376]	; (8001a60 <HAL_DCMI_MspInit+0x204>)
 80018e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e8:	f003 0304 	and.w	r3, r3, #4
 80018ec:	617b      	str	r3, [r7, #20]
 80018ee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018f0:	2300      	movs	r3, #0
 80018f2:	613b      	str	r3, [r7, #16]
 80018f4:	4b5a      	ldr	r3, [pc, #360]	; (8001a60 <HAL_DCMI_MspInit+0x204>)
 80018f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f8:	4a59      	ldr	r2, [pc, #356]	; (8001a60 <HAL_DCMI_MspInit+0x204>)
 80018fa:	f043 0308 	orr.w	r3, r3, #8
 80018fe:	6313      	str	r3, [r2, #48]	; 0x30
 8001900:	4b57      	ldr	r3, [pc, #348]	; (8001a60 <HAL_DCMI_MspInit+0x204>)
 8001902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001904:	f003 0308 	and.w	r3, r3, #8
 8001908:	613b      	str	r3, [r7, #16]
 800190a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800190c:	2300      	movs	r3, #0
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	4b53      	ldr	r3, [pc, #332]	; (8001a60 <HAL_DCMI_MspInit+0x204>)
 8001912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001914:	4a52      	ldr	r2, [pc, #328]	; (8001a60 <HAL_DCMI_MspInit+0x204>)
 8001916:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800191a:	6313      	str	r3, [r2, #48]	; 0x30
 800191c:	4b50      	ldr	r3, [pc, #320]	; (8001a60 <HAL_DCMI_MspInit+0x204>)
 800191e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001924:	60fb      	str	r3, [r7, #12]
 8001926:	68fb      	ldr	r3, [r7, #12]
    PC9     ------> DCMI_D3
    PC11     ------> DCMI_D4
    PD3     ------> DCMI_D5
    PG9     ------> DCMI_VSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001928:	2360      	movs	r3, #96	; 0x60
 800192a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192c:	2302      	movs	r3, #2
 800192e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001930:	2300      	movs	r3, #0
 8001932:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001934:	2300      	movs	r3, #0
 8001936:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001938:	230d      	movs	r3, #13
 800193a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800193c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001940:	4619      	mov	r1, r3
 8001942:	4848      	ldr	r0, [pc, #288]	; (8001a64 <HAL_DCMI_MspInit+0x208>)
 8001944:	f002 fd70 	bl	8004428 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001948:	2350      	movs	r3, #80	; 0x50
 800194a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194c:	2302      	movs	r3, #2
 800194e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001950:	2300      	movs	r3, #0
 8001952:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001954:	2300      	movs	r3, #0
 8001956:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001958:	230d      	movs	r3, #13
 800195a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800195c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001960:	4619      	mov	r1, r3
 8001962:	4841      	ldr	r0, [pc, #260]	; (8001a68 <HAL_DCMI_MspInit+0x20c>)
 8001964:	f002 fd60 	bl	8004428 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001968:	f44f 633c 	mov.w	r3, #3008	; 0xbc0
 800196c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196e:	2302      	movs	r3, #2
 8001970:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001972:	2300      	movs	r3, #0
 8001974:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001976:	2300      	movs	r3, #0
 8001978:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800197a:	230d      	movs	r3, #13
 800197c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800197e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001982:	4619      	mov	r1, r3
 8001984:	4839      	ldr	r0, [pc, #228]	; (8001a6c <HAL_DCMI_MspInit+0x210>)
 8001986:	f002 fd4f 	bl	8004428 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800198a:	2308      	movs	r3, #8
 800198c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800198e:	2302      	movs	r3, #2
 8001990:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001992:	2300      	movs	r3, #0
 8001994:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001996:	2300      	movs	r3, #0
 8001998:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800199a:	230d      	movs	r3, #13
 800199c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800199e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019a2:	4619      	mov	r1, r3
 80019a4:	4832      	ldr	r0, [pc, #200]	; (8001a70 <HAL_DCMI_MspInit+0x214>)
 80019a6:	f002 fd3f 	bl	8004428 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80019aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b0:	2302      	movs	r3, #2
 80019b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b4:	2300      	movs	r3, #0
 80019b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b8:	2300      	movs	r3, #0
 80019ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80019bc:	230d      	movs	r3, #13
 80019be:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019c4:	4619      	mov	r1, r3
 80019c6:	482b      	ldr	r0, [pc, #172]	; (8001a74 <HAL_DCMI_MspInit+0x218>)
 80019c8:	f002 fd2e 	bl	8004428 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 80019cc:	4b2a      	ldr	r3, [pc, #168]	; (8001a78 <HAL_DCMI_MspInit+0x21c>)
 80019ce:	4a2b      	ldr	r2, [pc, #172]	; (8001a7c <HAL_DCMI_MspInit+0x220>)
 80019d0:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 80019d2:	4b29      	ldr	r3, [pc, #164]	; (8001a78 <HAL_DCMI_MspInit+0x21c>)
 80019d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019d8:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019da:	4b27      	ldr	r3, [pc, #156]	; (8001a78 <HAL_DCMI_MspInit+0x21c>)
 80019dc:	2200      	movs	r2, #0
 80019de:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 80019e0:	4b25      	ldr	r3, [pc, #148]	; (8001a78 <HAL_DCMI_MspInit+0x21c>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 80019e6:	4b24      	ldr	r3, [pc, #144]	; (8001a78 <HAL_DCMI_MspInit+0x21c>)
 80019e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019ec:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80019ee:	4b22      	ldr	r3, [pc, #136]	; (8001a78 <HAL_DCMI_MspInit+0x21c>)
 80019f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80019f4:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80019f6:	4b20      	ldr	r3, [pc, #128]	; (8001a78 <HAL_DCMI_MspInit+0x21c>)
 80019f8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019fc:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 80019fe:	4b1e      	ldr	r3, [pc, #120]	; (8001a78 <HAL_DCMI_MspInit+0x21c>)
 8001a00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a04:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001a06:	4b1c      	ldr	r3, [pc, #112]	; (8001a78 <HAL_DCMI_MspInit+0x21c>)
 8001a08:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001a0c:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001a0e:	4b1a      	ldr	r3, [pc, #104]	; (8001a78 <HAL_DCMI_MspInit+0x21c>)
 8001a10:	2204      	movs	r2, #4
 8001a12:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001a14:	4b18      	ldr	r3, [pc, #96]	; (8001a78 <HAL_DCMI_MspInit+0x21c>)
 8001a16:	2203      	movs	r2, #3
 8001a18:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_dcmi.Init.MemBurst = DMA_MBURST_SINGLE;
 8001a1a:	4b17      	ldr	r3, [pc, #92]	; (8001a78 <HAL_DCMI_MspInit+0x21c>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001a20:	4b15      	ldr	r3, [pc, #84]	; (8001a78 <HAL_DCMI_MspInit+0x21c>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8001a26:	4814      	ldr	r0, [pc, #80]	; (8001a78 <HAL_DCMI_MspInit+0x21c>)
 8001a28:	f000 ff16 	bl	8002858 <HAL_DMA_Init>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <HAL_DCMI_MspInit+0x1da>
    {
      Error_Handler();
 8001a32:	f7ff fa1f 	bl	8000e74 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4a0f      	ldr	r2, [pc, #60]	; (8001a78 <HAL_DCMI_MspInit+0x21c>)
 8001a3a:	639a      	str	r2, [r3, #56]	; 0x38
 8001a3c:	4a0e      	ldr	r2, [pc, #56]	; (8001a78 <HAL_DCMI_MspInit+0x21c>)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 8001a42:	2200      	movs	r2, #0
 8001a44:	2100      	movs	r1, #0
 8001a46:	204e      	movs	r0, #78	; 0x4e
 8001a48:	f000 fc2a 	bl	80022a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8001a4c:	204e      	movs	r0, #78	; 0x4e
 8001a4e:	f000 fc43 	bl	80022d8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8001a52:	bf00      	nop
 8001a54:	3738      	adds	r7, #56	; 0x38
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	50050000 	.word	0x50050000
 8001a60:	40023800 	.word	0x40023800
 8001a64:	40021000 	.word	0x40021000
 8001a68:	40020000 	.word	0x40020000
 8001a6c:	40020800 	.word	0x40020800
 8001a70:	40020c00 	.word	0x40020c00
 8001a74:	40021800 	.word	0x40021800
 8001a78:	200000e8 	.word	0x200000e8
 8001a7c:	40026428 	.word	0x40026428

08001a80 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b08a      	sub	sp, #40	; 0x28
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a88:	f107 0314 	add.w	r3, r7, #20
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	605a      	str	r2, [r3, #4]
 8001a92:	609a      	str	r2, [r3, #8]
 8001a94:	60da      	str	r2, [r3, #12]
 8001a96:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a19      	ldr	r2, [pc, #100]	; (8001b04 <HAL_I2C_MspInit+0x84>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d12c      	bne.n	8001afc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	613b      	str	r3, [r7, #16]
 8001aa6:	4b18      	ldr	r3, [pc, #96]	; (8001b08 <HAL_I2C_MspInit+0x88>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	4a17      	ldr	r2, [pc, #92]	; (8001b08 <HAL_I2C_MspInit+0x88>)
 8001aac:	f043 0302 	orr.w	r3, r3, #2
 8001ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab2:	4b15      	ldr	r3, [pc, #84]	; (8001b08 <HAL_I2C_MspInit+0x88>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	613b      	str	r3, [r7, #16]
 8001abc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001abe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ac2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ac4:	2312      	movs	r3, #18
 8001ac6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001acc:	2303      	movs	r3, #3
 8001ace:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ad0:	2304      	movs	r3, #4
 8001ad2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ad4:	f107 0314 	add.w	r3, r7, #20
 8001ad8:	4619      	mov	r1, r3
 8001ada:	480c      	ldr	r0, [pc, #48]	; (8001b0c <HAL_I2C_MspInit+0x8c>)
 8001adc:	f002 fca4 	bl	8004428 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	60fb      	str	r3, [r7, #12]
 8001ae4:	4b08      	ldr	r3, [pc, #32]	; (8001b08 <HAL_I2C_MspInit+0x88>)
 8001ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae8:	4a07      	ldr	r2, [pc, #28]	; (8001b08 <HAL_I2C_MspInit+0x88>)
 8001aea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001aee:	6413      	str	r3, [r2, #64]	; 0x40
 8001af0:	4b05      	ldr	r3, [pc, #20]	; (8001b08 <HAL_I2C_MspInit+0x88>)
 8001af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001af8:	60fb      	str	r3, [r7, #12]
 8001afa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001afc:	bf00      	nop
 8001afe:	3728      	adds	r7, #40	; 0x28
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	40005400 	.word	0x40005400
 8001b08:	40023800 	.word	0x40023800
 8001b0c:	40020400 	.word	0x40020400

08001b10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b08a      	sub	sp, #40	; 0x28
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b18:	f107 0314 	add.w	r3, r7, #20
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	605a      	str	r2, [r3, #4]
 8001b22:	609a      	str	r2, [r3, #8]
 8001b24:	60da      	str	r2, [r3, #12]
 8001b26:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a4c      	ldr	r2, [pc, #304]	; (8001c60 <HAL_UART_MspInit+0x150>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	f040 8091 	bne.w	8001c56 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b34:	2300      	movs	r3, #0
 8001b36:	613b      	str	r3, [r7, #16]
 8001b38:	4b4a      	ldr	r3, [pc, #296]	; (8001c64 <HAL_UART_MspInit+0x154>)
 8001b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3c:	4a49      	ldr	r2, [pc, #292]	; (8001c64 <HAL_UART_MspInit+0x154>)
 8001b3e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b42:	6413      	str	r3, [r2, #64]	; 0x40
 8001b44:	4b47      	ldr	r3, [pc, #284]	; (8001c64 <HAL_UART_MspInit+0x154>)
 8001b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b4c:	613b      	str	r3, [r7, #16]
 8001b4e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b50:	2300      	movs	r3, #0
 8001b52:	60fb      	str	r3, [r7, #12]
 8001b54:	4b43      	ldr	r3, [pc, #268]	; (8001c64 <HAL_UART_MspInit+0x154>)
 8001b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b58:	4a42      	ldr	r2, [pc, #264]	; (8001c64 <HAL_UART_MspInit+0x154>)
 8001b5a:	f043 0308 	orr.w	r3, r3, #8
 8001b5e:	6313      	str	r3, [r2, #48]	; 0x30
 8001b60:	4b40      	ldr	r3, [pc, #256]	; (8001c64 <HAL_UART_MspInit+0x154>)
 8001b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b64:	f003 0308 	and.w	r3, r3, #8
 8001b68:	60fb      	str	r3, [r7, #12]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001b6c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b72:	2302      	movs	r3, #2
 8001b74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b76:	2300      	movs	r3, #0
 8001b78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b7e:	2307      	movs	r3, #7
 8001b80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b82:	f107 0314 	add.w	r3, r7, #20
 8001b86:	4619      	mov	r1, r3
 8001b88:	4837      	ldr	r0, [pc, #220]	; (8001c68 <HAL_UART_MspInit+0x158>)
 8001b8a:	f002 fc4d 	bl	8004428 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8001b8e:	4b37      	ldr	r3, [pc, #220]	; (8001c6c <HAL_UART_MspInit+0x15c>)
 8001b90:	4a37      	ldr	r2, [pc, #220]	; (8001c70 <HAL_UART_MspInit+0x160>)
 8001b92:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8001b94:	4b35      	ldr	r3, [pc, #212]	; (8001c6c <HAL_UART_MspInit+0x15c>)
 8001b96:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b9a:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b9c:	4b33      	ldr	r3, [pc, #204]	; (8001c6c <HAL_UART_MspInit+0x15c>)
 8001b9e:	2240      	movs	r2, #64	; 0x40
 8001ba0:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ba2:	4b32      	ldr	r3, [pc, #200]	; (8001c6c <HAL_UART_MspInit+0x15c>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ba8:	4b30      	ldr	r3, [pc, #192]	; (8001c6c <HAL_UART_MspInit+0x15c>)
 8001baa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bae:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bb0:	4b2e      	ldr	r3, [pc, #184]	; (8001c6c <HAL_UART_MspInit+0x15c>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bb6:	4b2d      	ldr	r3, [pc, #180]	; (8001c6c <HAL_UART_MspInit+0x15c>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001bbc:	4b2b      	ldr	r3, [pc, #172]	; (8001c6c <HAL_UART_MspInit+0x15c>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001bc2:	4b2a      	ldr	r3, [pc, #168]	; (8001c6c <HAL_UART_MspInit+0x15c>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001bc8:	4b28      	ldr	r3, [pc, #160]	; (8001c6c <HAL_UART_MspInit+0x15c>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001bce:	4827      	ldr	r0, [pc, #156]	; (8001c6c <HAL_UART_MspInit+0x15c>)
 8001bd0:	f000 fe42 	bl	8002858 <HAL_DMA_Init>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001bda:	f7ff f94b 	bl	8000e74 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a22      	ldr	r2, [pc, #136]	; (8001c6c <HAL_UART_MspInit+0x15c>)
 8001be2:	639a      	str	r2, [r3, #56]	; 0x38
 8001be4:	4a21      	ldr	r2, [pc, #132]	; (8001c6c <HAL_UART_MspInit+0x15c>)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8001bea:	4b22      	ldr	r3, [pc, #136]	; (8001c74 <HAL_UART_MspInit+0x164>)
 8001bec:	4a22      	ldr	r2, [pc, #136]	; (8001c78 <HAL_UART_MspInit+0x168>)
 8001bee:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8001bf0:	4b20      	ldr	r3, [pc, #128]	; (8001c74 <HAL_UART_MspInit+0x164>)
 8001bf2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001bf6:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bf8:	4b1e      	ldr	r3, [pc, #120]	; (8001c74 <HAL_UART_MspInit+0x164>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bfe:	4b1d      	ldr	r3, [pc, #116]	; (8001c74 <HAL_UART_MspInit+0x164>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c04:	4b1b      	ldr	r3, [pc, #108]	; (8001c74 <HAL_UART_MspInit+0x164>)
 8001c06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c0a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c0c:	4b19      	ldr	r3, [pc, #100]	; (8001c74 <HAL_UART_MspInit+0x164>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c12:	4b18      	ldr	r3, [pc, #96]	; (8001c74 <HAL_UART_MspInit+0x164>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8001c18:	4b16      	ldr	r3, [pc, #88]	; (8001c74 <HAL_UART_MspInit+0x164>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c1e:	4b15      	ldr	r3, [pc, #84]	; (8001c74 <HAL_UART_MspInit+0x164>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c24:	4b13      	ldr	r3, [pc, #76]	; (8001c74 <HAL_UART_MspInit+0x164>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001c2a:	4812      	ldr	r0, [pc, #72]	; (8001c74 <HAL_UART_MspInit+0x164>)
 8001c2c:	f000 fe14 	bl	8002858 <HAL_DMA_Init>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8001c36:	f7ff f91d 	bl	8000e74 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4a0d      	ldr	r2, [pc, #52]	; (8001c74 <HAL_UART_MspInit+0x164>)
 8001c3e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001c40:	4a0c      	ldr	r2, [pc, #48]	; (8001c74 <HAL_UART_MspInit+0x164>)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001c46:	2200      	movs	r2, #0
 8001c48:	2100      	movs	r1, #0
 8001c4a:	2027      	movs	r0, #39	; 0x27
 8001c4c:	f000 fb28 	bl	80022a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001c50:	2027      	movs	r0, #39	; 0x27
 8001c52:	f000 fb41 	bl	80022d8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001c56:	bf00      	nop
 8001c58:	3728      	adds	r7, #40	; 0x28
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	40004800 	.word	0x40004800
 8001c64:	40023800 	.word	0x40023800
 8001c68:	40020c00 	.word	0x40020c00
 8001c6c:	200001e4 	.word	0x200001e4
 8001c70:	40026058 	.word	0x40026058
 8001c74:	20000244 	.word	0x20000244
 8001c78:	40026028 	.word	0x40026028

08001c7c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b08a      	sub	sp, #40	; 0x28
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c84:	f107 0314 	add.w	r3, r7, #20
 8001c88:	2200      	movs	r2, #0
 8001c8a:	601a      	str	r2, [r3, #0]
 8001c8c:	605a      	str	r2, [r3, #4]
 8001c8e:	609a      	str	r2, [r3, #8]
 8001c90:	60da      	str	r2, [r3, #12]
 8001c92:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c9c:	d132      	bne.n	8001d04 <HAL_PCD_MspInit+0x88>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	613b      	str	r3, [r7, #16]
 8001ca2:	4b1a      	ldr	r3, [pc, #104]	; (8001d0c <HAL_PCD_MspInit+0x90>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca6:	4a19      	ldr	r2, [pc, #100]	; (8001d0c <HAL_PCD_MspInit+0x90>)
 8001ca8:	f043 0301 	orr.w	r3, r3, #1
 8001cac:	6313      	str	r3, [r2, #48]	; 0x30
 8001cae:	4b17      	ldr	r3, [pc, #92]	; (8001d0c <HAL_PCD_MspInit+0x90>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb2:	f003 0301 	and.w	r3, r3, #1
 8001cb6:	613b      	str	r3, [r7, #16]
 8001cb8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 8001cba:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001cbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001ccc:	230a      	movs	r3, #10
 8001cce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd0:	f107 0314 	add.w	r3, r7, #20
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	480e      	ldr	r0, [pc, #56]	; (8001d10 <HAL_PCD_MspInit+0x94>)
 8001cd8:	f002 fba6 	bl	8004428 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001cdc:	4b0b      	ldr	r3, [pc, #44]	; (8001d0c <HAL_PCD_MspInit+0x90>)
 8001cde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ce0:	4a0a      	ldr	r2, [pc, #40]	; (8001d0c <HAL_PCD_MspInit+0x90>)
 8001ce2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ce6:	6353      	str	r3, [r2, #52]	; 0x34
 8001ce8:	2300      	movs	r3, #0
 8001cea:	60fb      	str	r3, [r7, #12]
 8001cec:	4b07      	ldr	r3, [pc, #28]	; (8001d0c <HAL_PCD_MspInit+0x90>)
 8001cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf0:	4a06      	ldr	r2, [pc, #24]	; (8001d0c <HAL_PCD_MspInit+0x90>)
 8001cf2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cf6:	6453      	str	r3, [r2, #68]	; 0x44
 8001cf8:	4b04      	ldr	r3, [pc, #16]	; (8001d0c <HAL_PCD_MspInit+0x90>)
 8001cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d00:	60fb      	str	r3, [r7, #12]
 8001d02:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001d04:	bf00      	nop
 8001d06:	3728      	adds	r7, #40	; 0x28
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	40023800 	.word	0x40023800
 8001d10:	40020000 	.word	0x40020000

08001d14 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b08e      	sub	sp, #56	; 0x38
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001d20:	2300      	movs	r3, #0
 8001d22:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8001d24:	2300      	movs	r3, #0
 8001d26:	60fb      	str	r3, [r7, #12]
 8001d28:	4b33      	ldr	r3, [pc, #204]	; (8001df8 <HAL_InitTick+0xe4>)
 8001d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2c:	4a32      	ldr	r2, [pc, #200]	; (8001df8 <HAL_InitTick+0xe4>)
 8001d2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d32:	6413      	str	r3, [r2, #64]	; 0x40
 8001d34:	4b30      	ldr	r3, [pc, #192]	; (8001df8 <HAL_InitTick+0xe4>)
 8001d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d3c:	60fb      	str	r3, [r7, #12]
 8001d3e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d40:	f107 0210 	add.w	r2, r7, #16
 8001d44:	f107 0314 	add.w	r3, r7, #20
 8001d48:	4611      	mov	r1, r2
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f003 fd32 	bl	80057b4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001d50:	6a3b      	ldr	r3, [r7, #32]
 8001d52:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d103      	bne.n	8001d62 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001d5a:	f003 fd03 	bl	8005764 <HAL_RCC_GetPCLK1Freq>
 8001d5e:	6378      	str	r0, [r7, #52]	; 0x34
 8001d60:	e004      	b.n	8001d6c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001d62:	f003 fcff 	bl	8005764 <HAL_RCC_GetPCLK1Freq>
 8001d66:	4603      	mov	r3, r0
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d6e:	4a23      	ldr	r2, [pc, #140]	; (8001dfc <HAL_InitTick+0xe8>)
 8001d70:	fba2 2303 	umull	r2, r3, r2, r3
 8001d74:	0c9b      	lsrs	r3, r3, #18
 8001d76:	3b01      	subs	r3, #1
 8001d78:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8001d7a:	4b21      	ldr	r3, [pc, #132]	; (8001e00 <HAL_InitTick+0xec>)
 8001d7c:	4a21      	ldr	r2, [pc, #132]	; (8001e04 <HAL_InitTick+0xf0>)
 8001d7e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8001d80:	4b1f      	ldr	r3, [pc, #124]	; (8001e00 <HAL_InitTick+0xec>)
 8001d82:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d86:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8001d88:	4a1d      	ldr	r2, [pc, #116]	; (8001e00 <HAL_InitTick+0xec>)
 8001d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d8c:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8001d8e:	4b1c      	ldr	r3, [pc, #112]	; (8001e00 <HAL_InitTick+0xec>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d94:	4b1a      	ldr	r3, [pc, #104]	; (8001e00 <HAL_InitTick+0xec>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d9a:	4b19      	ldr	r3, [pc, #100]	; (8001e00 <HAL_InitTick+0xec>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8001da0:	4817      	ldr	r0, [pc, #92]	; (8001e00 <HAL_InitTick+0xec>)
 8001da2:	f003 fd39 	bl	8005818 <HAL_TIM_Base_Init>
 8001da6:	4603      	mov	r3, r0
 8001da8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001dac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d11b      	bne.n	8001dec <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8001db4:	4812      	ldr	r0, [pc, #72]	; (8001e00 <HAL_InitTick+0xec>)
 8001db6:	f003 fd89 	bl	80058cc <HAL_TIM_Base_Start_IT>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001dc0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d111      	bne.n	8001dec <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001dc8:	202d      	movs	r0, #45	; 0x2d
 8001dca:	f000 fa85 	bl	80022d8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2b0f      	cmp	r3, #15
 8001dd2:	d808      	bhi.n	8001de6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	6879      	ldr	r1, [r7, #4]
 8001dd8:	202d      	movs	r0, #45	; 0x2d
 8001dda:	f000 fa61 	bl	80022a0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001dde:	4a0a      	ldr	r2, [pc, #40]	; (8001e08 <HAL_InitTick+0xf4>)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6013      	str	r3, [r2, #0]
 8001de4:	e002      	b.n	8001dec <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001dec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3738      	adds	r7, #56	; 0x38
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	40023800 	.word	0x40023800
 8001dfc:	431bde83 	.word	0x431bde83
 8001e00:	2001f78c 	.word	0x2001f78c
 8001e04:	40002000 	.word	0x40002000
 8001e08:	20000004 	.word	0x20000004

08001e0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e10:	e7fe      	b.n	8001e10 <NMI_Handler+0x4>

08001e12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e12:	b480      	push	{r7}
 8001e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e16:	e7fe      	b.n	8001e16 <HardFault_Handler+0x4>

08001e18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e1c:	e7fe      	b.n	8001e1c <MemManage_Handler+0x4>

08001e1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e22:	e7fe      	b.n	8001e22 <BusFault_Handler+0x4>

08001e24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e28:	e7fe      	b.n	8001e28 <UsageFault_Handler+0x4>

08001e2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e2a:	b480      	push	{r7}
 8001e2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e2e:	bf00      	nop
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e3c:	bf00      	nop
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr

08001e46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e46:	b480      	push	{r7}
 8001e48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e4a:	bf00      	nop
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e58:	bf00      	nop
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
	...

08001e64 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001e68:	4802      	ldr	r0, [pc, #8]	; (8001e74 <DMA1_Stream1_IRQHandler+0x10>)
 8001e6a:	f000 feeb 	bl	8002c44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001e6e:	bf00      	nop
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	20000244 	.word	0x20000244

08001e78 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001e7c:	4802      	ldr	r0, [pc, #8]	; (8001e88 <DMA1_Stream3_IRQHandler+0x10>)
 8001e7e:	f000 fee1 	bl	8002c44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001e82:	bf00      	nop
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	200001e4 	.word	0x200001e4

08001e8c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001e90:	4802      	ldr	r0, [pc, #8]	; (8001e9c <USART3_IRQHandler+0x10>)
 8001e92:	f004 f8af 	bl	8005ff4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001e96:	bf00      	nop
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	2000019c 	.word	0x2000019c

08001ea0 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001ea4:	4802      	ldr	r0, [pc, #8]	; (8001eb0 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001ea6:	f003 fd81 	bl	80059ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001eaa:	bf00      	nop
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	2001f78c 	.word	0x2001f78c

08001eb4 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8001eb8:	4802      	ldr	r0, [pc, #8]	; (8001ec4 <DMA2_Stream1_IRQHandler+0x10>)
 8001eba:	f000 fec3 	bl	8002c44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001ebe:	bf00      	nop
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	200000e8 	.word	0x200000e8

08001ec8 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8001ecc:	4802      	ldr	r0, [pc, #8]	; (8001ed8 <DCMI_IRQHandler+0x10>)
 8001ece:	f000 fb0d 	bl	80024ec <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 8001ed2:	bf00      	nop
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	200000a8 	.word	0x200000a8

08001edc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b086      	sub	sp, #24
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	60b9      	str	r1, [r7, #8]
 8001ee6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ee8:	2300      	movs	r3, #0
 8001eea:	617b      	str	r3, [r7, #20]
 8001eec:	e00a      	b.n	8001f04 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001eee:	f3af 8000 	nop.w
 8001ef2:	4601      	mov	r1, r0
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	1c5a      	adds	r2, r3, #1
 8001ef8:	60ba      	str	r2, [r7, #8]
 8001efa:	b2ca      	uxtb	r2, r1
 8001efc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	3301      	adds	r3, #1
 8001f02:	617b      	str	r3, [r7, #20]
 8001f04:	697a      	ldr	r2, [r7, #20]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	dbf0      	blt.n	8001eee <_read+0x12>
  }

  return len;
 8001f0c:	687b      	ldr	r3, [r7, #4]
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3718      	adds	r7, #24
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001f16:	b480      	push	{r7}
 8001f18:	b083      	sub	sp, #12
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr

08001f2e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	b083      	sub	sp, #12
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
 8001f36:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f3e:	605a      	str	r2, [r3, #4]
  return 0;
 8001f40:	2300      	movs	r3, #0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr

08001f4e <_isatty>:

int _isatty(int file)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	b083      	sub	sp, #12
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f56:	2301      	movs	r3, #1
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b085      	sub	sp, #20
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	60f8      	str	r0, [r7, #12]
 8001f6c:	60b9      	str	r1, [r7, #8]
 8001f6e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3714      	adds	r7, #20
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
	...

08001f80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b086      	sub	sp, #24
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f88:	4a14      	ldr	r2, [pc, #80]	; (8001fdc <_sbrk+0x5c>)
 8001f8a:	4b15      	ldr	r3, [pc, #84]	; (8001fe0 <_sbrk+0x60>)
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f94:	4b13      	ldr	r3, [pc, #76]	; (8001fe4 <_sbrk+0x64>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d102      	bne.n	8001fa2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f9c:	4b11      	ldr	r3, [pc, #68]	; (8001fe4 <_sbrk+0x64>)
 8001f9e:	4a12      	ldr	r2, [pc, #72]	; (8001fe8 <_sbrk+0x68>)
 8001fa0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fa2:	4b10      	ldr	r3, [pc, #64]	; (8001fe4 <_sbrk+0x64>)
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4413      	add	r3, r2
 8001faa:	693a      	ldr	r2, [r7, #16]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d207      	bcs.n	8001fc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fb0:	f005 fd74 	bl	8007a9c <__errno>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	220c      	movs	r2, #12
 8001fb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fba:	f04f 33ff 	mov.w	r3, #4294967295
 8001fbe:	e009      	b.n	8001fd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fc0:	4b08      	ldr	r3, [pc, #32]	; (8001fe4 <_sbrk+0x64>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fc6:	4b07      	ldr	r3, [pc, #28]	; (8001fe4 <_sbrk+0x64>)
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4413      	add	r3, r2
 8001fce:	4a05      	ldr	r2, [pc, #20]	; (8001fe4 <_sbrk+0x64>)
 8001fd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3718      	adds	r7, #24
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	20030000 	.word	0x20030000
 8001fe0:	00000400 	.word	0x00000400
 8001fe4:	2001f7d4 	.word	0x2001f7d4
 8001fe8:	2001f928 	.word	0x2001f928

08001fec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ff0:	4b06      	ldr	r3, [pc, #24]	; (800200c <SystemInit+0x20>)
 8001ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ff6:	4a05      	ldr	r2, [pc, #20]	; (800200c <SystemInit+0x20>)
 8001ff8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ffc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002000:	bf00      	nop
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	e000ed00 	.word	0xe000ed00

08002010 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002010:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002048 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002014:	f7ff ffea 	bl	8001fec <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002018:	480c      	ldr	r0, [pc, #48]	; (800204c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800201a:	490d      	ldr	r1, [pc, #52]	; (8002050 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800201c:	4a0d      	ldr	r2, [pc, #52]	; (8002054 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800201e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002020:	e002      	b.n	8002028 <LoopCopyDataInit>

08002022 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002022:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002024:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002026:	3304      	adds	r3, #4

08002028 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002028:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800202a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800202c:	d3f9      	bcc.n	8002022 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800202e:	4a0a      	ldr	r2, [pc, #40]	; (8002058 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002030:	4c0a      	ldr	r4, [pc, #40]	; (800205c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002032:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002034:	e001      	b.n	800203a <LoopFillZerobss>

08002036 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002036:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002038:	3204      	adds	r2, #4

0800203a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800203a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800203c:	d3fb      	bcc.n	8002036 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800203e:	f005 fd33 	bl	8007aa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002042:	f7fe fc3f 	bl	80008c4 <main>
  bx  lr    
 8002046:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002048:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800204c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002050:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002054:	08008b38 	.word	0x08008b38
  ldr r2, =_sbss
 8002058:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800205c:	2001f928 	.word	0x2001f928

08002060 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002060:	e7fe      	b.n	8002060 <ADC_IRQHandler>
	...

08002064 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002068:	4b0e      	ldr	r3, [pc, #56]	; (80020a4 <HAL_Init+0x40>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a0d      	ldr	r2, [pc, #52]	; (80020a4 <HAL_Init+0x40>)
 800206e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002072:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002074:	4b0b      	ldr	r3, [pc, #44]	; (80020a4 <HAL_Init+0x40>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a0a      	ldr	r2, [pc, #40]	; (80020a4 <HAL_Init+0x40>)
 800207a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800207e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002080:	4b08      	ldr	r3, [pc, #32]	; (80020a4 <HAL_Init+0x40>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a07      	ldr	r2, [pc, #28]	; (80020a4 <HAL_Init+0x40>)
 8002086:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800208a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800208c:	2003      	movs	r0, #3
 800208e:	f000 f8fc 	bl	800228a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002092:	200f      	movs	r0, #15
 8002094:	f7ff fe3e 	bl	8001d14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002098:	f7ff fbb8 	bl	800180c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	40023c00 	.word	0x40023c00

080020a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020ac:	4b06      	ldr	r3, [pc, #24]	; (80020c8 <HAL_IncTick+0x20>)
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	461a      	mov	r2, r3
 80020b2:	4b06      	ldr	r3, [pc, #24]	; (80020cc <HAL_IncTick+0x24>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4413      	add	r3, r2
 80020b8:	4a04      	ldr	r2, [pc, #16]	; (80020cc <HAL_IncTick+0x24>)
 80020ba:	6013      	str	r3, [r2, #0]
}
 80020bc:	bf00      	nop
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	20000008 	.word	0x20000008
 80020cc:	2001f7d8 	.word	0x2001f7d8

080020d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  return uwTick;
 80020d4:	4b03      	ldr	r3, [pc, #12]	; (80020e4 <HAL_GetTick+0x14>)
 80020d6:	681b      	ldr	r3, [r3, #0]
}
 80020d8:	4618      	mov	r0, r3
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	2001f7d8 	.word	0x2001f7d8

080020e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020f0:	f7ff ffee 	bl	80020d0 <HAL_GetTick>
 80020f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002100:	d005      	beq.n	800210e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002102:	4b0a      	ldr	r3, [pc, #40]	; (800212c <HAL_Delay+0x44>)
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	461a      	mov	r2, r3
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	4413      	add	r3, r2
 800210c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800210e:	bf00      	nop
 8002110:	f7ff ffde 	bl	80020d0 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	68fa      	ldr	r2, [r7, #12]
 800211c:	429a      	cmp	r2, r3
 800211e:	d8f7      	bhi.n	8002110 <HAL_Delay+0x28>
  {
  }
}
 8002120:	bf00      	nop
 8002122:	bf00      	nop
 8002124:	3710      	adds	r7, #16
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	20000008 	.word	0x20000008

08002130 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002130:	b480      	push	{r7}
 8002132:	b085      	sub	sp, #20
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f003 0307 	and.w	r3, r3, #7
 800213e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002140:	4b0c      	ldr	r3, [pc, #48]	; (8002174 <__NVIC_SetPriorityGrouping+0x44>)
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002146:	68ba      	ldr	r2, [r7, #8]
 8002148:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800214c:	4013      	ands	r3, r2
 800214e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002158:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800215c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002160:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002162:	4a04      	ldr	r2, [pc, #16]	; (8002174 <__NVIC_SetPriorityGrouping+0x44>)
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	60d3      	str	r3, [r2, #12]
}
 8002168:	bf00      	nop
 800216a:	3714      	adds	r7, #20
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr
 8002174:	e000ed00 	.word	0xe000ed00

08002178 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800217c:	4b04      	ldr	r3, [pc, #16]	; (8002190 <__NVIC_GetPriorityGrouping+0x18>)
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	0a1b      	lsrs	r3, r3, #8
 8002182:	f003 0307 	and.w	r3, r3, #7
}
 8002186:	4618      	mov	r0, r3
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr
 8002190:	e000ed00 	.word	0xe000ed00

08002194 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	4603      	mov	r3, r0
 800219c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800219e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	db0b      	blt.n	80021be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021a6:	79fb      	ldrb	r3, [r7, #7]
 80021a8:	f003 021f 	and.w	r2, r3, #31
 80021ac:	4907      	ldr	r1, [pc, #28]	; (80021cc <__NVIC_EnableIRQ+0x38>)
 80021ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b2:	095b      	lsrs	r3, r3, #5
 80021b4:	2001      	movs	r0, #1
 80021b6:	fa00 f202 	lsl.w	r2, r0, r2
 80021ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021be:	bf00      	nop
 80021c0:	370c      	adds	r7, #12
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	e000e100 	.word	0xe000e100

080021d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	4603      	mov	r3, r0
 80021d8:	6039      	str	r1, [r7, #0]
 80021da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	db0a      	blt.n	80021fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	b2da      	uxtb	r2, r3
 80021e8:	490c      	ldr	r1, [pc, #48]	; (800221c <__NVIC_SetPriority+0x4c>)
 80021ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ee:	0112      	lsls	r2, r2, #4
 80021f0:	b2d2      	uxtb	r2, r2
 80021f2:	440b      	add	r3, r1
 80021f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021f8:	e00a      	b.n	8002210 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	b2da      	uxtb	r2, r3
 80021fe:	4908      	ldr	r1, [pc, #32]	; (8002220 <__NVIC_SetPriority+0x50>)
 8002200:	79fb      	ldrb	r3, [r7, #7]
 8002202:	f003 030f 	and.w	r3, r3, #15
 8002206:	3b04      	subs	r3, #4
 8002208:	0112      	lsls	r2, r2, #4
 800220a:	b2d2      	uxtb	r2, r2
 800220c:	440b      	add	r3, r1
 800220e:	761a      	strb	r2, [r3, #24]
}
 8002210:	bf00      	nop
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr
 800221c:	e000e100 	.word	0xe000e100
 8002220:	e000ed00 	.word	0xe000ed00

08002224 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002224:	b480      	push	{r7}
 8002226:	b089      	sub	sp, #36	; 0x24
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f003 0307 	and.w	r3, r3, #7
 8002236:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	f1c3 0307 	rsb	r3, r3, #7
 800223e:	2b04      	cmp	r3, #4
 8002240:	bf28      	it	cs
 8002242:	2304      	movcs	r3, #4
 8002244:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	3304      	adds	r3, #4
 800224a:	2b06      	cmp	r3, #6
 800224c:	d902      	bls.n	8002254 <NVIC_EncodePriority+0x30>
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	3b03      	subs	r3, #3
 8002252:	e000      	b.n	8002256 <NVIC_EncodePriority+0x32>
 8002254:	2300      	movs	r3, #0
 8002256:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002258:	f04f 32ff 	mov.w	r2, #4294967295
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	fa02 f303 	lsl.w	r3, r2, r3
 8002262:	43da      	mvns	r2, r3
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	401a      	ands	r2, r3
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800226c:	f04f 31ff 	mov.w	r1, #4294967295
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	fa01 f303 	lsl.w	r3, r1, r3
 8002276:	43d9      	mvns	r1, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800227c:	4313      	orrs	r3, r2
         );
}
 800227e:	4618      	mov	r0, r3
 8002280:	3724      	adds	r7, #36	; 0x24
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr

0800228a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800228a:	b580      	push	{r7, lr}
 800228c:	b082      	sub	sp, #8
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f7ff ff4c 	bl	8002130 <__NVIC_SetPriorityGrouping>
}
 8002298:	bf00      	nop
 800229a:	3708      	adds	r7, #8
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}

080022a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b086      	sub	sp, #24
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	4603      	mov	r3, r0
 80022a8:	60b9      	str	r1, [r7, #8]
 80022aa:	607a      	str	r2, [r7, #4]
 80022ac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022ae:	2300      	movs	r3, #0
 80022b0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022b2:	f7ff ff61 	bl	8002178 <__NVIC_GetPriorityGrouping>
 80022b6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	68b9      	ldr	r1, [r7, #8]
 80022bc:	6978      	ldr	r0, [r7, #20]
 80022be:	f7ff ffb1 	bl	8002224 <NVIC_EncodePriority>
 80022c2:	4602      	mov	r2, r0
 80022c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022c8:	4611      	mov	r1, r2
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7ff ff80 	bl	80021d0 <__NVIC_SetPriority>
}
 80022d0:	bf00      	nop
 80022d2:	3718      	adds	r7, #24
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	4603      	mov	r3, r0
 80022e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7ff ff54 	bl	8002194 <__NVIC_EnableIRQ>
}
 80022ec:	bf00      	nop
 80022ee:	3708      	adds	r7, #8
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef* hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b088      	sub	sp, #32
 80022f8:	af02      	add	r7, sp, #8
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	60b9      	str	r1, [r7, #8]
 80022fe:	607a      	str	r2, [r7, #4]
 8002300:	603b      	str	r3, [r7, #0]
  /* Initialize the second memory address */
  uint32_t SecondMemAddress = 0U;
 8002302:	2300      	movs	r3, #0
 8002304:	617b      	str	r3, [r7, #20]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800230c:	2b01      	cmp	r3, #1
 800230e:	d101      	bne.n	8002314 <HAL_DCMI_Start_DMA+0x20>
 8002310:	2302      	movs	r3, #2
 8002312:	e086      	b.n	8002422 <HAL_DCMI_Start_DMA+0x12e>
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2201      	movs	r2, #1
 8002318:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2202      	movs	r2, #2
 8002320:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  
  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002332:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f022 0202 	bic.w	r2, r2, #2
 8002342:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |=  (uint32_t)(DCMI_Mode);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	6819      	ldr	r1, [r3, #0]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	68ba      	ldr	r2, [r7, #8]
 8002350:	430a      	orrs	r2, r1
 8002352:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002358:	4a34      	ldr	r2, [pc, #208]	; (800242c <HAL_DCMI_Start_DMA+0x138>)
 800235a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002360:	4a33      	ldr	r2, [pc, #204]	; (8002430 <HAL_DCMI_Start_DMA+0x13c>)
 8002362:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002368:	2200      	movs	r2, #0
 800236a:	651a      	str	r2, [r3, #80]	; 0x50
  
  /* Reset transfer counters value */ 
  hdcmi->XferCount = 0U;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2200      	movs	r2, #0
 8002370:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi->XferTransferNumber = 0U;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2200      	movs	r2, #0
 8002376:	631a      	str	r2, [r3, #48]	; 0x30

  if(Length <= 0xFFFFU)
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800237e:	d20a      	bcs.n	8002396 <HAL_DCMI_Start_DMA+0xa2>
  {
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	3328      	adds	r3, #40	; 0x28
 800238a:	4619      	mov	r1, r3
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	f000 fb6e 	bl	8002a70 <HAL_DMA_Start_IT>
 8002394:	e038      	b.n	8002408 <HAL_DCMI_Start_DMA+0x114>
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800239a:	4a24      	ldr	r2, [pc, #144]	; (800242c <HAL_DCMI_Start_DMA+0x138>)
 800239c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1U;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2201      	movs	r2, #1
 80023a2:	629a      	str	r2, [r3, #40]	; 0x28
    hdcmi->XferSize = Length;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	683a      	ldr	r2, [r7, #0]
 80023a8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdcmi->pBuffPtr = pData;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Get the number of buffer */
    while(hdcmi->XferSize > 0xFFFFU)
 80023b0:	e009      	b.n	80023c6 <HAL_DCMI_Start_DMA+0xd2>
    {
      hdcmi->XferSize = (hdcmi->XferSize/2U);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b6:	085a      	lsrs	r2, r3, #1
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	62da      	str	r2, [r3, #44]	; 0x2c
      hdcmi->XferCount = hdcmi->XferCount*2U;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c0:	005a      	lsls	r2, r3, #1
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	629a      	str	r2, [r3, #40]	; 0x28
    while(hdcmi->XferSize > 0xFFFFU)
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023ce:	d2f0      	bcs.n	80023b2 <HAL_DCMI_Start_DMA+0xbe>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d4:	1e9a      	subs	r2, r3, #2
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	629a      	str	r2, [r3, #40]	; 0x28
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U*hdcmi->XferSize));
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	4413      	add	r3, r2
 80023ec:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	3328      	adds	r3, #40	; 0x28
 80023f8:	4619      	mov	r1, r3
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023fe:	9300      	str	r3, [sp, #0]
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	f000 fe88 	bl	8003118 <HAL_DMAEx_MultiBufferStart_IT>
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f042 0201 	orr.w	r2, r2, #1
 8002416:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2200      	movs	r2, #0
 800241c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Return function status */
  return HAL_OK;
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3718      	adds	r7, #24
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	08002625 	.word	0x08002625
 8002430:	0800274f 	.word	0x0800274f

08002434 <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef* hdcmi)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = SystemCoreClock / HAL_TIMEOUT_DCMI_STOP;
 800243c:	4b29      	ldr	r3, [pc, #164]	; (80024e4 <HAL_DCMI_Stop+0xb0>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	085b      	lsrs	r3, r3, #1
 8002442:	4a29      	ldr	r2, [pc, #164]	; (80024e8 <HAL_DCMI_Stop+0xb4>)
 8002444:	fba2 2303 	umull	r2, r3, r2, r3
 8002448:	089b      	lsrs	r3, r3, #2
 800244a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800244c:	2300      	movs	r3, #0
 800244e:	73fb      	strb	r3, [r7, #15]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002456:	2b01      	cmp	r3, #1
 8002458:	d101      	bne.n	800245e <HAL_DCMI_Stop+0x2a>
 800245a:	2302      	movs	r3, #2
 800245c:	e03e      	b.n	80024dc <HAL_DCMI_Stop+0xa8>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2201      	movs	r2, #1
 8002462:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2202      	movs	r2, #2
 800246a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f022 0201 	bic.w	r2, r2, #1
 800247c:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    if (count-- == 0U)
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	1e5a      	subs	r2, r3, #1
 8002482:	60ba      	str	r2, [r7, #8]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d108      	bne.n	800249a <HAL_DCMI_Stop+0x66>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800248c:	f043 0220 	orr.w	r2, r3, #32
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	63da      	str	r2, [r3, #60]	; 0x3c

      status = HAL_TIMEOUT;
 8002494:	2303      	movs	r3, #3
 8002496:	73fb      	strb	r3, [r7, #15]
      break;
 8002498:	e006      	b.n	80024a8 <HAL_DCMI_Stop+0x74>
    }
  }
  while((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0301 	and.w	r3, r3, #1
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d1ea      	bne.n	800247e <HAL_DCMI_Stop+0x4a>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80024b6:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  HAL_DMA_Abort(hdcmi->DMA_Handle);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024bc:	4618      	mov	r0, r3
 80024be:	f000 fb2f 	bl	8002b20 <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2201      	movs	r2, #1
 80024ce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Return function status */
  return status;
 80024da:	7bfb      	ldrb	r3, [r7, #15]
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3710      	adds	r7, #16
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	20000000 	.word	0x20000000
 80024e8:	92492493 	.word	0x92492493

080024ec <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	691b      	ldr	r3, [r3, #16]
 80024fa:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f003 0304 	and.w	r3, r3, #4
 8002502:	2b00      	cmp	r3, #0
 8002504:	d016      	beq.n	8002534 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2204      	movs	r2, #4
 800250c:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002512:	f043 0202 	orr.w	r2, r3, #2
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2204      	movs	r2, #4
 800251e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    
    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002526:	4a2f      	ldr	r2, [pc, #188]	; (80025e4 <HAL_DCMI_IRQHandler+0xf8>)
 8002528:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800252e:	4618      	mov	r0, r3
 8002530:	f000 fb66 	bl	8002c00 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f003 0302 	and.w	r3, r3, #2
 800253a:	2b00      	cmp	r3, #0
 800253c:	d016      	beq.n	800256c <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	2202      	movs	r2, #2
 8002544:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800254a:	f043 0201 	orr.w	r2, r3, #1
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2204      	movs	r2, #4
 8002556:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    
    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800255e:	4a21      	ldr	r2, [pc, #132]	; (80025e4 <HAL_DCMI_IRQHandler+0xf8>)
 8002560:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002566:	4618      	mov	r0, r3
 8002568:	f000 fb4a 	bl	8002c00 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f003 0310 	and.w	r3, r3, #16
 8002572:	2b00      	cmp	r3, #0
 8002574:	d006      	beq.n	8002584 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	2210      	movs	r2, #16
 800257c:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else  
    HAL_DCMI_LineEventCallback(hdcmi);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f000 f83c 	bl	80025fc <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */     
  }
  /* VSYNC interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f003 0308 	and.w	r3, r3, #8
 800258a:	2b00      	cmp	r3, #0
 800258c:	d006      	beq.n	800259c <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2208      	movs	r2, #8
 8002594:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else  
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f000 f83a 	bl	8002610 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */ 
  }
  /* FRAME interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d019      	beq.n	80025da <HAL_DCMI_IRQHandler+0xee>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0302 	and.w	r3, r3, #2
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d107      	bne.n	80025c4 <HAL_DCMI_IRQHandler+0xd8>
    { 
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	68da      	ldr	r2, [r3, #12]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f022 021e 	bic.w	r2, r2, #30
 80025c2:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	68da      	ldr	r2, [r3, #12]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f022 0201 	bic.w	r2, r2, #1
 80025d2:	60da      	str	r2, [r3, #12]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else  
    HAL_DCMI_FrameEventCallback(hdcmi);
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f7ff f807 	bl	80015e8 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */      
  }
}
 80025da:	bf00      	nop
 80025dc:	3710      	adds	r7, #16
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	0800274f 	.word	0x0800274f

080025e8 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 80025f0:	bf00      	nop
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8002604:	bf00      	nop
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 8002618:	bf00      	nop
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800262c:	2300      	movs	r3, #0
 800262e:	60fb      	str	r3, [r7, #12]
 
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002634:	60bb      	str	r3, [r7, #8]
  
  if(hdcmi->XferCount != 0U)
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800263a:	2b00      	cmp	r3, #0
 800263c:	d043      	beq.n	80026c6 <DCMI_DMAXferCplt+0xa2>
  {
    /* Update memory 0 address location */
    tmp = ((hdcmi->DMA_Handle->Instance->CR) & DMA_SxCR_CT);
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800264a:	60fb      	str	r3, [r7, #12]
    if(((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002650:	f003 0301 	and.w	r3, r3, #1
 8002654:	2b00      	cmp	r3, #0
 8002656:	d118      	bne.n	800268a <DCMI_DMAXferCplt+0x66>
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d015      	beq.n	800268a <DCMI_DMAXferCplt+0x66>
    {
      tmp = hdcmi->DMA_Handle->Instance->M0AR;
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY0);
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002670:	00da      	lsls	r2, r3, #3
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	4413      	add	r3, r2
 8002676:	2200      	movs	r2, #0
 8002678:	4619      	mov	r1, r3
 800267a:	f001 fe95 	bl	80043a8 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002682:	1e5a      	subs	r2, r3, #1
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	629a      	str	r2, [r3, #40]	; 0x28
 8002688:	e044      	b.n	8002714 <DCMI_DMAXferCplt+0xf0>
    }
    /* Update memory 1 address location */
    else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d13c      	bne.n	8002714 <DCMI_DMAXferCplt+0xf0>
    {
      tmp = hdcmi->DMA_Handle->Instance->M1AR;
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	691b      	ldr	r3, [r3, #16]
 80026a2:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY1);
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ac:	00da      	lsls	r2, r3, #3
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	4413      	add	r3, r2
 80026b2:	2201      	movs	r2, #1
 80026b4:	4619      	mov	r1, r3
 80026b6:	f001 fe77 	bl	80043a8 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026be:	1e5a      	subs	r2, r3, #1
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	629a      	str	r2, [r3, #40]	; 0x28
 80026c4:	e026      	b.n	8002714 <DCMI_DMAXferCplt+0xf0>
    }
  }
  /* Update memory 0 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) != 0U)
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d006      	beq.n	80026e4 <DCMI_DMAXferCplt+0xc0>
  {
    hdcmi->DMA_Handle->Instance->M0AR = hdcmi->pBuffPtr;
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	68ba      	ldr	r2, [r7, #8]
 80026de:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80026e0:	60da      	str	r2, [r3, #12]
 80026e2:	e017      	b.n	8002714 <DCMI_DMAXferCplt+0xf0>
  }
  /* Update memory 1 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d10f      	bne.n	8002714 <DCMI_DMAXferCplt+0xf0>
  {
    tmp = hdcmi->pBuffPtr;
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026f8:	60fb      	str	r3, [r7, #12]
    hdcmi->DMA_Handle->Instance->M1AR = (tmp + (4U*hdcmi->XferSize));
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026fe:	0099      	lsls	r1, r3, #2
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	68fa      	ldr	r2, [r7, #12]
 8002708:	440a      	add	r2, r1
 800270a:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	629a      	str	r2, [r3, #40]	; 0x28
  }
  
  /* Check if the frame is transferred */
  if(hdcmi->XferCount == hdcmi->XferTransferNumber)
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271c:	429a      	cmp	r2, r3
 800271e:	d112      	bne.n	8002746 <DCMI_DMAXferCplt+0x122>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	68da      	ldr	r2, [r3, #12]
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f042 0201 	orr.w	r2, r2, #1
 800272e:	60da      	str	r2, [r3, #12]
    
    /* When snapshot mode, set dcmi state to ready */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0302 	and.w	r3, r3, #2
 800273a:	2b02      	cmp	r3, #2
 800273c:	d103      	bne.n	8002746 <DCMI_DMAXferCplt+0x122>
    {  
      hdcmi->State= HAL_DCMI_STATE_READY;
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	2201      	movs	r2, #1
 8002742:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }
}
 8002746:	bf00      	nop
 8002748:	3710      	adds	r7, #16
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}

0800274e <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 800274e:	b580      	push	{r7, lr}
 8002750:	b084      	sub	sp, #16
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800275a:	60fb      	str	r3, [r7, #12]
  
  if(hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002762:	2b02      	cmp	r3, #2
 8002764:	d003      	beq.n	800276e <DCMI_DMAError+0x20>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2201      	movs	r2, #1
 800276a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI error callback*/
    hdcmi->ErrorCallback(hdcmi);
#else  
  HAL_DCMI_ErrorCallback(hdcmi);
 800276e:	68f8      	ldr	r0, [r7, #12]
 8002770:	f7ff ff3a 	bl	80025e8 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */   

}
 8002774:	bf00      	nop
 8002776:	3710      	adds	r7, #16
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d101      	bne.n	800278e <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e05f      	b.n	800284e <HAL_DCMI_Init+0xd2>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002794:	b2db      	uxtb	r3, r3
 8002796:	2b00      	cmp	r3, #0
 8002798:	d109      	bne.n	80027ae <HAL_DCMI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f7ff f85a 	bl	800185c <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
    HAL_DCMI_MspInit(hdcmi);
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f7ff f857 	bl	800185c <HAL_DCMI_MspInit>
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2202      	movs	r2, #2
 80027b2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	6812      	ldr	r2, [r2, #0]
 80027c0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80027c4:	f023 0308 	bic.w	r3, r3, #8
 80027c8:	6013      	str	r3, [r2, #0]
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                           | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                           );
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	6819      	ldr	r1, [r3, #0]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	685a      	ldr	r2, [r3, #4]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	695b      	ldr	r3, [r3, #20]
 80027d8:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80027de:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	691b      	ldr	r3, [r3, #16]
 80027e4:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80027ea:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	699b      	ldr	r3, [r3, #24]
 80027f0:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80027f6:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	430a      	orrs	r2, r1
 80027fe:	601a      	str	r2, [r3, #0]
                                     | hdcmi->Init.ByteSelectMode |\
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
                                     hdcmi->Init.LineSelectStart
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                                     );
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	2b10      	cmp	r3, #16
 8002806:	d112      	bne.n	800282e <HAL_DCMI_Init+0xb2>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	7f1b      	ldrb	r3, [r3, #28]
 800280c:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	7f5b      	ldrb	r3, [r3, #29]
 8002812:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8002814:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	7f9b      	ldrb	r3, [r3, #30]
 800281a:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 800281c:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_POSITION_ESCR_FEC));
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	7fdb      	ldrb	r3, [r3, #31]
 8002824:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 800282a:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 800282c:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	68da      	ldr	r2, [r3, #12]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f042 021e 	orr.w	r2, r2, #30
 800283c:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2201      	movs	r2, #1
 8002848:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  return HAL_OK;
 800284c:	2300      	movs	r3, #0
}
 800284e:	4618      	mov	r0, r3
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
	...

08002858 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b086      	sub	sp, #24
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002860:	2300      	movs	r3, #0
 8002862:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002864:	f7ff fc34 	bl	80020d0 <HAL_GetTick>
 8002868:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d101      	bne.n	8002874 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e099      	b.n	80029a8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2202      	movs	r2, #2
 8002878:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f022 0201 	bic.w	r2, r2, #1
 8002892:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002894:	e00f      	b.n	80028b6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002896:	f7ff fc1b 	bl	80020d0 <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	2b05      	cmp	r3, #5
 80028a2:	d908      	bls.n	80028b6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2220      	movs	r2, #32
 80028a8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2203      	movs	r2, #3
 80028ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e078      	b.n	80029a8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0301 	and.w	r3, r3, #1
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d1e8      	bne.n	8002896 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80028cc:	697a      	ldr	r2, [r7, #20]
 80028ce:	4b38      	ldr	r3, [pc, #224]	; (80029b0 <HAL_DMA_Init+0x158>)
 80028d0:	4013      	ands	r3, r2
 80028d2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685a      	ldr	r2, [r3, #4]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	691b      	ldr	r3, [r3, #16]
 80028e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	699b      	ldr	r3, [r3, #24]
 80028f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6a1b      	ldr	r3, [r3, #32]
 8002900:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002902:	697a      	ldr	r2, [r7, #20]
 8002904:	4313      	orrs	r3, r2
 8002906:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290c:	2b04      	cmp	r3, #4
 800290e:	d107      	bne.n	8002920 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002918:	4313      	orrs	r3, r2
 800291a:	697a      	ldr	r2, [r7, #20]
 800291c:	4313      	orrs	r3, r2
 800291e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	697a      	ldr	r2, [r7, #20]
 8002926:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	695b      	ldr	r3, [r3, #20]
 800292e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	f023 0307 	bic.w	r3, r3, #7
 8002936:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293c:	697a      	ldr	r2, [r7, #20]
 800293e:	4313      	orrs	r3, r2
 8002940:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002946:	2b04      	cmp	r3, #4
 8002948:	d117      	bne.n	800297a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800294e:	697a      	ldr	r2, [r7, #20]
 8002950:	4313      	orrs	r3, r2
 8002952:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002958:	2b00      	cmp	r3, #0
 800295a:	d00e      	beq.n	800297a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f000 fb5f 	bl	8003020 <DMA_CheckFifoParam>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d008      	beq.n	800297a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2240      	movs	r2, #64	; 0x40
 800296c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2201      	movs	r2, #1
 8002972:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002976:	2301      	movs	r3, #1
 8002978:	e016      	b.n	80029a8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	697a      	ldr	r2, [r7, #20]
 8002980:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f000 fb16 	bl	8002fb4 <DMA_CalcBaseAndBitshift>
 8002988:	4603      	mov	r3, r0
 800298a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002990:	223f      	movs	r2, #63	; 0x3f
 8002992:	409a      	lsls	r2, r3
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2201      	movs	r2, #1
 80029a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80029a6:	2300      	movs	r3, #0
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3718      	adds	r7, #24
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	f010803f 	.word	0xf010803f

080029b4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d101      	bne.n	80029c6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e050      	b.n	8002a68 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d101      	bne.n	80029d6 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80029d2:	2302      	movs	r3, #2
 80029d4:	e048      	b.n	8002a68 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f022 0201 	bic.w	r2, r2, #1
 80029e4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2200      	movs	r2, #0
 80029ec:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2200      	movs	r2, #0
 80029f4:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	2200      	movs	r2, #0
 80029fc:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2200      	movs	r2, #0
 8002a04:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2221      	movs	r2, #33	; 0x21
 8002a14:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f000 facc 	bl	8002fb4 <DMA_CalcBaseAndBitshift>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a48:	223f      	movs	r2, #63	; 0x3f
 8002a4a:	409a      	lsls	r2, r3
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002a66:	2300      	movs	r3, #0
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3710      	adds	r7, #16
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b086      	sub	sp, #24
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	60b9      	str	r1, [r7, #8]
 8002a7a:	607a      	str	r2, [r7, #4]
 8002a7c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a86:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d101      	bne.n	8002a96 <HAL_DMA_Start_IT+0x26>
 8002a92:	2302      	movs	r3, #2
 8002a94:	e040      	b.n	8002b18 <HAL_DMA_Start_IT+0xa8>
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2201      	movs	r2, #1
 8002a9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d12f      	bne.n	8002b0a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2202      	movs	r2, #2
 8002aae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	68b9      	ldr	r1, [r7, #8]
 8002abe:	68f8      	ldr	r0, [r7, #12]
 8002ac0:	f000 fa4a 	bl	8002f58 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ac8:	223f      	movs	r2, #63	; 0x3f
 8002aca:	409a      	lsls	r2, r3
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f042 0216 	orr.w	r2, r2, #22
 8002ade:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d007      	beq.n	8002af8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f042 0208 	orr.w	r2, r2, #8
 8002af6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f042 0201 	orr.w	r2, r2, #1
 8002b06:	601a      	str	r2, [r3, #0]
 8002b08:	e005      	b.n	8002b16 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002b12:	2302      	movs	r3, #2
 8002b14:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002b16:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3718      	adds	r7, #24
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b2c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002b2e:	f7ff facf 	bl	80020d0 <HAL_GetTick>
 8002b32:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d008      	beq.n	8002b52 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2280      	movs	r2, #128	; 0x80
 8002b44:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e052      	b.n	8002bf8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f022 0216 	bic.w	r2, r2, #22
 8002b60:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	695a      	ldr	r2, [r3, #20]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b70:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d103      	bne.n	8002b82 <HAL_DMA_Abort+0x62>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d007      	beq.n	8002b92 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f022 0208 	bic.w	r2, r2, #8
 8002b90:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f022 0201 	bic.w	r2, r2, #1
 8002ba0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ba2:	e013      	b.n	8002bcc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ba4:	f7ff fa94 	bl	80020d0 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	2b05      	cmp	r3, #5
 8002bb0:	d90c      	bls.n	8002bcc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2220      	movs	r2, #32
 8002bb6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2203      	movs	r2, #3
 8002bbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e015      	b.n	8002bf8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d1e4      	bne.n	8002ba4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bde:	223f      	movs	r2, #63	; 0x3f
 8002be0:	409a      	lsls	r2, r3
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2201      	movs	r2, #1
 8002bea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002bf6:	2300      	movs	r3, #0
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3710      	adds	r7, #16
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d004      	beq.n	8002c1e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2280      	movs	r2, #128	; 0x80
 8002c18:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e00c      	b.n	8002c38 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2205      	movs	r2, #5
 8002c22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f022 0201 	bic.w	r2, r2, #1
 8002c34:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002c36:	2300      	movs	r3, #0
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b086      	sub	sp, #24
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002c50:	4b8e      	ldr	r3, [pc, #568]	; (8002e8c <HAL_DMA_IRQHandler+0x248>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a8e      	ldr	r2, [pc, #568]	; (8002e90 <HAL_DMA_IRQHandler+0x24c>)
 8002c56:	fba2 2303 	umull	r2, r3, r2, r3
 8002c5a:	0a9b      	lsrs	r3, r3, #10
 8002c5c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c62:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c6e:	2208      	movs	r2, #8
 8002c70:	409a      	lsls	r2, r3
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	4013      	ands	r3, r2
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d01a      	beq.n	8002cb0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0304 	and.w	r3, r3, #4
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d013      	beq.n	8002cb0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f022 0204 	bic.w	r2, r2, #4
 8002c96:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c9c:	2208      	movs	r2, #8
 8002c9e:	409a      	lsls	r2, r3
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ca8:	f043 0201 	orr.w	r2, r3, #1
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	409a      	lsls	r2, r3
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	4013      	ands	r3, r2
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d012      	beq.n	8002ce6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	695b      	ldr	r3, [r3, #20]
 8002cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d00b      	beq.n	8002ce6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	409a      	lsls	r2, r3
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cde:	f043 0202 	orr.w	r2, r3, #2
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cea:	2204      	movs	r2, #4
 8002cec:	409a      	lsls	r2, r3
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d012      	beq.n	8002d1c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0302 	and.w	r3, r3, #2
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d00b      	beq.n	8002d1c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d08:	2204      	movs	r2, #4
 8002d0a:	409a      	lsls	r2, r3
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d14:	f043 0204 	orr.w	r2, r3, #4
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d20:	2210      	movs	r2, #16
 8002d22:	409a      	lsls	r2, r3
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	4013      	ands	r3, r2
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d043      	beq.n	8002db4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0308 	and.w	r3, r3, #8
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d03c      	beq.n	8002db4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d3e:	2210      	movs	r2, #16
 8002d40:	409a      	lsls	r2, r3
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d018      	beq.n	8002d86 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d108      	bne.n	8002d74 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d024      	beq.n	8002db4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	4798      	blx	r3
 8002d72:	e01f      	b.n	8002db4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d01b      	beq.n	8002db4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	4798      	blx	r3
 8002d84:	e016      	b.n	8002db4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d107      	bne.n	8002da4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f022 0208 	bic.w	r2, r2, #8
 8002da2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d003      	beq.n	8002db4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002db8:	2220      	movs	r2, #32
 8002dba:	409a      	lsls	r2, r3
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	f000 808f 	beq.w	8002ee4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0310 	and.w	r3, r3, #16
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	f000 8087 	beq.w	8002ee4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dda:	2220      	movs	r2, #32
 8002ddc:	409a      	lsls	r2, r3
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b05      	cmp	r3, #5
 8002dec:	d136      	bne.n	8002e5c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f022 0216 	bic.w	r2, r2, #22
 8002dfc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	695a      	ldr	r2, [r3, #20]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e0c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d103      	bne.n	8002e1e <HAL_DMA_IRQHandler+0x1da>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d007      	beq.n	8002e2e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f022 0208 	bic.w	r2, r2, #8
 8002e2c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e32:	223f      	movs	r2, #63	; 0x3f
 8002e34:	409a      	lsls	r2, r3
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d07e      	beq.n	8002f50 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	4798      	blx	r3
        }
        return;
 8002e5a:	e079      	b.n	8002f50 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d01d      	beq.n	8002ea6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d10d      	bne.n	8002e94 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d031      	beq.n	8002ee4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	4798      	blx	r3
 8002e88:	e02c      	b.n	8002ee4 <HAL_DMA_IRQHandler+0x2a0>
 8002e8a:	bf00      	nop
 8002e8c:	20000000 	.word	0x20000000
 8002e90:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d023      	beq.n	8002ee4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	4798      	blx	r3
 8002ea4:	e01e      	b.n	8002ee4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d10f      	bne.n	8002ed4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f022 0210 	bic.w	r2, r2, #16
 8002ec2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d003      	beq.n	8002ee4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d032      	beq.n	8002f52 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ef0:	f003 0301 	and.w	r3, r3, #1
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d022      	beq.n	8002f3e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2205      	movs	r2, #5
 8002efc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f022 0201 	bic.w	r2, r2, #1
 8002f0e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	3301      	adds	r3, #1
 8002f14:	60bb      	str	r3, [r7, #8]
 8002f16:	697a      	ldr	r2, [r7, #20]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d307      	bcc.n	8002f2c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0301 	and.w	r3, r3, #1
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d1f2      	bne.n	8002f10 <HAL_DMA_IRQHandler+0x2cc>
 8002f2a:	e000      	b.n	8002f2e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002f2c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2201      	movs	r2, #1
 8002f32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d005      	beq.n	8002f52 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	4798      	blx	r3
 8002f4e:	e000      	b.n	8002f52 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002f50:	bf00      	nop
    }
  }
}
 8002f52:	3718      	adds	r7, #24
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b085      	sub	sp, #20
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	60b9      	str	r1, [r7, #8]
 8002f62:	607a      	str	r2, [r7, #4]
 8002f64:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f74:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	683a      	ldr	r2, [r7, #0]
 8002f7c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	2b40      	cmp	r3, #64	; 0x40
 8002f84:	d108      	bne.n	8002f98 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68ba      	ldr	r2, [r7, #8]
 8002f94:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002f96:	e007      	b.n	8002fa8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	68ba      	ldr	r2, [r7, #8]
 8002f9e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	60da      	str	r2, [r3, #12]
}
 8002fa8:	bf00      	nop
 8002faa:	3714      	adds	r7, #20
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr

08002fb4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b085      	sub	sp, #20
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	3b10      	subs	r3, #16
 8002fc4:	4a14      	ldr	r2, [pc, #80]	; (8003018 <DMA_CalcBaseAndBitshift+0x64>)
 8002fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fca:	091b      	lsrs	r3, r3, #4
 8002fcc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002fce:	4a13      	ldr	r2, [pc, #76]	; (800301c <DMA_CalcBaseAndBitshift+0x68>)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	4413      	add	r3, r2
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2b03      	cmp	r3, #3
 8002fe0:	d909      	bls.n	8002ff6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002fea:	f023 0303 	bic.w	r3, r3, #3
 8002fee:	1d1a      	adds	r2, r3, #4
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	659a      	str	r2, [r3, #88]	; 0x58
 8002ff4:	e007      	b.n	8003006 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002ffe:	f023 0303 	bic.w	r3, r3, #3
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800300a:	4618      	mov	r0, r3
 800300c:	3714      	adds	r7, #20
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	aaaaaaab 	.word	0xaaaaaaab
 800301c:	08008aec 	.word	0x08008aec

08003020 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003020:	b480      	push	{r7}
 8003022:	b085      	sub	sp, #20
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003028:	2300      	movs	r3, #0
 800302a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003030:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	699b      	ldr	r3, [r3, #24]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d11f      	bne.n	800307a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	2b03      	cmp	r3, #3
 800303e:	d856      	bhi.n	80030ee <DMA_CheckFifoParam+0xce>
 8003040:	a201      	add	r2, pc, #4	; (adr r2, 8003048 <DMA_CheckFifoParam+0x28>)
 8003042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003046:	bf00      	nop
 8003048:	08003059 	.word	0x08003059
 800304c:	0800306b 	.word	0x0800306b
 8003050:	08003059 	.word	0x08003059
 8003054:	080030ef 	.word	0x080030ef
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800305c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003060:	2b00      	cmp	r3, #0
 8003062:	d046      	beq.n	80030f2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003068:	e043      	b.n	80030f2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800306e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003072:	d140      	bne.n	80030f6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003078:	e03d      	b.n	80030f6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	699b      	ldr	r3, [r3, #24]
 800307e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003082:	d121      	bne.n	80030c8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	2b03      	cmp	r3, #3
 8003088:	d837      	bhi.n	80030fa <DMA_CheckFifoParam+0xda>
 800308a:	a201      	add	r2, pc, #4	; (adr r2, 8003090 <DMA_CheckFifoParam+0x70>)
 800308c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003090:	080030a1 	.word	0x080030a1
 8003094:	080030a7 	.word	0x080030a7
 8003098:	080030a1 	.word	0x080030a1
 800309c:	080030b9 	.word	0x080030b9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	73fb      	strb	r3, [r7, #15]
      break;
 80030a4:	e030      	b.n	8003108 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d025      	beq.n	80030fe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030b6:	e022      	b.n	80030fe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030bc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80030c0:	d11f      	bne.n	8003102 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80030c6:	e01c      	b.n	8003102 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d903      	bls.n	80030d6 <DMA_CheckFifoParam+0xb6>
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	2b03      	cmp	r3, #3
 80030d2:	d003      	beq.n	80030dc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80030d4:	e018      	b.n	8003108 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	73fb      	strb	r3, [r7, #15]
      break;
 80030da:	e015      	b.n	8003108 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d00e      	beq.n	8003106 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	73fb      	strb	r3, [r7, #15]
      break;
 80030ec:	e00b      	b.n	8003106 <DMA_CheckFifoParam+0xe6>
      break;
 80030ee:	bf00      	nop
 80030f0:	e00a      	b.n	8003108 <DMA_CheckFifoParam+0xe8>
      break;
 80030f2:	bf00      	nop
 80030f4:	e008      	b.n	8003108 <DMA_CheckFifoParam+0xe8>
      break;
 80030f6:	bf00      	nop
 80030f8:	e006      	b.n	8003108 <DMA_CheckFifoParam+0xe8>
      break;
 80030fa:	bf00      	nop
 80030fc:	e004      	b.n	8003108 <DMA_CheckFifoParam+0xe8>
      break;
 80030fe:	bf00      	nop
 8003100:	e002      	b.n	8003108 <DMA_CheckFifoParam+0xe8>
      break;   
 8003102:	bf00      	nop
 8003104:	e000      	b.n	8003108 <DMA_CheckFifoParam+0xe8>
      break;
 8003106:	bf00      	nop
    }
  } 
  
  return status; 
 8003108:	7bfb      	ldrb	r3, [r7, #15]
}
 800310a:	4618      	mov	r0, r3
 800310c:	3714      	adds	r7, #20
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop

08003118 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b086      	sub	sp, #24
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	607a      	str	r2, [r7, #4]
 8003124:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003126:	2300      	movs	r3, #0
 8003128:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	2b80      	cmp	r3, #128	; 0x80
 8003130:	d106      	bne.n	8003140 <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003138:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	f001 b911 	b.w	8004362 <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Check callback functions */
  if ((NULL == hdma->XferCpltCallback) || (NULL == hdma->XferM1CpltCallback) || (NULL == hdma->XferErrorCallback))
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003144:	2b00      	cmp	r3, #0
 8003146:	d007      	beq.n	8003158 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800314c:	2b00      	cmp	r3, #0
 800314e:	d003      	beq.n	8003158 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003154:	2b00      	cmp	r3, #0
 8003156:	d105      	bne.n	8003164 <HAL_DMAEx_MultiBufferStart_IT+0x4c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2240      	movs	r2, #64	; 0x40
 800315c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	f001 b8ff 	b.w	8004362 <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800316a:	2b01      	cmp	r3, #1
 800316c:	d102      	bne.n	8003174 <HAL_DMAEx_MultiBufferStart_IT+0x5c>
 800316e:	2302      	movs	r3, #2
 8003170:	f001 b8f7 	b.w	8004362 <HAL_DMAEx_MultiBufferStart_IT+0x124a>
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003182:	b2db      	uxtb	r3, r3
 8003184:	2b01      	cmp	r3, #1
 8003186:	f041 80e5 	bne.w	8004354 <HAL_DMAEx_MultiBufferStart_IT+0x123c>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2202      	movs	r2, #2
 800318e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2200      	movs	r2, #0
 8003196:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80031a6:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	683a      	ldr	r2, [r7, #0]
 80031ae:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 80031b0:	6a3b      	ldr	r3, [r7, #32]
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	68b9      	ldr	r1, [r7, #8]
 80031b6:	68f8      	ldr	r0, [r7, #12]
 80031b8:	f001 f910 	bl	80043dc <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	461a      	mov	r2, r3
 80031c2:	4b8d      	ldr	r3, [pc, #564]	; (80033f8 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d960      	bls.n	800328a <HAL_DMAEx_MultiBufferStart_IT+0x172>
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a8b      	ldr	r2, [pc, #556]	; (80033fc <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d057      	beq.n	8003282 <HAL_DMAEx_MultiBufferStart_IT+0x16a>
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a8a      	ldr	r2, [pc, #552]	; (8003400 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d050      	beq.n	800327e <HAL_DMAEx_MultiBufferStart_IT+0x166>
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a88      	ldr	r2, [pc, #544]	; (8003404 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d049      	beq.n	800327a <HAL_DMAEx_MultiBufferStart_IT+0x162>
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a87      	ldr	r2, [pc, #540]	; (8003408 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d042      	beq.n	8003276 <HAL_DMAEx_MultiBufferStart_IT+0x15e>
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a85      	ldr	r2, [pc, #532]	; (800340c <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d03a      	beq.n	8003270 <HAL_DMAEx_MultiBufferStart_IT+0x158>
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a84      	ldr	r2, [pc, #528]	; (8003410 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d032      	beq.n	800326a <HAL_DMAEx_MultiBufferStart_IT+0x152>
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a82      	ldr	r2, [pc, #520]	; (8003414 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d02a      	beq.n	8003264 <HAL_DMAEx_MultiBufferStart_IT+0x14c>
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a81      	ldr	r2, [pc, #516]	; (8003418 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d022      	beq.n	800325e <HAL_DMAEx_MultiBufferStart_IT+0x146>
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a7f      	ldr	r2, [pc, #508]	; (800341c <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d01a      	beq.n	8003258 <HAL_DMAEx_MultiBufferStart_IT+0x140>
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a7e      	ldr	r2, [pc, #504]	; (8003420 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d012      	beq.n	8003252 <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a7c      	ldr	r2, [pc, #496]	; (8003424 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d00a      	beq.n	800324c <HAL_DMAEx_MultiBufferStart_IT+0x134>
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a7b      	ldr	r2, [pc, #492]	; (8003428 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d102      	bne.n	8003246 <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 8003240:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003244:	e01e      	b.n	8003284 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8003246:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800324a:	e01b      	b.n	8003284 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800324c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003250:	e018      	b.n	8003284 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8003252:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003256:	e015      	b.n	8003284 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8003258:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800325c:	e012      	b.n	8003284 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800325e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003262:	e00f      	b.n	8003284 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8003264:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003268:	e00c      	b.n	8003284 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800326a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800326e:	e009      	b.n	8003284 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8003270:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003274:	e006      	b.n	8003284 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8003276:	2320      	movs	r3, #32
 8003278:	e004      	b.n	8003284 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800327a:	2320      	movs	r3, #32
 800327c:	e002      	b.n	8003284 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800327e:	2320      	movs	r3, #32
 8003280:	e000      	b.n	8003284 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8003282:	2320      	movs	r3, #32
 8003284:	4a69      	ldr	r2, [pc, #420]	; (800342c <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8003286:	60d3      	str	r3, [r2, #12]
 8003288:	e14f      	b.n	800352a <HAL_DMAEx_MultiBufferStart_IT+0x412>
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	461a      	mov	r2, r3
 8003290:	4b67      	ldr	r3, [pc, #412]	; (8003430 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8003292:	429a      	cmp	r2, r3
 8003294:	d960      	bls.n	8003358 <HAL_DMAEx_MultiBufferStart_IT+0x240>
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a58      	ldr	r2, [pc, #352]	; (80033fc <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d057      	beq.n	8003350 <HAL_DMAEx_MultiBufferStart_IT+0x238>
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a56      	ldr	r2, [pc, #344]	; (8003400 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d050      	beq.n	800334c <HAL_DMAEx_MultiBufferStart_IT+0x234>
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a55      	ldr	r2, [pc, #340]	; (8003404 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d049      	beq.n	8003348 <HAL_DMAEx_MultiBufferStart_IT+0x230>
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a53      	ldr	r2, [pc, #332]	; (8003408 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d042      	beq.n	8003344 <HAL_DMAEx_MultiBufferStart_IT+0x22c>
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a52      	ldr	r2, [pc, #328]	; (800340c <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d03a      	beq.n	800333e <HAL_DMAEx_MultiBufferStart_IT+0x226>
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a50      	ldr	r2, [pc, #320]	; (8003410 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d032      	beq.n	8003338 <HAL_DMAEx_MultiBufferStart_IT+0x220>
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a4f      	ldr	r2, [pc, #316]	; (8003414 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d02a      	beq.n	8003332 <HAL_DMAEx_MultiBufferStart_IT+0x21a>
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a4d      	ldr	r2, [pc, #308]	; (8003418 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d022      	beq.n	800332c <HAL_DMAEx_MultiBufferStart_IT+0x214>
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a4c      	ldr	r2, [pc, #304]	; (800341c <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d01a      	beq.n	8003326 <HAL_DMAEx_MultiBufferStart_IT+0x20e>
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a4a      	ldr	r2, [pc, #296]	; (8003420 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d012      	beq.n	8003320 <HAL_DMAEx_MultiBufferStart_IT+0x208>
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a49      	ldr	r2, [pc, #292]	; (8003424 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d00a      	beq.n	800331a <HAL_DMAEx_MultiBufferStart_IT+0x202>
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a47      	ldr	r2, [pc, #284]	; (8003428 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d102      	bne.n	8003314 <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 800330e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003312:	e01e      	b.n	8003352 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003314:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003318:	e01b      	b.n	8003352 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800331a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800331e:	e018      	b.n	8003352 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003320:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003324:	e015      	b.n	8003352 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003326:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800332a:	e012      	b.n	8003352 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800332c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003330:	e00f      	b.n	8003352 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003332:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003336:	e00c      	b.n	8003352 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003338:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800333c:	e009      	b.n	8003352 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800333e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003342:	e006      	b.n	8003352 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003344:	2320      	movs	r3, #32
 8003346:	e004      	b.n	8003352 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003348:	2320      	movs	r3, #32
 800334a:	e002      	b.n	8003352 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800334c:	2320      	movs	r3, #32
 800334e:	e000      	b.n	8003352 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003350:	2320      	movs	r3, #32
 8003352:	4a36      	ldr	r2, [pc, #216]	; (800342c <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8003354:	6093      	str	r3, [r2, #8]
 8003356:	e0e8      	b.n	800352a <HAL_DMAEx_MultiBufferStart_IT+0x412>
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	461a      	mov	r2, r3
 800335e:	4b35      	ldr	r3, [pc, #212]	; (8003434 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8003360:	429a      	cmp	r2, r3
 8003362:	f240 8082 	bls.w	800346a <HAL_DMAEx_MultiBufferStart_IT+0x352>
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a24      	ldr	r2, [pc, #144]	; (80033fc <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d078      	beq.n	8003462 <HAL_DMAEx_MultiBufferStart_IT+0x34a>
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a22      	ldr	r2, [pc, #136]	; (8003400 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d071      	beq.n	800345e <HAL_DMAEx_MultiBufferStart_IT+0x346>
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a21      	ldr	r2, [pc, #132]	; (8003404 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d06a      	beq.n	800345a <HAL_DMAEx_MultiBufferStart_IT+0x342>
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a1f      	ldr	r2, [pc, #124]	; (8003408 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d063      	beq.n	8003456 <HAL_DMAEx_MultiBufferStart_IT+0x33e>
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a1e      	ldr	r2, [pc, #120]	; (800340c <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d05b      	beq.n	8003450 <HAL_DMAEx_MultiBufferStart_IT+0x338>
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a1c      	ldr	r2, [pc, #112]	; (8003410 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d053      	beq.n	800344a <HAL_DMAEx_MultiBufferStart_IT+0x332>
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a1b      	ldr	r2, [pc, #108]	; (8003414 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d04b      	beq.n	8003444 <HAL_DMAEx_MultiBufferStart_IT+0x32c>
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a19      	ldr	r2, [pc, #100]	; (8003418 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d043      	beq.n	800343e <HAL_DMAEx_MultiBufferStart_IT+0x326>
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a18      	ldr	r2, [pc, #96]	; (800341c <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d03b      	beq.n	8003438 <HAL_DMAEx_MultiBufferStart_IT+0x320>
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a16      	ldr	r2, [pc, #88]	; (8003420 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d012      	beq.n	80033f0 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a15      	ldr	r2, [pc, #84]	; (8003424 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d00a      	beq.n	80033ea <HAL_DMAEx_MultiBufferStart_IT+0x2d2>
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a13      	ldr	r2, [pc, #76]	; (8003428 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d102      	bne.n	80033e4 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>
 80033de:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80033e2:	e03f      	b.n	8003464 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80033e4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80033e8:	e03c      	b.n	8003464 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80033ea:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80033ee:	e039      	b.n	8003464 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80033f0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80033f4:	e036      	b.n	8003464 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80033f6:	bf00      	nop
 80033f8:	40026458 	.word	0x40026458
 80033fc:	40026010 	.word	0x40026010
 8003400:	40026410 	.word	0x40026410
 8003404:	40026070 	.word	0x40026070
 8003408:	40026470 	.word	0x40026470
 800340c:	40026028 	.word	0x40026028
 8003410:	40026428 	.word	0x40026428
 8003414:	40026088 	.word	0x40026088
 8003418:	40026488 	.word	0x40026488
 800341c:	40026040 	.word	0x40026040
 8003420:	40026440 	.word	0x40026440
 8003424:	400260a0 	.word	0x400260a0
 8003428:	400264a0 	.word	0x400264a0
 800342c:	40026400 	.word	0x40026400
 8003430:	400260b8 	.word	0x400260b8
 8003434:	40026058 	.word	0x40026058
 8003438:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800343c:	e012      	b.n	8003464 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 800343e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003442:	e00f      	b.n	8003464 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8003444:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003448:	e00c      	b.n	8003464 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 800344a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800344e:	e009      	b.n	8003464 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8003450:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003454:	e006      	b.n	8003464 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8003456:	2320      	movs	r3, #32
 8003458:	e004      	b.n	8003464 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 800345a:	2320      	movs	r3, #32
 800345c:	e002      	b.n	8003464 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 800345e:	2320      	movs	r3, #32
 8003460:	e000      	b.n	8003464 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8003462:	2320      	movs	r3, #32
 8003464:	4a8c      	ldr	r2, [pc, #560]	; (8003698 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 8003466:	60d3      	str	r3, [r2, #12]
 8003468:	e05f      	b.n	800352a <HAL_DMAEx_MultiBufferStart_IT+0x412>
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a8b      	ldr	r2, [pc, #556]	; (800369c <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d057      	beq.n	8003524 <HAL_DMAEx_MultiBufferStart_IT+0x40c>
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a89      	ldr	r2, [pc, #548]	; (80036a0 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d050      	beq.n	8003520 <HAL_DMAEx_MultiBufferStart_IT+0x408>
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a88      	ldr	r2, [pc, #544]	; (80036a4 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d049      	beq.n	800351c <HAL_DMAEx_MultiBufferStart_IT+0x404>
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a86      	ldr	r2, [pc, #536]	; (80036a8 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d042      	beq.n	8003518 <HAL_DMAEx_MultiBufferStart_IT+0x400>
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a85      	ldr	r2, [pc, #532]	; (80036ac <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d03a      	beq.n	8003512 <HAL_DMAEx_MultiBufferStart_IT+0x3fa>
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a83      	ldr	r2, [pc, #524]	; (80036b0 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d032      	beq.n	800350c <HAL_DMAEx_MultiBufferStart_IT+0x3f4>
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a82      	ldr	r2, [pc, #520]	; (80036b4 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d02a      	beq.n	8003506 <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a80      	ldr	r2, [pc, #512]	; (80036b8 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d022      	beq.n	8003500 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a7f      	ldr	r2, [pc, #508]	; (80036bc <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d01a      	beq.n	80034fa <HAL_DMAEx_MultiBufferStart_IT+0x3e2>
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a7d      	ldr	r2, [pc, #500]	; (80036c0 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d012      	beq.n	80034f4 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a7c      	ldr	r2, [pc, #496]	; (80036c4 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d00a      	beq.n	80034ee <HAL_DMAEx_MultiBufferStart_IT+0x3d6>
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a7a      	ldr	r2, [pc, #488]	; (80036c8 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d102      	bne.n	80034e8 <HAL_DMAEx_MultiBufferStart_IT+0x3d0>
 80034e2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80034e6:	e01e      	b.n	8003526 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80034e8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80034ec:	e01b      	b.n	8003526 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80034ee:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80034f2:	e018      	b.n	8003526 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80034f4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80034f8:	e015      	b.n	8003526 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80034fa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80034fe:	e012      	b.n	8003526 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8003500:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003504:	e00f      	b.n	8003526 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8003506:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800350a:	e00c      	b.n	8003526 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800350c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003510:	e009      	b.n	8003526 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8003512:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003516:	e006      	b.n	8003526 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8003518:	2320      	movs	r3, #32
 800351a:	e004      	b.n	8003526 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800351c:	2320      	movs	r3, #32
 800351e:	e002      	b.n	8003526 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8003520:	2320      	movs	r3, #32
 8003522:	e000      	b.n	8003526 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8003524:	2320      	movs	r3, #32
 8003526:	4a5c      	ldr	r2, [pc, #368]	; (8003698 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 8003528:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	461a      	mov	r2, r3
 8003530:	4b66      	ldr	r3, [pc, #408]	; (80036cc <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 8003532:	429a      	cmp	r2, r3
 8003534:	d960      	bls.n	80035f8 <HAL_DMAEx_MultiBufferStart_IT+0x4e0>
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a58      	ldr	r2, [pc, #352]	; (800369c <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d057      	beq.n	80035f0 <HAL_DMAEx_MultiBufferStart_IT+0x4d8>
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a56      	ldr	r2, [pc, #344]	; (80036a0 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d050      	beq.n	80035ec <HAL_DMAEx_MultiBufferStart_IT+0x4d4>
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a55      	ldr	r2, [pc, #340]	; (80036a4 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d049      	beq.n	80035e8 <HAL_DMAEx_MultiBufferStart_IT+0x4d0>
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a53      	ldr	r2, [pc, #332]	; (80036a8 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d042      	beq.n	80035e4 <HAL_DMAEx_MultiBufferStart_IT+0x4cc>
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a52      	ldr	r2, [pc, #328]	; (80036ac <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d03a      	beq.n	80035de <HAL_DMAEx_MultiBufferStart_IT+0x4c6>
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a50      	ldr	r2, [pc, #320]	; (80036b0 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d032      	beq.n	80035d8 <HAL_DMAEx_MultiBufferStart_IT+0x4c0>
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a4f      	ldr	r2, [pc, #316]	; (80036b4 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d02a      	beq.n	80035d2 <HAL_DMAEx_MultiBufferStart_IT+0x4ba>
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a4d      	ldr	r2, [pc, #308]	; (80036b8 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d022      	beq.n	80035cc <HAL_DMAEx_MultiBufferStart_IT+0x4b4>
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a4c      	ldr	r2, [pc, #304]	; (80036bc <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d01a      	beq.n	80035c6 <HAL_DMAEx_MultiBufferStart_IT+0x4ae>
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a4a      	ldr	r2, [pc, #296]	; (80036c0 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d012      	beq.n	80035c0 <HAL_DMAEx_MultiBufferStart_IT+0x4a8>
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a49      	ldr	r2, [pc, #292]	; (80036c4 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d00a      	beq.n	80035ba <HAL_DMAEx_MultiBufferStart_IT+0x4a2>
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a47      	ldr	r2, [pc, #284]	; (80036c8 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d102      	bne.n	80035b4 <HAL_DMAEx_MultiBufferStart_IT+0x49c>
 80035ae:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80035b2:	e01e      	b.n	80035f2 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80035b4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80035b8:	e01b      	b.n	80035f2 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80035ba:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80035be:	e018      	b.n	80035f2 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80035c0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80035c4:	e015      	b.n	80035f2 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80035c6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80035ca:	e012      	b.n	80035f2 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80035cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035d0:	e00f      	b.n	80035f2 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80035d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035d6:	e00c      	b.n	80035f2 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80035d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035dc:	e009      	b.n	80035f2 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80035de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035e2:	e006      	b.n	80035f2 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80035e4:	2310      	movs	r3, #16
 80035e6:	e004      	b.n	80035f2 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80035e8:	2310      	movs	r3, #16
 80035ea:	e002      	b.n	80035f2 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80035ec:	2310      	movs	r3, #16
 80035ee:	e000      	b.n	80035f2 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80035f0:	2310      	movs	r3, #16
 80035f2:	4a37      	ldr	r2, [pc, #220]	; (80036d0 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 80035f4:	60d3      	str	r3, [r2, #12]
 80035f6:	e14f      	b.n	8003898 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	461a      	mov	r2, r3
 80035fe:	4b35      	ldr	r3, [pc, #212]	; (80036d4 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8003600:	429a      	cmp	r2, r3
 8003602:	f240 8082 	bls.w	800370a <HAL_DMAEx_MultiBufferStart_IT+0x5f2>
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a24      	ldr	r2, [pc, #144]	; (800369c <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d078      	beq.n	8003702 <HAL_DMAEx_MultiBufferStart_IT+0x5ea>
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a22      	ldr	r2, [pc, #136]	; (80036a0 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d071      	beq.n	80036fe <HAL_DMAEx_MultiBufferStart_IT+0x5e6>
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a21      	ldr	r2, [pc, #132]	; (80036a4 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d06a      	beq.n	80036fa <HAL_DMAEx_MultiBufferStart_IT+0x5e2>
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a1f      	ldr	r2, [pc, #124]	; (80036a8 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d063      	beq.n	80036f6 <HAL_DMAEx_MultiBufferStart_IT+0x5de>
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a1e      	ldr	r2, [pc, #120]	; (80036ac <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d05b      	beq.n	80036f0 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a1c      	ldr	r2, [pc, #112]	; (80036b0 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d053      	beq.n	80036ea <HAL_DMAEx_MultiBufferStart_IT+0x5d2>
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a1b      	ldr	r2, [pc, #108]	; (80036b4 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d04b      	beq.n	80036e4 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a19      	ldr	r2, [pc, #100]	; (80036b8 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d043      	beq.n	80036de <HAL_DMAEx_MultiBufferStart_IT+0x5c6>
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a18      	ldr	r2, [pc, #96]	; (80036bc <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d03b      	beq.n	80036d8 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a16      	ldr	r2, [pc, #88]	; (80036c0 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d012      	beq.n	8003690 <HAL_DMAEx_MultiBufferStart_IT+0x578>
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a15      	ldr	r2, [pc, #84]	; (80036c4 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d00a      	beq.n	800368a <HAL_DMAEx_MultiBufferStart_IT+0x572>
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a13      	ldr	r2, [pc, #76]	; (80036c8 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d102      	bne.n	8003684 <HAL_DMAEx_MultiBufferStart_IT+0x56c>
 800367e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003682:	e03f      	b.n	8003704 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8003684:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003688:	e03c      	b.n	8003704 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800368a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800368e:	e039      	b.n	8003704 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8003690:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003694:	e036      	b.n	8003704 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8003696:	bf00      	nop
 8003698:	40026000 	.word	0x40026000
 800369c:	40026010 	.word	0x40026010
 80036a0:	40026410 	.word	0x40026410
 80036a4:	40026070 	.word	0x40026070
 80036a8:	40026470 	.word	0x40026470
 80036ac:	40026028 	.word	0x40026028
 80036b0:	40026428 	.word	0x40026428
 80036b4:	40026088 	.word	0x40026088
 80036b8:	40026488 	.word	0x40026488
 80036bc:	40026040 	.word	0x40026040
 80036c0:	40026440 	.word	0x40026440
 80036c4:	400260a0 	.word	0x400260a0
 80036c8:	400264a0 	.word	0x400264a0
 80036cc:	40026458 	.word	0x40026458
 80036d0:	40026400 	.word	0x40026400
 80036d4:	400260b8 	.word	0x400260b8
 80036d8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80036dc:	e012      	b.n	8003704 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80036de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036e2:	e00f      	b.n	8003704 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80036e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036e8:	e00c      	b.n	8003704 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80036ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036ee:	e009      	b.n	8003704 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80036f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036f4:	e006      	b.n	8003704 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80036f6:	2310      	movs	r3, #16
 80036f8:	e004      	b.n	8003704 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80036fa:	2310      	movs	r3, #16
 80036fc:	e002      	b.n	8003704 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80036fe:	2310      	movs	r3, #16
 8003700:	e000      	b.n	8003704 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8003702:	2310      	movs	r3, #16
 8003704:	4a8c      	ldr	r2, [pc, #560]	; (8003938 <HAL_DMAEx_MultiBufferStart_IT+0x820>)
 8003706:	6093      	str	r3, [r2, #8]
 8003708:	e0c6      	b.n	8003898 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	461a      	mov	r2, r3
 8003710:	4b8a      	ldr	r3, [pc, #552]	; (800393c <HAL_DMAEx_MultiBufferStart_IT+0x824>)
 8003712:	429a      	cmp	r2, r3
 8003714:	d960      	bls.n	80037d8 <HAL_DMAEx_MultiBufferStart_IT+0x6c0>
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a89      	ldr	r2, [pc, #548]	; (8003940 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d057      	beq.n	80037d0 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a87      	ldr	r2, [pc, #540]	; (8003944 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d050      	beq.n	80037cc <HAL_DMAEx_MultiBufferStart_IT+0x6b4>
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a86      	ldr	r2, [pc, #536]	; (8003948 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d049      	beq.n	80037c8 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a84      	ldr	r2, [pc, #528]	; (800394c <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d042      	beq.n	80037c4 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a83      	ldr	r2, [pc, #524]	; (8003950 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d03a      	beq.n	80037be <HAL_DMAEx_MultiBufferStart_IT+0x6a6>
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a81      	ldr	r2, [pc, #516]	; (8003954 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d032      	beq.n	80037b8 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a80      	ldr	r2, [pc, #512]	; (8003958 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d02a      	beq.n	80037b2 <HAL_DMAEx_MultiBufferStart_IT+0x69a>
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a7e      	ldr	r2, [pc, #504]	; (800395c <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d022      	beq.n	80037ac <HAL_DMAEx_MultiBufferStart_IT+0x694>
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a7d      	ldr	r2, [pc, #500]	; (8003960 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d01a      	beq.n	80037a6 <HAL_DMAEx_MultiBufferStart_IT+0x68e>
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a7b      	ldr	r2, [pc, #492]	; (8003964 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d012      	beq.n	80037a0 <HAL_DMAEx_MultiBufferStart_IT+0x688>
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a7a      	ldr	r2, [pc, #488]	; (8003968 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d00a      	beq.n	800379a <HAL_DMAEx_MultiBufferStart_IT+0x682>
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a78      	ldr	r2, [pc, #480]	; (800396c <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d102      	bne.n	8003794 <HAL_DMAEx_MultiBufferStart_IT+0x67c>
 800378e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003792:	e01e      	b.n	80037d2 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8003794:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003798:	e01b      	b.n	80037d2 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 800379a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800379e:	e018      	b.n	80037d2 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80037a0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80037a4:	e015      	b.n	80037d2 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80037a6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80037aa:	e012      	b.n	80037d2 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80037ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037b0:	e00f      	b.n	80037d2 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80037b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037b6:	e00c      	b.n	80037d2 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80037b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037bc:	e009      	b.n	80037d2 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80037be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037c2:	e006      	b.n	80037d2 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80037c4:	2310      	movs	r3, #16
 80037c6:	e004      	b.n	80037d2 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80037c8:	2310      	movs	r3, #16
 80037ca:	e002      	b.n	80037d2 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80037cc:	2310      	movs	r3, #16
 80037ce:	e000      	b.n	80037d2 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80037d0:	2310      	movs	r3, #16
 80037d2:	4a67      	ldr	r2, [pc, #412]	; (8003970 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 80037d4:	60d3      	str	r3, [r2, #12]
 80037d6:	e05f      	b.n	8003898 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a58      	ldr	r2, [pc, #352]	; (8003940 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d057      	beq.n	8003892 <HAL_DMAEx_MultiBufferStart_IT+0x77a>
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a57      	ldr	r2, [pc, #348]	; (8003944 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d050      	beq.n	800388e <HAL_DMAEx_MultiBufferStart_IT+0x776>
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a55      	ldr	r2, [pc, #340]	; (8003948 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d049      	beq.n	800388a <HAL_DMAEx_MultiBufferStart_IT+0x772>
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a54      	ldr	r2, [pc, #336]	; (800394c <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d042      	beq.n	8003886 <HAL_DMAEx_MultiBufferStart_IT+0x76e>
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a52      	ldr	r2, [pc, #328]	; (8003950 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d03a      	beq.n	8003880 <HAL_DMAEx_MultiBufferStart_IT+0x768>
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a51      	ldr	r2, [pc, #324]	; (8003954 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d032      	beq.n	800387a <HAL_DMAEx_MultiBufferStart_IT+0x762>
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a4f      	ldr	r2, [pc, #316]	; (8003958 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d02a      	beq.n	8003874 <HAL_DMAEx_MultiBufferStart_IT+0x75c>
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a4e      	ldr	r2, [pc, #312]	; (800395c <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d022      	beq.n	800386e <HAL_DMAEx_MultiBufferStart_IT+0x756>
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a4c      	ldr	r2, [pc, #304]	; (8003960 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d01a      	beq.n	8003868 <HAL_DMAEx_MultiBufferStart_IT+0x750>
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a4b      	ldr	r2, [pc, #300]	; (8003964 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d012      	beq.n	8003862 <HAL_DMAEx_MultiBufferStart_IT+0x74a>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a49      	ldr	r2, [pc, #292]	; (8003968 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d00a      	beq.n	800385c <HAL_DMAEx_MultiBufferStart_IT+0x744>
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a48      	ldr	r2, [pc, #288]	; (800396c <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d102      	bne.n	8003856 <HAL_DMAEx_MultiBufferStart_IT+0x73e>
 8003850:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003854:	e01e      	b.n	8003894 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8003856:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800385a:	e01b      	b.n	8003894 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 800385c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003860:	e018      	b.n	8003894 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8003862:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003866:	e015      	b.n	8003894 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8003868:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800386c:	e012      	b.n	8003894 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 800386e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003872:	e00f      	b.n	8003894 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8003874:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003878:	e00c      	b.n	8003894 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 800387a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800387e:	e009      	b.n	8003894 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8003880:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003884:	e006      	b.n	8003894 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8003886:	2310      	movs	r3, #16
 8003888:	e004      	b.n	8003894 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 800388a:	2310      	movs	r3, #16
 800388c:	e002      	b.n	8003894 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 800388e:	2310      	movs	r3, #16
 8003890:	e000      	b.n	8003894 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8003892:	2310      	movs	r3, #16
 8003894:	4a36      	ldr	r2, [pc, #216]	; (8003970 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8003896:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	461a      	mov	r2, r3
 800389e:	4b35      	ldr	r3, [pc, #212]	; (8003974 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 80038a0:	429a      	cmp	r2, r3
 80038a2:	f240 8082 	bls.w	80039aa <HAL_DMAEx_MultiBufferStart_IT+0x892>
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a25      	ldr	r2, [pc, #148]	; (8003940 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d078      	beq.n	80039a2 <HAL_DMAEx_MultiBufferStart_IT+0x88a>
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a23      	ldr	r2, [pc, #140]	; (8003944 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d071      	beq.n	800399e <HAL_DMAEx_MultiBufferStart_IT+0x886>
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a22      	ldr	r2, [pc, #136]	; (8003948 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d06a      	beq.n	800399a <HAL_DMAEx_MultiBufferStart_IT+0x882>
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a20      	ldr	r2, [pc, #128]	; (800394c <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d063      	beq.n	8003996 <HAL_DMAEx_MultiBufferStart_IT+0x87e>
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a1f      	ldr	r2, [pc, #124]	; (8003950 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d05b      	beq.n	8003990 <HAL_DMAEx_MultiBufferStart_IT+0x878>
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a1d      	ldr	r2, [pc, #116]	; (8003954 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d053      	beq.n	800398a <HAL_DMAEx_MultiBufferStart_IT+0x872>
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a1c      	ldr	r2, [pc, #112]	; (8003958 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d04b      	beq.n	8003984 <HAL_DMAEx_MultiBufferStart_IT+0x86c>
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a1a      	ldr	r2, [pc, #104]	; (800395c <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d043      	beq.n	800397e <HAL_DMAEx_MultiBufferStart_IT+0x866>
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a19      	ldr	r2, [pc, #100]	; (8003960 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d03b      	beq.n	8003978 <HAL_DMAEx_MultiBufferStart_IT+0x860>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a17      	ldr	r2, [pc, #92]	; (8003964 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d012      	beq.n	8003930 <HAL_DMAEx_MultiBufferStart_IT+0x818>
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a16      	ldr	r2, [pc, #88]	; (8003968 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d00a      	beq.n	800392a <HAL_DMAEx_MultiBufferStart_IT+0x812>
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a14      	ldr	r2, [pc, #80]	; (800396c <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d102      	bne.n	8003924 <HAL_DMAEx_MultiBufferStart_IT+0x80c>
 800391e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003922:	e03f      	b.n	80039a4 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003924:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003928:	e03c      	b.n	80039a4 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 800392a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800392e:	e039      	b.n	80039a4 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003930:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003934:	e036      	b.n	80039a4 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003936:	bf00      	nop
 8003938:	40026400 	.word	0x40026400
 800393c:	40026058 	.word	0x40026058
 8003940:	40026010 	.word	0x40026010
 8003944:	40026410 	.word	0x40026410
 8003948:	40026070 	.word	0x40026070
 800394c:	40026470 	.word	0x40026470
 8003950:	40026028 	.word	0x40026028
 8003954:	40026428 	.word	0x40026428
 8003958:	40026088 	.word	0x40026088
 800395c:	40026488 	.word	0x40026488
 8003960:	40026040 	.word	0x40026040
 8003964:	40026440 	.word	0x40026440
 8003968:	400260a0 	.word	0x400260a0
 800396c:	400264a0 	.word	0x400264a0
 8003970:	40026000 	.word	0x40026000
 8003974:	40026458 	.word	0x40026458
 8003978:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800397c:	e012      	b.n	80039a4 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 800397e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003982:	e00f      	b.n	80039a4 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003984:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003988:	e00c      	b.n	80039a4 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 800398a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800398e:	e009      	b.n	80039a4 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003990:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003994:	e006      	b.n	80039a4 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003996:	2308      	movs	r3, #8
 8003998:	e004      	b.n	80039a4 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 800399a:	2308      	movs	r3, #8
 800399c:	e002      	b.n	80039a4 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 800399e:	2308      	movs	r3, #8
 80039a0:	e000      	b.n	80039a4 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80039a2:	2308      	movs	r3, #8
 80039a4:	4a8c      	ldr	r2, [pc, #560]	; (8003bd8 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 80039a6:	60d3      	str	r3, [r2, #12]
 80039a8:	e14e      	b.n	8003c48 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	461a      	mov	r2, r3
 80039b0:	4b8a      	ldr	r3, [pc, #552]	; (8003bdc <HAL_DMAEx_MultiBufferStart_IT+0xac4>)
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d960      	bls.n	8003a78 <HAL_DMAEx_MultiBufferStart_IT+0x960>
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a89      	ldr	r2, [pc, #548]	; (8003be0 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d057      	beq.n	8003a70 <HAL_DMAEx_MultiBufferStart_IT+0x958>
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a87      	ldr	r2, [pc, #540]	; (8003be4 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d050      	beq.n	8003a6c <HAL_DMAEx_MultiBufferStart_IT+0x954>
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a86      	ldr	r2, [pc, #536]	; (8003be8 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d049      	beq.n	8003a68 <HAL_DMAEx_MultiBufferStart_IT+0x950>
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a84      	ldr	r2, [pc, #528]	; (8003bec <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d042      	beq.n	8003a64 <HAL_DMAEx_MultiBufferStart_IT+0x94c>
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a83      	ldr	r2, [pc, #524]	; (8003bf0 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d03a      	beq.n	8003a5e <HAL_DMAEx_MultiBufferStart_IT+0x946>
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a81      	ldr	r2, [pc, #516]	; (8003bf4 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d032      	beq.n	8003a58 <HAL_DMAEx_MultiBufferStart_IT+0x940>
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a80      	ldr	r2, [pc, #512]	; (8003bf8 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d02a      	beq.n	8003a52 <HAL_DMAEx_MultiBufferStart_IT+0x93a>
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a7e      	ldr	r2, [pc, #504]	; (8003bfc <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d022      	beq.n	8003a4c <HAL_DMAEx_MultiBufferStart_IT+0x934>
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a7d      	ldr	r2, [pc, #500]	; (8003c00 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d01a      	beq.n	8003a46 <HAL_DMAEx_MultiBufferStart_IT+0x92e>
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a7b      	ldr	r2, [pc, #492]	; (8003c04 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d012      	beq.n	8003a40 <HAL_DMAEx_MultiBufferStart_IT+0x928>
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a7a      	ldr	r2, [pc, #488]	; (8003c08 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d00a      	beq.n	8003a3a <HAL_DMAEx_MultiBufferStart_IT+0x922>
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a78      	ldr	r2, [pc, #480]	; (8003c0c <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d102      	bne.n	8003a34 <HAL_DMAEx_MultiBufferStart_IT+0x91c>
 8003a2e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003a32:	e01e      	b.n	8003a72 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003a34:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a38:	e01b      	b.n	8003a72 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003a3a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003a3e:	e018      	b.n	8003a72 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003a40:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003a44:	e015      	b.n	8003a72 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003a46:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003a4a:	e012      	b.n	8003a72 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003a4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a50:	e00f      	b.n	8003a72 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003a52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a56:	e00c      	b.n	8003a72 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003a58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a5c:	e009      	b.n	8003a72 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003a5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a62:	e006      	b.n	8003a72 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003a64:	2308      	movs	r3, #8
 8003a66:	e004      	b.n	8003a72 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003a68:	2308      	movs	r3, #8
 8003a6a:	e002      	b.n	8003a72 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003a6c:	2308      	movs	r3, #8
 8003a6e:	e000      	b.n	8003a72 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003a70:	2308      	movs	r3, #8
 8003a72:	4a59      	ldr	r2, [pc, #356]	; (8003bd8 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 8003a74:	6093      	str	r3, [r2, #8]
 8003a76:	e0e7      	b.n	8003c48 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	4b64      	ldr	r3, [pc, #400]	; (8003c10 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d960      	bls.n	8003b46 <HAL_DMAEx_MultiBufferStart_IT+0xa2e>
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a55      	ldr	r2, [pc, #340]	; (8003be0 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d057      	beq.n	8003b3e <HAL_DMAEx_MultiBufferStart_IT+0xa26>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a54      	ldr	r2, [pc, #336]	; (8003be4 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d050      	beq.n	8003b3a <HAL_DMAEx_MultiBufferStart_IT+0xa22>
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a52      	ldr	r2, [pc, #328]	; (8003be8 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d049      	beq.n	8003b36 <HAL_DMAEx_MultiBufferStart_IT+0xa1e>
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a51      	ldr	r2, [pc, #324]	; (8003bec <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d042      	beq.n	8003b32 <HAL_DMAEx_MultiBufferStart_IT+0xa1a>
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a4f      	ldr	r2, [pc, #316]	; (8003bf0 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d03a      	beq.n	8003b2c <HAL_DMAEx_MultiBufferStart_IT+0xa14>
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a4e      	ldr	r2, [pc, #312]	; (8003bf4 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d032      	beq.n	8003b26 <HAL_DMAEx_MultiBufferStart_IT+0xa0e>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a4c      	ldr	r2, [pc, #304]	; (8003bf8 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d02a      	beq.n	8003b20 <HAL_DMAEx_MultiBufferStart_IT+0xa08>
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a4b      	ldr	r2, [pc, #300]	; (8003bfc <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d022      	beq.n	8003b1a <HAL_DMAEx_MultiBufferStart_IT+0xa02>
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a49      	ldr	r2, [pc, #292]	; (8003c00 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d01a      	beq.n	8003b14 <HAL_DMAEx_MultiBufferStart_IT+0x9fc>
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a48      	ldr	r2, [pc, #288]	; (8003c04 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d012      	beq.n	8003b0e <HAL_DMAEx_MultiBufferStart_IT+0x9f6>
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a46      	ldr	r2, [pc, #280]	; (8003c08 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d00a      	beq.n	8003b08 <HAL_DMAEx_MultiBufferStart_IT+0x9f0>
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a45      	ldr	r2, [pc, #276]	; (8003c0c <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d102      	bne.n	8003b02 <HAL_DMAEx_MultiBufferStart_IT+0x9ea>
 8003afc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003b00:	e01e      	b.n	8003b40 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003b02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b06:	e01b      	b.n	8003b40 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003b08:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003b0c:	e018      	b.n	8003b40 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003b0e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003b12:	e015      	b.n	8003b40 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003b14:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003b18:	e012      	b.n	8003b40 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003b1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b1e:	e00f      	b.n	8003b40 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003b20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b24:	e00c      	b.n	8003b40 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003b26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b2a:	e009      	b.n	8003b40 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003b2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b30:	e006      	b.n	8003b40 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003b32:	2308      	movs	r3, #8
 8003b34:	e004      	b.n	8003b40 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003b36:	2308      	movs	r3, #8
 8003b38:	e002      	b.n	8003b40 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003b3a:	2308      	movs	r3, #8
 8003b3c:	e000      	b.n	8003b40 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003b3e:	2308      	movs	r3, #8
 8003b40:	4a34      	ldr	r2, [pc, #208]	; (8003c14 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 8003b42:	60d3      	str	r3, [r2, #12]
 8003b44:	e080      	b.n	8003c48 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a25      	ldr	r2, [pc, #148]	; (8003be0 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d078      	beq.n	8003c42 <HAL_DMAEx_MultiBufferStart_IT+0xb2a>
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a23      	ldr	r2, [pc, #140]	; (8003be4 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d071      	beq.n	8003c3e <HAL_DMAEx_MultiBufferStart_IT+0xb26>
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a22      	ldr	r2, [pc, #136]	; (8003be8 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d06a      	beq.n	8003c3a <HAL_DMAEx_MultiBufferStart_IT+0xb22>
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a20      	ldr	r2, [pc, #128]	; (8003bec <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d063      	beq.n	8003c36 <HAL_DMAEx_MultiBufferStart_IT+0xb1e>
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a1f      	ldr	r2, [pc, #124]	; (8003bf0 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d05b      	beq.n	8003c30 <HAL_DMAEx_MultiBufferStart_IT+0xb18>
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a1d      	ldr	r2, [pc, #116]	; (8003bf4 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d053      	beq.n	8003c2a <HAL_DMAEx_MultiBufferStart_IT+0xb12>
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a1c      	ldr	r2, [pc, #112]	; (8003bf8 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d04b      	beq.n	8003c24 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a1a      	ldr	r2, [pc, #104]	; (8003bfc <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d043      	beq.n	8003c1e <HAL_DMAEx_MultiBufferStart_IT+0xb06>
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a19      	ldr	r2, [pc, #100]	; (8003c00 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d03b      	beq.n	8003c18 <HAL_DMAEx_MultiBufferStart_IT+0xb00>
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a17      	ldr	r2, [pc, #92]	; (8003c04 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d012      	beq.n	8003bd0 <HAL_DMAEx_MultiBufferStart_IT+0xab8>
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a16      	ldr	r2, [pc, #88]	; (8003c08 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d00a      	beq.n	8003bca <HAL_DMAEx_MultiBufferStart_IT+0xab2>
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a14      	ldr	r2, [pc, #80]	; (8003c0c <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d102      	bne.n	8003bc4 <HAL_DMAEx_MultiBufferStart_IT+0xaac>
 8003bbe:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003bc2:	e03f      	b.n	8003c44 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003bc4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003bc8:	e03c      	b.n	8003c44 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003bca:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003bce:	e039      	b.n	8003c44 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003bd0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003bd4:	e036      	b.n	8003c44 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003bd6:	bf00      	nop
 8003bd8:	40026400 	.word	0x40026400
 8003bdc:	400260b8 	.word	0x400260b8
 8003be0:	40026010 	.word	0x40026010
 8003be4:	40026410 	.word	0x40026410
 8003be8:	40026070 	.word	0x40026070
 8003bec:	40026470 	.word	0x40026470
 8003bf0:	40026028 	.word	0x40026028
 8003bf4:	40026428 	.word	0x40026428
 8003bf8:	40026088 	.word	0x40026088
 8003bfc:	40026488 	.word	0x40026488
 8003c00:	40026040 	.word	0x40026040
 8003c04:	40026440 	.word	0x40026440
 8003c08:	400260a0 	.word	0x400260a0
 8003c0c:	400264a0 	.word	0x400264a0
 8003c10:	40026058 	.word	0x40026058
 8003c14:	40026000 	.word	0x40026000
 8003c18:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003c1c:	e012      	b.n	8003c44 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003c1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c22:	e00f      	b.n	8003c44 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003c24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c28:	e00c      	b.n	8003c44 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003c2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c2e:	e009      	b.n	8003c44 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003c30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c34:	e006      	b.n	8003c44 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003c36:	2308      	movs	r3, #8
 8003c38:	e004      	b.n	8003c44 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003c3a:	2308      	movs	r3, #8
 8003c3c:	e002      	b.n	8003c44 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003c3e:	2308      	movs	r3, #8
 8003c40:	e000      	b.n	8003c44 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003c42:	2308      	movs	r3, #8
 8003c44:	4a8a      	ldr	r2, [pc, #552]	; (8003e70 <HAL_DMAEx_MultiBufferStart_IT+0xd58>)
 8003c46:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	4b89      	ldr	r3, [pc, #548]	; (8003e74 <HAL_DMAEx_MultiBufferStart_IT+0xd5c>)
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d960      	bls.n	8003d16 <HAL_DMAEx_MultiBufferStart_IT+0xbfe>
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a87      	ldr	r2, [pc, #540]	; (8003e78 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d057      	beq.n	8003d0e <HAL_DMAEx_MultiBufferStart_IT+0xbf6>
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a86      	ldr	r2, [pc, #536]	; (8003e7c <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d050      	beq.n	8003d0a <HAL_DMAEx_MultiBufferStart_IT+0xbf2>
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a84      	ldr	r2, [pc, #528]	; (8003e80 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d049      	beq.n	8003d06 <HAL_DMAEx_MultiBufferStart_IT+0xbee>
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a83      	ldr	r2, [pc, #524]	; (8003e84 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d042      	beq.n	8003d02 <HAL_DMAEx_MultiBufferStart_IT+0xbea>
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a81      	ldr	r2, [pc, #516]	; (8003e88 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d03a      	beq.n	8003cfc <HAL_DMAEx_MultiBufferStart_IT+0xbe4>
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a80      	ldr	r2, [pc, #512]	; (8003e8c <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d032      	beq.n	8003cf6 <HAL_DMAEx_MultiBufferStart_IT+0xbde>
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a7e      	ldr	r2, [pc, #504]	; (8003e90 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d02a      	beq.n	8003cf0 <HAL_DMAEx_MultiBufferStart_IT+0xbd8>
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a7d      	ldr	r2, [pc, #500]	; (8003e94 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d022      	beq.n	8003cea <HAL_DMAEx_MultiBufferStart_IT+0xbd2>
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a7b      	ldr	r2, [pc, #492]	; (8003e98 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d01a      	beq.n	8003ce4 <HAL_DMAEx_MultiBufferStart_IT+0xbcc>
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a7a      	ldr	r2, [pc, #488]	; (8003e9c <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d012      	beq.n	8003cde <HAL_DMAEx_MultiBufferStart_IT+0xbc6>
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a78      	ldr	r2, [pc, #480]	; (8003ea0 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d00a      	beq.n	8003cd8 <HAL_DMAEx_MultiBufferStart_IT+0xbc0>
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a77      	ldr	r2, [pc, #476]	; (8003ea4 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d102      	bne.n	8003cd2 <HAL_DMAEx_MultiBufferStart_IT+0xbba>
 8003ccc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003cd0:	e01e      	b.n	8003d10 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003cd2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003cd6:	e01b      	b.n	8003d10 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003cd8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003cdc:	e018      	b.n	8003d10 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003cde:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003ce2:	e015      	b.n	8003d10 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003ce4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003ce8:	e012      	b.n	8003d10 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003cea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003cee:	e00f      	b.n	8003d10 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003cf0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003cf4:	e00c      	b.n	8003d10 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003cf6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003cfa:	e009      	b.n	8003d10 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003cfc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d00:	e006      	b.n	8003d10 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003d02:	2304      	movs	r3, #4
 8003d04:	e004      	b.n	8003d10 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003d06:	2304      	movs	r3, #4
 8003d08:	e002      	b.n	8003d10 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003d0a:	2304      	movs	r3, #4
 8003d0c:	e000      	b.n	8003d10 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003d0e:	2304      	movs	r3, #4
 8003d10:	4a65      	ldr	r2, [pc, #404]	; (8003ea8 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 8003d12:	60d3      	str	r3, [r2, #12]
 8003d14:	e150      	b.n	8003fb8 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	4b63      	ldr	r3, [pc, #396]	; (8003eac <HAL_DMAEx_MultiBufferStart_IT+0xd94>)
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d960      	bls.n	8003de4 <HAL_DMAEx_MultiBufferStart_IT+0xccc>
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a54      	ldr	r2, [pc, #336]	; (8003e78 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d057      	beq.n	8003ddc <HAL_DMAEx_MultiBufferStart_IT+0xcc4>
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a52      	ldr	r2, [pc, #328]	; (8003e7c <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d050      	beq.n	8003dd8 <HAL_DMAEx_MultiBufferStart_IT+0xcc0>
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a51      	ldr	r2, [pc, #324]	; (8003e80 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d049      	beq.n	8003dd4 <HAL_DMAEx_MultiBufferStart_IT+0xcbc>
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a4f      	ldr	r2, [pc, #316]	; (8003e84 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d042      	beq.n	8003dd0 <HAL_DMAEx_MultiBufferStart_IT+0xcb8>
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a4e      	ldr	r2, [pc, #312]	; (8003e88 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d03a      	beq.n	8003dca <HAL_DMAEx_MultiBufferStart_IT+0xcb2>
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a4c      	ldr	r2, [pc, #304]	; (8003e8c <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d032      	beq.n	8003dc4 <HAL_DMAEx_MultiBufferStart_IT+0xcac>
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a4b      	ldr	r2, [pc, #300]	; (8003e90 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d02a      	beq.n	8003dbe <HAL_DMAEx_MultiBufferStart_IT+0xca6>
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a49      	ldr	r2, [pc, #292]	; (8003e94 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d022      	beq.n	8003db8 <HAL_DMAEx_MultiBufferStart_IT+0xca0>
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a48      	ldr	r2, [pc, #288]	; (8003e98 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d01a      	beq.n	8003db2 <HAL_DMAEx_MultiBufferStart_IT+0xc9a>
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a46      	ldr	r2, [pc, #280]	; (8003e9c <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d012      	beq.n	8003dac <HAL_DMAEx_MultiBufferStart_IT+0xc94>
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a45      	ldr	r2, [pc, #276]	; (8003ea0 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d00a      	beq.n	8003da6 <HAL_DMAEx_MultiBufferStart_IT+0xc8e>
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a43      	ldr	r2, [pc, #268]	; (8003ea4 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d102      	bne.n	8003da0 <HAL_DMAEx_MultiBufferStart_IT+0xc88>
 8003d9a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003d9e:	e01e      	b.n	8003dde <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003da0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003da4:	e01b      	b.n	8003dde <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003da6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003daa:	e018      	b.n	8003dde <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003dac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003db0:	e015      	b.n	8003dde <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003db2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003db6:	e012      	b.n	8003dde <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003db8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003dbc:	e00f      	b.n	8003dde <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003dbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003dc2:	e00c      	b.n	8003dde <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003dc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003dc8:	e009      	b.n	8003dde <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003dca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003dce:	e006      	b.n	8003dde <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003dd0:	2304      	movs	r3, #4
 8003dd2:	e004      	b.n	8003dde <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003dd4:	2304      	movs	r3, #4
 8003dd6:	e002      	b.n	8003dde <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003dd8:	2304      	movs	r3, #4
 8003dda:	e000      	b.n	8003dde <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003ddc:	2304      	movs	r3, #4
 8003dde:	4a32      	ldr	r2, [pc, #200]	; (8003ea8 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 8003de0:	6093      	str	r3, [r2, #8]
 8003de2:	e0e9      	b.n	8003fb8 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	461a      	mov	r2, r3
 8003dea:	4b31      	ldr	r3, [pc, #196]	; (8003eb0 <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 8003dec:	429a      	cmp	r2, r3
 8003dee:	f240 8083 	bls.w	8003ef8 <HAL_DMAEx_MultiBufferStart_IT+0xde0>
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a20      	ldr	r2, [pc, #128]	; (8003e78 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d079      	beq.n	8003ef0 <HAL_DMAEx_MultiBufferStart_IT+0xdd8>
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a1e      	ldr	r2, [pc, #120]	; (8003e7c <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d072      	beq.n	8003eec <HAL_DMAEx_MultiBufferStart_IT+0xdd4>
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a1d      	ldr	r2, [pc, #116]	; (8003e80 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d06b      	beq.n	8003ee8 <HAL_DMAEx_MultiBufferStart_IT+0xdd0>
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a1b      	ldr	r2, [pc, #108]	; (8003e84 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d064      	beq.n	8003ee4 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a1a      	ldr	r2, [pc, #104]	; (8003e88 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d05c      	beq.n	8003ede <HAL_DMAEx_MultiBufferStart_IT+0xdc6>
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a18      	ldr	r2, [pc, #96]	; (8003e8c <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d054      	beq.n	8003ed8 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a17      	ldr	r2, [pc, #92]	; (8003e90 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d04c      	beq.n	8003ed2 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a15      	ldr	r2, [pc, #84]	; (8003e94 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d044      	beq.n	8003ecc <HAL_DMAEx_MultiBufferStart_IT+0xdb4>
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a14      	ldr	r2, [pc, #80]	; (8003e98 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d03c      	beq.n	8003ec6 <HAL_DMAEx_MultiBufferStart_IT+0xdae>
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a12      	ldr	r2, [pc, #72]	; (8003e9c <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d034      	beq.n	8003ec0 <HAL_DMAEx_MultiBufferStart_IT+0xda8>
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a11      	ldr	r2, [pc, #68]	; (8003ea0 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d02c      	beq.n	8003eba <HAL_DMAEx_MultiBufferStart_IT+0xda2>
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a0f      	ldr	r2, [pc, #60]	; (8003ea4 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d124      	bne.n	8003eb4 <HAL_DMAEx_MultiBufferStart_IT+0xd9c>
 8003e6a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003e6e:	e040      	b.n	8003ef2 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003e70:	40026000 	.word	0x40026000
 8003e74:	40026458 	.word	0x40026458
 8003e78:	40026010 	.word	0x40026010
 8003e7c:	40026410 	.word	0x40026410
 8003e80:	40026070 	.word	0x40026070
 8003e84:	40026470 	.word	0x40026470
 8003e88:	40026028 	.word	0x40026028
 8003e8c:	40026428 	.word	0x40026428
 8003e90:	40026088 	.word	0x40026088
 8003e94:	40026488 	.word	0x40026488
 8003e98:	40026040 	.word	0x40026040
 8003e9c:	40026440 	.word	0x40026440
 8003ea0:	400260a0 	.word	0x400260a0
 8003ea4:	400264a0 	.word	0x400264a0
 8003ea8:	40026400 	.word	0x40026400
 8003eac:	400260b8 	.word	0x400260b8
 8003eb0:	40026058 	.word	0x40026058
 8003eb4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003eb8:	e01b      	b.n	8003ef2 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003eba:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003ebe:	e018      	b.n	8003ef2 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003ec0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003ec4:	e015      	b.n	8003ef2 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003ec6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003eca:	e012      	b.n	8003ef2 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003ecc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ed0:	e00f      	b.n	8003ef2 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003ed2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ed6:	e00c      	b.n	8003ef2 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003ed8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003edc:	e009      	b.n	8003ef2 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003ede:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ee2:	e006      	b.n	8003ef2 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003ee4:	2304      	movs	r3, #4
 8003ee6:	e004      	b.n	8003ef2 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003ee8:	2304      	movs	r3, #4
 8003eea:	e002      	b.n	8003ef2 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003eec:	2304      	movs	r3, #4
 8003eee:	e000      	b.n	8003ef2 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003ef0:	2304      	movs	r3, #4
 8003ef2:	4a8b      	ldr	r2, [pc, #556]	; (8004120 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 8003ef4:	60d3      	str	r3, [r2, #12]
 8003ef6:	e05f      	b.n	8003fb8 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a89      	ldr	r2, [pc, #548]	; (8004124 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d057      	beq.n	8003fb2 <HAL_DMAEx_MultiBufferStart_IT+0xe9a>
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a88      	ldr	r2, [pc, #544]	; (8004128 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d050      	beq.n	8003fae <HAL_DMAEx_MultiBufferStart_IT+0xe96>
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a86      	ldr	r2, [pc, #536]	; (800412c <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d049      	beq.n	8003faa <HAL_DMAEx_MultiBufferStart_IT+0xe92>
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a85      	ldr	r2, [pc, #532]	; (8004130 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d042      	beq.n	8003fa6 <HAL_DMAEx_MultiBufferStart_IT+0xe8e>
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a83      	ldr	r2, [pc, #524]	; (8004134 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d03a      	beq.n	8003fa0 <HAL_DMAEx_MultiBufferStart_IT+0xe88>
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a82      	ldr	r2, [pc, #520]	; (8004138 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d032      	beq.n	8003f9a <HAL_DMAEx_MultiBufferStart_IT+0xe82>
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a80      	ldr	r2, [pc, #512]	; (800413c <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d02a      	beq.n	8003f94 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a7f      	ldr	r2, [pc, #508]	; (8004140 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d022      	beq.n	8003f8e <HAL_DMAEx_MultiBufferStart_IT+0xe76>
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a7d      	ldr	r2, [pc, #500]	; (8004144 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d01a      	beq.n	8003f88 <HAL_DMAEx_MultiBufferStart_IT+0xe70>
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a7c      	ldr	r2, [pc, #496]	; (8004148 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d012      	beq.n	8003f82 <HAL_DMAEx_MultiBufferStart_IT+0xe6a>
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a7a      	ldr	r2, [pc, #488]	; (800414c <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d00a      	beq.n	8003f7c <HAL_DMAEx_MultiBufferStart_IT+0xe64>
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a79      	ldr	r2, [pc, #484]	; (8004150 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d102      	bne.n	8003f76 <HAL_DMAEx_MultiBufferStart_IT+0xe5e>
 8003f70:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003f74:	e01e      	b.n	8003fb4 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003f76:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f7a:	e01b      	b.n	8003fb4 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003f7c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003f80:	e018      	b.n	8003fb4 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003f82:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003f86:	e015      	b.n	8003fb4 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003f88:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003f8c:	e012      	b.n	8003fb4 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003f8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f92:	e00f      	b.n	8003fb4 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003f94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f98:	e00c      	b.n	8003fb4 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003f9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f9e:	e009      	b.n	8003fb4 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003fa0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003fa4:	e006      	b.n	8003fb4 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003fa6:	2304      	movs	r3, #4
 8003fa8:	e004      	b.n	8003fb4 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003faa:	2304      	movs	r3, #4
 8003fac:	e002      	b.n	8003fb4 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003fae:	2304      	movs	r3, #4
 8003fb0:	e000      	b.n	8003fb4 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003fb2:	2304      	movs	r3, #4
 8003fb4:	4a5a      	ldr	r2, [pc, #360]	; (8004120 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 8003fb6:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	4b65      	ldr	r3, [pc, #404]	; (8004154 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d95c      	bls.n	800407e <HAL_DMAEx_MultiBufferStart_IT+0xf66>
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a56      	ldr	r2, [pc, #344]	; (8004124 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d053      	beq.n	8004076 <HAL_DMAEx_MultiBufferStart_IT+0xf5e>
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a55      	ldr	r2, [pc, #340]	; (8004128 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d04c      	beq.n	8004072 <HAL_DMAEx_MultiBufferStart_IT+0xf5a>
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a53      	ldr	r2, [pc, #332]	; (800412c <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d045      	beq.n	800406e <HAL_DMAEx_MultiBufferStart_IT+0xf56>
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a52      	ldr	r2, [pc, #328]	; (8004130 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d03e      	beq.n	800406a <HAL_DMAEx_MultiBufferStart_IT+0xf52>
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a50      	ldr	r2, [pc, #320]	; (8004134 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d037      	beq.n	8004066 <HAL_DMAEx_MultiBufferStart_IT+0xf4e>
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a4f      	ldr	r2, [pc, #316]	; (8004138 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d030      	beq.n	8004062 <HAL_DMAEx_MultiBufferStart_IT+0xf4a>
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a4d      	ldr	r2, [pc, #308]	; (800413c <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d029      	beq.n	800405e <HAL_DMAEx_MultiBufferStart_IT+0xf46>
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a4c      	ldr	r2, [pc, #304]	; (8004140 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d022      	beq.n	800405a <HAL_DMAEx_MultiBufferStart_IT+0xf42>
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a4a      	ldr	r2, [pc, #296]	; (8004144 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d01a      	beq.n	8004054 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a49      	ldr	r2, [pc, #292]	; (8004148 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d012      	beq.n	800404e <HAL_DMAEx_MultiBufferStart_IT+0xf36>
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a47      	ldr	r2, [pc, #284]	; (800414c <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d00a      	beq.n	8004048 <HAL_DMAEx_MultiBufferStart_IT+0xf30>
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a46      	ldr	r2, [pc, #280]	; (8004150 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d102      	bne.n	8004042 <HAL_DMAEx_MultiBufferStart_IT+0xf2a>
 800403c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004040:	e01a      	b.n	8004078 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8004042:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004046:	e017      	b.n	8004078 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8004048:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800404c:	e014      	b.n	8004078 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 800404e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004052:	e011      	b.n	8004078 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8004054:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004058:	e00e      	b.n	8004078 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 800405a:	2340      	movs	r3, #64	; 0x40
 800405c:	e00c      	b.n	8004078 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 800405e:	2340      	movs	r3, #64	; 0x40
 8004060:	e00a      	b.n	8004078 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8004062:	2340      	movs	r3, #64	; 0x40
 8004064:	e008      	b.n	8004078 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8004066:	2340      	movs	r3, #64	; 0x40
 8004068:	e006      	b.n	8004078 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 800406a:	2301      	movs	r3, #1
 800406c:	e004      	b.n	8004078 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 800406e:	2301      	movs	r3, #1
 8004070:	e002      	b.n	8004078 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8004072:	2301      	movs	r3, #1
 8004074:	e000      	b.n	8004078 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8004076:	2301      	movs	r3, #1
 8004078:	4a37      	ldr	r2, [pc, #220]	; (8004158 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 800407a:	60d3      	str	r3, [r2, #12]
 800407c:	e141      	b.n	8004302 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	461a      	mov	r2, r3
 8004084:	4b35      	ldr	r3, [pc, #212]	; (800415c <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8004086:	429a      	cmp	r2, r3
 8004088:	d97c      	bls.n	8004184 <HAL_DMAEx_MultiBufferStart_IT+0x106c>
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a25      	ldr	r2, [pc, #148]	; (8004124 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d073      	beq.n	800417c <HAL_DMAEx_MultiBufferStart_IT+0x1064>
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a23      	ldr	r2, [pc, #140]	; (8004128 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d06c      	beq.n	8004178 <HAL_DMAEx_MultiBufferStart_IT+0x1060>
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a22      	ldr	r2, [pc, #136]	; (800412c <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d065      	beq.n	8004174 <HAL_DMAEx_MultiBufferStart_IT+0x105c>
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a20      	ldr	r2, [pc, #128]	; (8004130 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d05e      	beq.n	8004170 <HAL_DMAEx_MultiBufferStart_IT+0x1058>
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a1f      	ldr	r2, [pc, #124]	; (8004134 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d057      	beq.n	800416c <HAL_DMAEx_MultiBufferStart_IT+0x1054>
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a1d      	ldr	r2, [pc, #116]	; (8004138 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d050      	beq.n	8004168 <HAL_DMAEx_MultiBufferStart_IT+0x1050>
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a1c      	ldr	r2, [pc, #112]	; (800413c <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d049      	beq.n	8004164 <HAL_DMAEx_MultiBufferStart_IT+0x104c>
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a1a      	ldr	r2, [pc, #104]	; (8004140 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d042      	beq.n	8004160 <HAL_DMAEx_MultiBufferStart_IT+0x1048>
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a19      	ldr	r2, [pc, #100]	; (8004144 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d01a      	beq.n	800411a <HAL_DMAEx_MultiBufferStart_IT+0x1002>
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a17      	ldr	r2, [pc, #92]	; (8004148 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d012      	beq.n	8004114 <HAL_DMAEx_MultiBufferStart_IT+0xffc>
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a16      	ldr	r2, [pc, #88]	; (800414c <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d00a      	beq.n	800410e <HAL_DMAEx_MultiBufferStart_IT+0xff6>
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a14      	ldr	r2, [pc, #80]	; (8004150 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d102      	bne.n	8004108 <HAL_DMAEx_MultiBufferStart_IT+0xff0>
 8004102:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004106:	e03a      	b.n	800417e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8004108:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800410c:	e037      	b.n	800417e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 800410e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004112:	e034      	b.n	800417e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8004114:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004118:	e031      	b.n	800417e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 800411a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800411e:	e02e      	b.n	800417e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8004120:	40026000 	.word	0x40026000
 8004124:	40026010 	.word	0x40026010
 8004128:	40026410 	.word	0x40026410
 800412c:	40026070 	.word	0x40026070
 8004130:	40026470 	.word	0x40026470
 8004134:	40026028 	.word	0x40026028
 8004138:	40026428 	.word	0x40026428
 800413c:	40026088 	.word	0x40026088
 8004140:	40026488 	.word	0x40026488
 8004144:	40026040 	.word	0x40026040
 8004148:	40026440 	.word	0x40026440
 800414c:	400260a0 	.word	0x400260a0
 8004150:	400264a0 	.word	0x400264a0
 8004154:	40026458 	.word	0x40026458
 8004158:	40026400 	.word	0x40026400
 800415c:	400260b8 	.word	0x400260b8
 8004160:	2340      	movs	r3, #64	; 0x40
 8004162:	e00c      	b.n	800417e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8004164:	2340      	movs	r3, #64	; 0x40
 8004166:	e00a      	b.n	800417e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8004168:	2340      	movs	r3, #64	; 0x40
 800416a:	e008      	b.n	800417e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 800416c:	2340      	movs	r3, #64	; 0x40
 800416e:	e006      	b.n	800417e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8004170:	2301      	movs	r3, #1
 8004172:	e004      	b.n	800417e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8004174:	2301      	movs	r3, #1
 8004176:	e002      	b.n	800417e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8004178:	2301      	movs	r3, #1
 800417a:	e000      	b.n	800417e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 800417c:	2301      	movs	r3, #1
 800417e:	4a7b      	ldr	r2, [pc, #492]	; (800436c <HAL_DMAEx_MultiBufferStart_IT+0x1254>)
 8004180:	6093      	str	r3, [r2, #8]
 8004182:	e0be      	b.n	8004302 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	461a      	mov	r2, r3
 800418a:	4b79      	ldr	r3, [pc, #484]	; (8004370 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 800418c:	429a      	cmp	r2, r3
 800418e:	d95c      	bls.n	800424a <HAL_DMAEx_MultiBufferStart_IT+0x1132>
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a77      	ldr	r2, [pc, #476]	; (8004374 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d053      	beq.n	8004242 <HAL_DMAEx_MultiBufferStart_IT+0x112a>
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a76      	ldr	r2, [pc, #472]	; (8004378 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d04c      	beq.n	800423e <HAL_DMAEx_MultiBufferStart_IT+0x1126>
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a74      	ldr	r2, [pc, #464]	; (800437c <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d045      	beq.n	800423a <HAL_DMAEx_MultiBufferStart_IT+0x1122>
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a73      	ldr	r2, [pc, #460]	; (8004380 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d03e      	beq.n	8004236 <HAL_DMAEx_MultiBufferStart_IT+0x111e>
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a71      	ldr	r2, [pc, #452]	; (8004384 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d037      	beq.n	8004232 <HAL_DMAEx_MultiBufferStart_IT+0x111a>
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a70      	ldr	r2, [pc, #448]	; (8004388 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d030      	beq.n	800422e <HAL_DMAEx_MultiBufferStart_IT+0x1116>
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a6e      	ldr	r2, [pc, #440]	; (800438c <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d029      	beq.n	800422a <HAL_DMAEx_MultiBufferStart_IT+0x1112>
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a6d      	ldr	r2, [pc, #436]	; (8004390 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d022      	beq.n	8004226 <HAL_DMAEx_MultiBufferStart_IT+0x110e>
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a6b      	ldr	r2, [pc, #428]	; (8004394 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d01a      	beq.n	8004220 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a6a      	ldr	r2, [pc, #424]	; (8004398 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d012      	beq.n	800421a <HAL_DMAEx_MultiBufferStart_IT+0x1102>
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a68      	ldr	r2, [pc, #416]	; (800439c <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d00a      	beq.n	8004214 <HAL_DMAEx_MultiBufferStart_IT+0x10fc>
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a67      	ldr	r2, [pc, #412]	; (80043a0 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d102      	bne.n	800420e <HAL_DMAEx_MultiBufferStart_IT+0x10f6>
 8004208:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800420c:	e01a      	b.n	8004244 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800420e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004212:	e017      	b.n	8004244 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8004214:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004218:	e014      	b.n	8004244 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800421a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800421e:	e011      	b.n	8004244 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8004220:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004224:	e00e      	b.n	8004244 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8004226:	2340      	movs	r3, #64	; 0x40
 8004228:	e00c      	b.n	8004244 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800422a:	2340      	movs	r3, #64	; 0x40
 800422c:	e00a      	b.n	8004244 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800422e:	2340      	movs	r3, #64	; 0x40
 8004230:	e008      	b.n	8004244 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8004232:	2340      	movs	r3, #64	; 0x40
 8004234:	e006      	b.n	8004244 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8004236:	2301      	movs	r3, #1
 8004238:	e004      	b.n	8004244 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800423a:	2301      	movs	r3, #1
 800423c:	e002      	b.n	8004244 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800423e:	2301      	movs	r3, #1
 8004240:	e000      	b.n	8004244 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8004242:	2301      	movs	r3, #1
 8004244:	4a57      	ldr	r2, [pc, #348]	; (80043a4 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8004246:	60d3      	str	r3, [r2, #12]
 8004248:	e05b      	b.n	8004302 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a49      	ldr	r2, [pc, #292]	; (8004374 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d053      	beq.n	80042fc <HAL_DMAEx_MultiBufferStart_IT+0x11e4>
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a47      	ldr	r2, [pc, #284]	; (8004378 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d04c      	beq.n	80042f8 <HAL_DMAEx_MultiBufferStart_IT+0x11e0>
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a46      	ldr	r2, [pc, #280]	; (800437c <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d045      	beq.n	80042f4 <HAL_DMAEx_MultiBufferStart_IT+0x11dc>
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a44      	ldr	r2, [pc, #272]	; (8004380 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d03e      	beq.n	80042f0 <HAL_DMAEx_MultiBufferStart_IT+0x11d8>
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a43      	ldr	r2, [pc, #268]	; (8004384 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d037      	beq.n	80042ec <HAL_DMAEx_MultiBufferStart_IT+0x11d4>
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a41      	ldr	r2, [pc, #260]	; (8004388 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d030      	beq.n	80042e8 <HAL_DMAEx_MultiBufferStart_IT+0x11d0>
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a40      	ldr	r2, [pc, #256]	; (800438c <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d029      	beq.n	80042e4 <HAL_DMAEx_MultiBufferStart_IT+0x11cc>
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a3e      	ldr	r2, [pc, #248]	; (8004390 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d022      	beq.n	80042e0 <HAL_DMAEx_MultiBufferStart_IT+0x11c8>
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a3d      	ldr	r2, [pc, #244]	; (8004394 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d01a      	beq.n	80042da <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a3b      	ldr	r2, [pc, #236]	; (8004398 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d012      	beq.n	80042d4 <HAL_DMAEx_MultiBufferStart_IT+0x11bc>
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a3a      	ldr	r2, [pc, #232]	; (800439c <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d00a      	beq.n	80042ce <HAL_DMAEx_MultiBufferStart_IT+0x11b6>
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a38      	ldr	r2, [pc, #224]	; (80043a0 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d102      	bne.n	80042c8 <HAL_DMAEx_MultiBufferStart_IT+0x11b0>
 80042c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80042c6:	e01a      	b.n	80042fe <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80042c8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80042cc:	e017      	b.n	80042fe <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80042ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80042d2:	e014      	b.n	80042fe <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80042d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80042d8:	e011      	b.n	80042fe <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80042da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80042de:	e00e      	b.n	80042fe <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80042e0:	2340      	movs	r3, #64	; 0x40
 80042e2:	e00c      	b.n	80042fe <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80042e4:	2340      	movs	r3, #64	; 0x40
 80042e6:	e00a      	b.n	80042fe <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80042e8:	2340      	movs	r3, #64	; 0x40
 80042ea:	e008      	b.n	80042fe <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80042ec:	2340      	movs	r3, #64	; 0x40
 80042ee:	e006      	b.n	80042fe <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80042f0:	2301      	movs	r3, #1
 80042f2:	e004      	b.n	80042fe <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80042f4:	2301      	movs	r3, #1
 80042f6:	e002      	b.n	80042fe <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80042f8:	2301      	movs	r3, #1
 80042fa:	e000      	b.n	80042fe <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80042fc:	2301      	movs	r3, #1
 80042fe:	4a29      	ldr	r2, [pc, #164]	; (80043a4 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8004300:	6093      	str	r3, [r2, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f042 0216 	orr.w	r2, r2, #22
 8004310:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	695a      	ldr	r2, [r3, #20]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004320:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004326:	2b00      	cmp	r3, #0
 8004328:	d103      	bne.n	8004332 <HAL_DMAEx_MultiBufferStart_IT+0x121a>
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800432e:	2b00      	cmp	r3, #0
 8004330:	d007      	beq.n	8004342 <HAL_DMAEx_MultiBufferStart_IT+0x122a>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f042 0208 	orr.w	r2, r2, #8
 8004340:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f042 0201 	orr.w	r2, r2, #1
 8004350:	601a      	str	r2, [r3, #0]
 8004352:	e005      	b.n	8004360 <HAL_DMAEx_MultiBufferStart_IT+0x1248>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2200      	movs	r2, #0
 8004358:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800435c:	2302      	movs	r3, #2
 800435e:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 8004360:	7dfb      	ldrb	r3, [r7, #23]
}
 8004362:	4618      	mov	r0, r3
 8004364:	3718      	adds	r7, #24
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	40026400 	.word	0x40026400
 8004370:	40026058 	.word	0x40026058
 8004374:	40026010 	.word	0x40026010
 8004378:	40026410 	.word	0x40026410
 800437c:	40026070 	.word	0x40026070
 8004380:	40026470 	.word	0x40026470
 8004384:	40026028 	.word	0x40026028
 8004388:	40026428 	.word	0x40026428
 800438c:	40026088 	.word	0x40026088
 8004390:	40026488 	.word	0x40026488
 8004394:	40026040 	.word	0x40026040
 8004398:	40026440 	.word	0x40026440
 800439c:	400260a0 	.word	0x400260a0
 80043a0:	400264a0 	.word	0x400264a0
 80043a4:	40026000 	.word	0x40026000

080043a8 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current 
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b085      	sub	sp, #20
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	60b9      	str	r1, [r7, #8]
 80043b2:	4613      	mov	r3, r2
 80043b4:	71fb      	strb	r3, [r7, #7]
  if(memory == MEMORY0)
 80043b6:	79fb      	ldrb	r3, [r7, #7]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d104      	bne.n	80043c6 <HAL_DMAEx_ChangeMemory+0x1e>
  {
    /* change the memory0 address */
    hdma->Instance->M0AR = Address;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	68ba      	ldr	r2, [r7, #8]
 80043c2:	60da      	str	r2, [r3, #12]
 80043c4:	e003      	b.n	80043ce <HAL_DMAEx_ChangeMemory+0x26>
  }
  else
  {
    /* change the memory1 address */
    hdma->Instance->M1AR = Address;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	68ba      	ldr	r2, [r7, #8]
 80043cc:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80043ce:	2300      	movs	r3, #0
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3714      	adds	r7, #20
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 80043dc:	b480      	push	{r7}
 80043de:	b085      	sub	sp, #20
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	60b9      	str	r1, [r7, #8]
 80043e6:	607a      	str	r2, [r7, #4]
 80043e8:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	683a      	ldr	r2, [r7, #0]
 80043f0:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	2b40      	cmp	r3, #64	; 0x40
 80043f8:	d108      	bne.n	800440c <DMA_MultiBufferSetConfig+0x30>
  {   
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	68ba      	ldr	r2, [r7, #8]
 8004408:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800440a:	e007      	b.n	800441c <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	68ba      	ldr	r2, [r7, #8]
 8004412:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	60da      	str	r2, [r3, #12]
}
 800441c:	bf00      	nop
 800441e:	3714      	adds	r7, #20
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr

08004428 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004428:	b480      	push	{r7}
 800442a:	b089      	sub	sp, #36	; 0x24
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004432:	2300      	movs	r3, #0
 8004434:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004436:	2300      	movs	r3, #0
 8004438:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800443a:	2300      	movs	r3, #0
 800443c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800443e:	2300      	movs	r3, #0
 8004440:	61fb      	str	r3, [r7, #28]
 8004442:	e177      	b.n	8004734 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004444:	2201      	movs	r2, #1
 8004446:	69fb      	ldr	r3, [r7, #28]
 8004448:	fa02 f303 	lsl.w	r3, r2, r3
 800444c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	697a      	ldr	r2, [r7, #20]
 8004454:	4013      	ands	r3, r2
 8004456:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004458:	693a      	ldr	r2, [r7, #16]
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	429a      	cmp	r2, r3
 800445e:	f040 8166 	bne.w	800472e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	f003 0303 	and.w	r3, r3, #3
 800446a:	2b01      	cmp	r3, #1
 800446c:	d005      	beq.n	800447a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004476:	2b02      	cmp	r3, #2
 8004478:	d130      	bne.n	80044dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	005b      	lsls	r3, r3, #1
 8004484:	2203      	movs	r2, #3
 8004486:	fa02 f303 	lsl.w	r3, r2, r3
 800448a:	43db      	mvns	r3, r3
 800448c:	69ba      	ldr	r2, [r7, #24]
 800448e:	4013      	ands	r3, r2
 8004490:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	68da      	ldr	r2, [r3, #12]
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	005b      	lsls	r3, r3, #1
 800449a:	fa02 f303 	lsl.w	r3, r2, r3
 800449e:	69ba      	ldr	r2, [r7, #24]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	69ba      	ldr	r2, [r7, #24]
 80044a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80044b0:	2201      	movs	r2, #1
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	fa02 f303 	lsl.w	r3, r2, r3
 80044b8:	43db      	mvns	r3, r3
 80044ba:	69ba      	ldr	r2, [r7, #24]
 80044bc:	4013      	ands	r3, r2
 80044be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	091b      	lsrs	r3, r3, #4
 80044c6:	f003 0201 	and.w	r2, r3, #1
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	fa02 f303 	lsl.w	r3, r2, r3
 80044d0:	69ba      	ldr	r2, [r7, #24]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	69ba      	ldr	r2, [r7, #24]
 80044da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f003 0303 	and.w	r3, r3, #3
 80044e4:	2b03      	cmp	r3, #3
 80044e6:	d017      	beq.n	8004518 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	005b      	lsls	r3, r3, #1
 80044f2:	2203      	movs	r2, #3
 80044f4:	fa02 f303 	lsl.w	r3, r2, r3
 80044f8:	43db      	mvns	r3, r3
 80044fa:	69ba      	ldr	r2, [r7, #24]
 80044fc:	4013      	ands	r3, r2
 80044fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	689a      	ldr	r2, [r3, #8]
 8004504:	69fb      	ldr	r3, [r7, #28]
 8004506:	005b      	lsls	r3, r3, #1
 8004508:	fa02 f303 	lsl.w	r3, r2, r3
 800450c:	69ba      	ldr	r2, [r7, #24]
 800450e:	4313      	orrs	r3, r2
 8004510:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	69ba      	ldr	r2, [r7, #24]
 8004516:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	f003 0303 	and.w	r3, r3, #3
 8004520:	2b02      	cmp	r3, #2
 8004522:	d123      	bne.n	800456c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	08da      	lsrs	r2, r3, #3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	3208      	adds	r2, #8
 800452c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004530:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	f003 0307 	and.w	r3, r3, #7
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	220f      	movs	r2, #15
 800453c:	fa02 f303 	lsl.w	r3, r2, r3
 8004540:	43db      	mvns	r3, r3
 8004542:	69ba      	ldr	r2, [r7, #24]
 8004544:	4013      	ands	r3, r2
 8004546:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	691a      	ldr	r2, [r3, #16]
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	f003 0307 	and.w	r3, r3, #7
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	fa02 f303 	lsl.w	r3, r2, r3
 8004558:	69ba      	ldr	r2, [r7, #24]
 800455a:	4313      	orrs	r3, r2
 800455c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	08da      	lsrs	r2, r3, #3
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	3208      	adds	r2, #8
 8004566:	69b9      	ldr	r1, [r7, #24]
 8004568:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	005b      	lsls	r3, r3, #1
 8004576:	2203      	movs	r2, #3
 8004578:	fa02 f303 	lsl.w	r3, r2, r3
 800457c:	43db      	mvns	r3, r3
 800457e:	69ba      	ldr	r2, [r7, #24]
 8004580:	4013      	ands	r3, r2
 8004582:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f003 0203 	and.w	r2, r3, #3
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	005b      	lsls	r3, r3, #1
 8004590:	fa02 f303 	lsl.w	r3, r2, r3
 8004594:	69ba      	ldr	r2, [r7, #24]
 8004596:	4313      	orrs	r3, r2
 8004598:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	69ba      	ldr	r2, [r7, #24]
 800459e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	f000 80c0 	beq.w	800472e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045ae:	2300      	movs	r3, #0
 80045b0:	60fb      	str	r3, [r7, #12]
 80045b2:	4b66      	ldr	r3, [pc, #408]	; (800474c <HAL_GPIO_Init+0x324>)
 80045b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045b6:	4a65      	ldr	r2, [pc, #404]	; (800474c <HAL_GPIO_Init+0x324>)
 80045b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80045bc:	6453      	str	r3, [r2, #68]	; 0x44
 80045be:	4b63      	ldr	r3, [pc, #396]	; (800474c <HAL_GPIO_Init+0x324>)
 80045c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045c6:	60fb      	str	r3, [r7, #12]
 80045c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80045ca:	4a61      	ldr	r2, [pc, #388]	; (8004750 <HAL_GPIO_Init+0x328>)
 80045cc:	69fb      	ldr	r3, [r7, #28]
 80045ce:	089b      	lsrs	r3, r3, #2
 80045d0:	3302      	adds	r3, #2
 80045d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80045d8:	69fb      	ldr	r3, [r7, #28]
 80045da:	f003 0303 	and.w	r3, r3, #3
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	220f      	movs	r2, #15
 80045e2:	fa02 f303 	lsl.w	r3, r2, r3
 80045e6:	43db      	mvns	r3, r3
 80045e8:	69ba      	ldr	r2, [r7, #24]
 80045ea:	4013      	ands	r3, r2
 80045ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4a58      	ldr	r2, [pc, #352]	; (8004754 <HAL_GPIO_Init+0x32c>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d037      	beq.n	8004666 <HAL_GPIO_Init+0x23e>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4a57      	ldr	r2, [pc, #348]	; (8004758 <HAL_GPIO_Init+0x330>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d031      	beq.n	8004662 <HAL_GPIO_Init+0x23a>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4a56      	ldr	r2, [pc, #344]	; (800475c <HAL_GPIO_Init+0x334>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d02b      	beq.n	800465e <HAL_GPIO_Init+0x236>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4a55      	ldr	r2, [pc, #340]	; (8004760 <HAL_GPIO_Init+0x338>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d025      	beq.n	800465a <HAL_GPIO_Init+0x232>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4a54      	ldr	r2, [pc, #336]	; (8004764 <HAL_GPIO_Init+0x33c>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d01f      	beq.n	8004656 <HAL_GPIO_Init+0x22e>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4a53      	ldr	r2, [pc, #332]	; (8004768 <HAL_GPIO_Init+0x340>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d019      	beq.n	8004652 <HAL_GPIO_Init+0x22a>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4a52      	ldr	r2, [pc, #328]	; (800476c <HAL_GPIO_Init+0x344>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d013      	beq.n	800464e <HAL_GPIO_Init+0x226>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4a51      	ldr	r2, [pc, #324]	; (8004770 <HAL_GPIO_Init+0x348>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d00d      	beq.n	800464a <HAL_GPIO_Init+0x222>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a50      	ldr	r2, [pc, #320]	; (8004774 <HAL_GPIO_Init+0x34c>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d007      	beq.n	8004646 <HAL_GPIO_Init+0x21e>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a4f      	ldr	r2, [pc, #316]	; (8004778 <HAL_GPIO_Init+0x350>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d101      	bne.n	8004642 <HAL_GPIO_Init+0x21a>
 800463e:	2309      	movs	r3, #9
 8004640:	e012      	b.n	8004668 <HAL_GPIO_Init+0x240>
 8004642:	230a      	movs	r3, #10
 8004644:	e010      	b.n	8004668 <HAL_GPIO_Init+0x240>
 8004646:	2308      	movs	r3, #8
 8004648:	e00e      	b.n	8004668 <HAL_GPIO_Init+0x240>
 800464a:	2307      	movs	r3, #7
 800464c:	e00c      	b.n	8004668 <HAL_GPIO_Init+0x240>
 800464e:	2306      	movs	r3, #6
 8004650:	e00a      	b.n	8004668 <HAL_GPIO_Init+0x240>
 8004652:	2305      	movs	r3, #5
 8004654:	e008      	b.n	8004668 <HAL_GPIO_Init+0x240>
 8004656:	2304      	movs	r3, #4
 8004658:	e006      	b.n	8004668 <HAL_GPIO_Init+0x240>
 800465a:	2303      	movs	r3, #3
 800465c:	e004      	b.n	8004668 <HAL_GPIO_Init+0x240>
 800465e:	2302      	movs	r3, #2
 8004660:	e002      	b.n	8004668 <HAL_GPIO_Init+0x240>
 8004662:	2301      	movs	r3, #1
 8004664:	e000      	b.n	8004668 <HAL_GPIO_Init+0x240>
 8004666:	2300      	movs	r3, #0
 8004668:	69fa      	ldr	r2, [r7, #28]
 800466a:	f002 0203 	and.w	r2, r2, #3
 800466e:	0092      	lsls	r2, r2, #2
 8004670:	4093      	lsls	r3, r2
 8004672:	69ba      	ldr	r2, [r7, #24]
 8004674:	4313      	orrs	r3, r2
 8004676:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004678:	4935      	ldr	r1, [pc, #212]	; (8004750 <HAL_GPIO_Init+0x328>)
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	089b      	lsrs	r3, r3, #2
 800467e:	3302      	adds	r3, #2
 8004680:	69ba      	ldr	r2, [r7, #24]
 8004682:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004686:	4b3d      	ldr	r3, [pc, #244]	; (800477c <HAL_GPIO_Init+0x354>)
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	43db      	mvns	r3, r3
 8004690:	69ba      	ldr	r2, [r7, #24]
 8004692:	4013      	ands	r3, r2
 8004694:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d003      	beq.n	80046aa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80046a2:	69ba      	ldr	r2, [r7, #24]
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80046aa:	4a34      	ldr	r2, [pc, #208]	; (800477c <HAL_GPIO_Init+0x354>)
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80046b0:	4b32      	ldr	r3, [pc, #200]	; (800477c <HAL_GPIO_Init+0x354>)
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	43db      	mvns	r3, r3
 80046ba:	69ba      	ldr	r2, [r7, #24]
 80046bc:	4013      	ands	r3, r2
 80046be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d003      	beq.n	80046d4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80046cc:	69ba      	ldr	r2, [r7, #24]
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	4313      	orrs	r3, r2
 80046d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80046d4:	4a29      	ldr	r2, [pc, #164]	; (800477c <HAL_GPIO_Init+0x354>)
 80046d6:	69bb      	ldr	r3, [r7, #24]
 80046d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80046da:	4b28      	ldr	r3, [pc, #160]	; (800477c <HAL_GPIO_Init+0x354>)
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	43db      	mvns	r3, r3
 80046e4:	69ba      	ldr	r2, [r7, #24]
 80046e6:	4013      	ands	r3, r2
 80046e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d003      	beq.n	80046fe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80046f6:	69ba      	ldr	r2, [r7, #24]
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80046fe:	4a1f      	ldr	r2, [pc, #124]	; (800477c <HAL_GPIO_Init+0x354>)
 8004700:	69bb      	ldr	r3, [r7, #24]
 8004702:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004704:	4b1d      	ldr	r3, [pc, #116]	; (800477c <HAL_GPIO_Init+0x354>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	43db      	mvns	r3, r3
 800470e:	69ba      	ldr	r2, [r7, #24]
 8004710:	4013      	ands	r3, r2
 8004712:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800471c:	2b00      	cmp	r3, #0
 800471e:	d003      	beq.n	8004728 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004720:	69ba      	ldr	r2, [r7, #24]
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	4313      	orrs	r3, r2
 8004726:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004728:	4a14      	ldr	r2, [pc, #80]	; (800477c <HAL_GPIO_Init+0x354>)
 800472a:	69bb      	ldr	r3, [r7, #24]
 800472c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	3301      	adds	r3, #1
 8004732:	61fb      	str	r3, [r7, #28]
 8004734:	69fb      	ldr	r3, [r7, #28]
 8004736:	2b0f      	cmp	r3, #15
 8004738:	f67f ae84 	bls.w	8004444 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800473c:	bf00      	nop
 800473e:	bf00      	nop
 8004740:	3724      	adds	r7, #36	; 0x24
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr
 800474a:	bf00      	nop
 800474c:	40023800 	.word	0x40023800
 8004750:	40013800 	.word	0x40013800
 8004754:	40020000 	.word	0x40020000
 8004758:	40020400 	.word	0x40020400
 800475c:	40020800 	.word	0x40020800
 8004760:	40020c00 	.word	0x40020c00
 8004764:	40021000 	.word	0x40021000
 8004768:	40021400 	.word	0x40021400
 800476c:	40021800 	.word	0x40021800
 8004770:	40021c00 	.word	0x40021c00
 8004774:	40022000 	.word	0x40022000
 8004778:	40022400 	.word	0x40022400
 800477c:	40013c00 	.word	0x40013c00

08004780 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004780:	b480      	push	{r7}
 8004782:	b085      	sub	sp, #20
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	460b      	mov	r3, r1
 800478a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	691a      	ldr	r2, [r3, #16]
 8004790:	887b      	ldrh	r3, [r7, #2]
 8004792:	4013      	ands	r3, r2
 8004794:	2b00      	cmp	r3, #0
 8004796:	d002      	beq.n	800479e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004798:	2301      	movs	r3, #1
 800479a:	73fb      	strb	r3, [r7, #15]
 800479c:	e001      	b.n	80047a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800479e:	2300      	movs	r3, #0
 80047a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80047a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3714      	adds	r7, #20
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	460b      	mov	r3, r1
 80047ba:	807b      	strh	r3, [r7, #2]
 80047bc:	4613      	mov	r3, r2
 80047be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80047c0:	787b      	ldrb	r3, [r7, #1]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d003      	beq.n	80047ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80047c6:	887a      	ldrh	r2, [r7, #2]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80047cc:	e003      	b.n	80047d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80047ce:	887b      	ldrh	r3, [r7, #2]
 80047d0:	041a      	lsls	r2, r3, #16
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	619a      	str	r2, [r3, #24]
}
 80047d6:	bf00      	nop
 80047d8:	370c      	adds	r7, #12
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr

080047e2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80047e2:	b480      	push	{r7}
 80047e4:	b085      	sub	sp, #20
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	6078      	str	r0, [r7, #4]
 80047ea:	460b      	mov	r3, r1
 80047ec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	695b      	ldr	r3, [r3, #20]
 80047f2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80047f4:	887a      	ldrh	r2, [r7, #2]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	4013      	ands	r3, r2
 80047fa:	041a      	lsls	r2, r3, #16
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	43d9      	mvns	r1, r3
 8004800:	887b      	ldrh	r3, [r7, #2]
 8004802:	400b      	ands	r3, r1
 8004804:	431a      	orrs	r2, r3
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	619a      	str	r2, [r3, #24]
}
 800480a:	bf00      	nop
 800480c:	3714      	adds	r7, #20
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr
	...

08004818 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b084      	sub	sp, #16
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d101      	bne.n	800482a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e12b      	b.n	8004a82 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004830:	b2db      	uxtb	r3, r3
 8004832:	2b00      	cmp	r3, #0
 8004834:	d106      	bne.n	8004844 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f7fd f91e 	bl	8001a80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2224      	movs	r2, #36	; 0x24
 8004848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f022 0201 	bic.w	r2, r2, #1
 800485a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800486a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800487a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800487c:	f000 ff72 	bl	8005764 <HAL_RCC_GetPCLK1Freq>
 8004880:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	4a81      	ldr	r2, [pc, #516]	; (8004a8c <HAL_I2C_Init+0x274>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d807      	bhi.n	800489c <HAL_I2C_Init+0x84>
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	4a80      	ldr	r2, [pc, #512]	; (8004a90 <HAL_I2C_Init+0x278>)
 8004890:	4293      	cmp	r3, r2
 8004892:	bf94      	ite	ls
 8004894:	2301      	movls	r3, #1
 8004896:	2300      	movhi	r3, #0
 8004898:	b2db      	uxtb	r3, r3
 800489a:	e006      	b.n	80048aa <HAL_I2C_Init+0x92>
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	4a7d      	ldr	r2, [pc, #500]	; (8004a94 <HAL_I2C_Init+0x27c>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	bf94      	ite	ls
 80048a4:	2301      	movls	r3, #1
 80048a6:	2300      	movhi	r3, #0
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d001      	beq.n	80048b2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e0e7      	b.n	8004a82 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	4a78      	ldr	r2, [pc, #480]	; (8004a98 <HAL_I2C_Init+0x280>)
 80048b6:	fba2 2303 	umull	r2, r3, r2, r3
 80048ba:	0c9b      	lsrs	r3, r3, #18
 80048bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	68ba      	ldr	r2, [r7, #8]
 80048ce:	430a      	orrs	r2, r1
 80048d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	6a1b      	ldr	r3, [r3, #32]
 80048d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	4a6a      	ldr	r2, [pc, #424]	; (8004a8c <HAL_I2C_Init+0x274>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d802      	bhi.n	80048ec <HAL_I2C_Init+0xd4>
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	3301      	adds	r3, #1
 80048ea:	e009      	b.n	8004900 <HAL_I2C_Init+0xe8>
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80048f2:	fb02 f303 	mul.w	r3, r2, r3
 80048f6:	4a69      	ldr	r2, [pc, #420]	; (8004a9c <HAL_I2C_Init+0x284>)
 80048f8:	fba2 2303 	umull	r2, r3, r2, r3
 80048fc:	099b      	lsrs	r3, r3, #6
 80048fe:	3301      	adds	r3, #1
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	6812      	ldr	r2, [r2, #0]
 8004904:	430b      	orrs	r3, r1
 8004906:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	69db      	ldr	r3, [r3, #28]
 800490e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004912:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	495c      	ldr	r1, [pc, #368]	; (8004a8c <HAL_I2C_Init+0x274>)
 800491c:	428b      	cmp	r3, r1
 800491e:	d819      	bhi.n	8004954 <HAL_I2C_Init+0x13c>
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	1e59      	subs	r1, r3, #1
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	005b      	lsls	r3, r3, #1
 800492a:	fbb1 f3f3 	udiv	r3, r1, r3
 800492e:	1c59      	adds	r1, r3, #1
 8004930:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004934:	400b      	ands	r3, r1
 8004936:	2b00      	cmp	r3, #0
 8004938:	d00a      	beq.n	8004950 <HAL_I2C_Init+0x138>
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	1e59      	subs	r1, r3, #1
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	005b      	lsls	r3, r3, #1
 8004944:	fbb1 f3f3 	udiv	r3, r1, r3
 8004948:	3301      	adds	r3, #1
 800494a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800494e:	e051      	b.n	80049f4 <HAL_I2C_Init+0x1dc>
 8004950:	2304      	movs	r3, #4
 8004952:	e04f      	b.n	80049f4 <HAL_I2C_Init+0x1dc>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d111      	bne.n	8004980 <HAL_I2C_Init+0x168>
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	1e58      	subs	r0, r3, #1
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6859      	ldr	r1, [r3, #4]
 8004964:	460b      	mov	r3, r1
 8004966:	005b      	lsls	r3, r3, #1
 8004968:	440b      	add	r3, r1
 800496a:	fbb0 f3f3 	udiv	r3, r0, r3
 800496e:	3301      	adds	r3, #1
 8004970:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004974:	2b00      	cmp	r3, #0
 8004976:	bf0c      	ite	eq
 8004978:	2301      	moveq	r3, #1
 800497a:	2300      	movne	r3, #0
 800497c:	b2db      	uxtb	r3, r3
 800497e:	e012      	b.n	80049a6 <HAL_I2C_Init+0x18e>
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	1e58      	subs	r0, r3, #1
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6859      	ldr	r1, [r3, #4]
 8004988:	460b      	mov	r3, r1
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	440b      	add	r3, r1
 800498e:	0099      	lsls	r1, r3, #2
 8004990:	440b      	add	r3, r1
 8004992:	fbb0 f3f3 	udiv	r3, r0, r3
 8004996:	3301      	adds	r3, #1
 8004998:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800499c:	2b00      	cmp	r3, #0
 800499e:	bf0c      	ite	eq
 80049a0:	2301      	moveq	r3, #1
 80049a2:	2300      	movne	r3, #0
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d001      	beq.n	80049ae <HAL_I2C_Init+0x196>
 80049aa:	2301      	movs	r3, #1
 80049ac:	e022      	b.n	80049f4 <HAL_I2C_Init+0x1dc>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d10e      	bne.n	80049d4 <HAL_I2C_Init+0x1bc>
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	1e58      	subs	r0, r3, #1
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6859      	ldr	r1, [r3, #4]
 80049be:	460b      	mov	r3, r1
 80049c0:	005b      	lsls	r3, r3, #1
 80049c2:	440b      	add	r3, r1
 80049c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80049c8:	3301      	adds	r3, #1
 80049ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049d2:	e00f      	b.n	80049f4 <HAL_I2C_Init+0x1dc>
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	1e58      	subs	r0, r3, #1
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6859      	ldr	r1, [r3, #4]
 80049dc:	460b      	mov	r3, r1
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	440b      	add	r3, r1
 80049e2:	0099      	lsls	r1, r3, #2
 80049e4:	440b      	add	r3, r1
 80049e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80049ea:	3301      	adds	r3, #1
 80049ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80049f4:	6879      	ldr	r1, [r7, #4]
 80049f6:	6809      	ldr	r1, [r1, #0]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	69da      	ldr	r2, [r3, #28]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a1b      	ldr	r3, [r3, #32]
 8004a0e:	431a      	orrs	r2, r3
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	430a      	orrs	r2, r1
 8004a16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004a22:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	6911      	ldr	r1, [r2, #16]
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	68d2      	ldr	r2, [r2, #12]
 8004a2e:	4311      	orrs	r1, r2
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	6812      	ldr	r2, [r2, #0]
 8004a34:	430b      	orrs	r3, r1
 8004a36:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	68db      	ldr	r3, [r3, #12]
 8004a3e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	695a      	ldr	r2, [r3, #20]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	699b      	ldr	r3, [r3, #24]
 8004a4a:	431a      	orrs	r2, r3
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	430a      	orrs	r2, r1
 8004a52:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f042 0201 	orr.w	r2, r2, #1
 8004a62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2220      	movs	r2, #32
 8004a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004a80:	2300      	movs	r3, #0
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3710      	adds	r7, #16
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	000186a0 	.word	0x000186a0
 8004a90:	001e847f 	.word	0x001e847f
 8004a94:	003d08ff 	.word	0x003d08ff
 8004a98:	431bde83 	.word	0x431bde83
 8004a9c:	10624dd3 	.word	0x10624dd3

08004aa0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b083      	sub	sp, #12
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	2b20      	cmp	r3, #32
 8004ab4:	d129      	bne.n	8004b0a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2224      	movs	r2, #36	; 0x24
 8004aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f022 0201 	bic.w	r2, r2, #1
 8004acc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f022 0210 	bic.w	r2, r2, #16
 8004adc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	683a      	ldr	r2, [r7, #0]
 8004aea:	430a      	orrs	r2, r1
 8004aec:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f042 0201 	orr.w	r2, r2, #1
 8004afc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2220      	movs	r2, #32
 8004b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004b06:	2300      	movs	r3, #0
 8004b08:	e000      	b.n	8004b0c <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004b0a:	2302      	movs	r3, #2
  }
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	370c      	adds	r7, #12
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr

08004b18 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b085      	sub	sp, #20
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004b22:	2300      	movs	r3, #0
 8004b24:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	2b20      	cmp	r3, #32
 8004b30:	d12a      	bne.n	8004b88 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2224      	movs	r2, #36	; 0x24
 8004b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f022 0201 	bic.w	r2, r2, #1
 8004b48:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b50:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004b52:	89fb      	ldrh	r3, [r7, #14]
 8004b54:	f023 030f 	bic.w	r3, r3, #15
 8004b58:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	b29a      	uxth	r2, r3
 8004b5e:	89fb      	ldrh	r3, [r7, #14]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	89fa      	ldrh	r2, [r7, #14]
 8004b6a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f042 0201 	orr.w	r2, r2, #1
 8004b7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2220      	movs	r2, #32
 8004b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004b84:	2300      	movs	r3, #0
 8004b86:	e000      	b.n	8004b8a <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004b88:	2302      	movs	r3, #2
  }
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3714      	adds	r7, #20
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr

08004b96 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004b96:	b580      	push	{r7, lr}
 8004b98:	b086      	sub	sp, #24
 8004b9a:	af02      	add	r7, sp, #8
 8004b9c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d101      	bne.n	8004ba8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e101      	b.n	8004dac <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d106      	bne.n	8004bc8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f7fd f85a 	bl	8001c7c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2203      	movs	r2, #3
 8004bcc:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004bd6:	d102      	bne.n	8004bde <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4618      	mov	r0, r3
 8004be4:	f002 fa68 	bl	80070b8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6818      	ldr	r0, [r3, #0]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	7c1a      	ldrb	r2, [r3, #16]
 8004bf0:	f88d 2000 	strb.w	r2, [sp]
 8004bf4:	3304      	adds	r3, #4
 8004bf6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004bf8:	f002 f9fa 	bl	8006ff0 <USB_CoreInit>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d005      	beq.n	8004c0e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2202      	movs	r2, #2
 8004c06:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e0ce      	b.n	8004dac <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	2100      	movs	r1, #0
 8004c14:	4618      	mov	r0, r3
 8004c16:	f002 fa60 	bl	80070da <USB_SetCurrentMode>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d005      	beq.n	8004c2c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2202      	movs	r2, #2
 8004c24:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e0bf      	b.n	8004dac <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	73fb      	strb	r3, [r7, #15]
 8004c30:	e04a      	b.n	8004cc8 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004c32:	7bfa      	ldrb	r2, [r7, #15]
 8004c34:	6879      	ldr	r1, [r7, #4]
 8004c36:	4613      	mov	r3, r2
 8004c38:	00db      	lsls	r3, r3, #3
 8004c3a:	4413      	add	r3, r2
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	440b      	add	r3, r1
 8004c40:	3315      	adds	r3, #21
 8004c42:	2201      	movs	r2, #1
 8004c44:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004c46:	7bfa      	ldrb	r2, [r7, #15]
 8004c48:	6879      	ldr	r1, [r7, #4]
 8004c4a:	4613      	mov	r3, r2
 8004c4c:	00db      	lsls	r3, r3, #3
 8004c4e:	4413      	add	r3, r2
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	440b      	add	r3, r1
 8004c54:	3314      	adds	r3, #20
 8004c56:	7bfa      	ldrb	r2, [r7, #15]
 8004c58:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004c5a:	7bfa      	ldrb	r2, [r7, #15]
 8004c5c:	7bfb      	ldrb	r3, [r7, #15]
 8004c5e:	b298      	uxth	r0, r3
 8004c60:	6879      	ldr	r1, [r7, #4]
 8004c62:	4613      	mov	r3, r2
 8004c64:	00db      	lsls	r3, r3, #3
 8004c66:	4413      	add	r3, r2
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	440b      	add	r3, r1
 8004c6c:	332e      	adds	r3, #46	; 0x2e
 8004c6e:	4602      	mov	r2, r0
 8004c70:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004c72:	7bfa      	ldrb	r2, [r7, #15]
 8004c74:	6879      	ldr	r1, [r7, #4]
 8004c76:	4613      	mov	r3, r2
 8004c78:	00db      	lsls	r3, r3, #3
 8004c7a:	4413      	add	r3, r2
 8004c7c:	009b      	lsls	r3, r3, #2
 8004c7e:	440b      	add	r3, r1
 8004c80:	3318      	adds	r3, #24
 8004c82:	2200      	movs	r2, #0
 8004c84:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004c86:	7bfa      	ldrb	r2, [r7, #15]
 8004c88:	6879      	ldr	r1, [r7, #4]
 8004c8a:	4613      	mov	r3, r2
 8004c8c:	00db      	lsls	r3, r3, #3
 8004c8e:	4413      	add	r3, r2
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	440b      	add	r3, r1
 8004c94:	331c      	adds	r3, #28
 8004c96:	2200      	movs	r2, #0
 8004c98:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004c9a:	7bfa      	ldrb	r2, [r7, #15]
 8004c9c:	6879      	ldr	r1, [r7, #4]
 8004c9e:	4613      	mov	r3, r2
 8004ca0:	00db      	lsls	r3, r3, #3
 8004ca2:	4413      	add	r3, r2
 8004ca4:	009b      	lsls	r3, r3, #2
 8004ca6:	440b      	add	r3, r1
 8004ca8:	3320      	adds	r3, #32
 8004caa:	2200      	movs	r2, #0
 8004cac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004cae:	7bfa      	ldrb	r2, [r7, #15]
 8004cb0:	6879      	ldr	r1, [r7, #4]
 8004cb2:	4613      	mov	r3, r2
 8004cb4:	00db      	lsls	r3, r3, #3
 8004cb6:	4413      	add	r3, r2
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	440b      	add	r3, r1
 8004cbc:	3324      	adds	r3, #36	; 0x24
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004cc2:	7bfb      	ldrb	r3, [r7, #15]
 8004cc4:	3301      	adds	r3, #1
 8004cc6:	73fb      	strb	r3, [r7, #15]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	791b      	ldrb	r3, [r3, #4]
 8004ccc:	7bfa      	ldrb	r2, [r7, #15]
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d3af      	bcc.n	8004c32 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	73fb      	strb	r3, [r7, #15]
 8004cd6:	e044      	b.n	8004d62 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004cd8:	7bfa      	ldrb	r2, [r7, #15]
 8004cda:	6879      	ldr	r1, [r7, #4]
 8004cdc:	4613      	mov	r3, r2
 8004cde:	00db      	lsls	r3, r3, #3
 8004ce0:	4413      	add	r3, r2
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	440b      	add	r3, r1
 8004ce6:	f203 2355 	addw	r3, r3, #597	; 0x255
 8004cea:	2200      	movs	r2, #0
 8004cec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004cee:	7bfa      	ldrb	r2, [r7, #15]
 8004cf0:	6879      	ldr	r1, [r7, #4]
 8004cf2:	4613      	mov	r3, r2
 8004cf4:	00db      	lsls	r3, r3, #3
 8004cf6:	4413      	add	r3, r2
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	440b      	add	r3, r1
 8004cfc:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8004d00:	7bfa      	ldrb	r2, [r7, #15]
 8004d02:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004d04:	7bfa      	ldrb	r2, [r7, #15]
 8004d06:	6879      	ldr	r1, [r7, #4]
 8004d08:	4613      	mov	r3, r2
 8004d0a:	00db      	lsls	r3, r3, #3
 8004d0c:	4413      	add	r3, r2
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	440b      	add	r3, r1
 8004d12:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8004d16:	2200      	movs	r2, #0
 8004d18:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004d1a:	7bfa      	ldrb	r2, [r7, #15]
 8004d1c:	6879      	ldr	r1, [r7, #4]
 8004d1e:	4613      	mov	r3, r2
 8004d20:	00db      	lsls	r3, r3, #3
 8004d22:	4413      	add	r3, r2
 8004d24:	009b      	lsls	r3, r3, #2
 8004d26:	440b      	add	r3, r1
 8004d28:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004d30:	7bfa      	ldrb	r2, [r7, #15]
 8004d32:	6879      	ldr	r1, [r7, #4]
 8004d34:	4613      	mov	r3, r2
 8004d36:	00db      	lsls	r3, r3, #3
 8004d38:	4413      	add	r3, r2
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	440b      	add	r3, r1
 8004d3e:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8004d42:	2200      	movs	r2, #0
 8004d44:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004d46:	7bfa      	ldrb	r2, [r7, #15]
 8004d48:	6879      	ldr	r1, [r7, #4]
 8004d4a:	4613      	mov	r3, r2
 8004d4c:	00db      	lsls	r3, r3, #3
 8004d4e:	4413      	add	r3, r2
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	440b      	add	r3, r1
 8004d54:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8004d58:	2200      	movs	r2, #0
 8004d5a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d5c:	7bfb      	ldrb	r3, [r7, #15]
 8004d5e:	3301      	adds	r3, #1
 8004d60:	73fb      	strb	r3, [r7, #15]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	791b      	ldrb	r3, [r3, #4]
 8004d66:	7bfa      	ldrb	r2, [r7, #15]
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d3b5      	bcc.n	8004cd8 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6818      	ldr	r0, [r3, #0]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	7c1a      	ldrb	r2, [r3, #16]
 8004d74:	f88d 2000 	strb.w	r2, [sp]
 8004d78:	3304      	adds	r3, #4
 8004d7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d7c:	f002 f9fa 	bl	8007174 <USB_DevInit>
 8004d80:	4603      	mov	r3, r0
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d005      	beq.n	8004d92 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2202      	movs	r2, #2
 8004d8a:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e00c      	b.n	8004dac <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4618      	mov	r0, r3
 8004da6:	f002 fbc2 	bl	800752e <USB_DevDisconnect>

  return HAL_OK;
 8004daa:	2300      	movs	r3, #0
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3710      	adds	r7, #16
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}

08004db4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b086      	sub	sp, #24
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d101      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e267      	b.n	8005296 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 0301 	and.w	r3, r3, #1
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d075      	beq.n	8004ebe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004dd2:	4b88      	ldr	r3, [pc, #544]	; (8004ff4 <HAL_RCC_OscConfig+0x240>)
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	f003 030c 	and.w	r3, r3, #12
 8004dda:	2b04      	cmp	r3, #4
 8004ddc:	d00c      	beq.n	8004df8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004dde:	4b85      	ldr	r3, [pc, #532]	; (8004ff4 <HAL_RCC_OscConfig+0x240>)
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004de6:	2b08      	cmp	r3, #8
 8004de8:	d112      	bne.n	8004e10 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004dea:	4b82      	ldr	r3, [pc, #520]	; (8004ff4 <HAL_RCC_OscConfig+0x240>)
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004df2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004df6:	d10b      	bne.n	8004e10 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004df8:	4b7e      	ldr	r3, [pc, #504]	; (8004ff4 <HAL_RCC_OscConfig+0x240>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d05b      	beq.n	8004ebc <HAL_RCC_OscConfig+0x108>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d157      	bne.n	8004ebc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e242      	b.n	8005296 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e18:	d106      	bne.n	8004e28 <HAL_RCC_OscConfig+0x74>
 8004e1a:	4b76      	ldr	r3, [pc, #472]	; (8004ff4 <HAL_RCC_OscConfig+0x240>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a75      	ldr	r2, [pc, #468]	; (8004ff4 <HAL_RCC_OscConfig+0x240>)
 8004e20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e24:	6013      	str	r3, [r2, #0]
 8004e26:	e01d      	b.n	8004e64 <HAL_RCC_OscConfig+0xb0>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e30:	d10c      	bne.n	8004e4c <HAL_RCC_OscConfig+0x98>
 8004e32:	4b70      	ldr	r3, [pc, #448]	; (8004ff4 <HAL_RCC_OscConfig+0x240>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a6f      	ldr	r2, [pc, #444]	; (8004ff4 <HAL_RCC_OscConfig+0x240>)
 8004e38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e3c:	6013      	str	r3, [r2, #0]
 8004e3e:	4b6d      	ldr	r3, [pc, #436]	; (8004ff4 <HAL_RCC_OscConfig+0x240>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a6c      	ldr	r2, [pc, #432]	; (8004ff4 <HAL_RCC_OscConfig+0x240>)
 8004e44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e48:	6013      	str	r3, [r2, #0]
 8004e4a:	e00b      	b.n	8004e64 <HAL_RCC_OscConfig+0xb0>
 8004e4c:	4b69      	ldr	r3, [pc, #420]	; (8004ff4 <HAL_RCC_OscConfig+0x240>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a68      	ldr	r2, [pc, #416]	; (8004ff4 <HAL_RCC_OscConfig+0x240>)
 8004e52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e56:	6013      	str	r3, [r2, #0]
 8004e58:	4b66      	ldr	r3, [pc, #408]	; (8004ff4 <HAL_RCC_OscConfig+0x240>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a65      	ldr	r2, [pc, #404]	; (8004ff4 <HAL_RCC_OscConfig+0x240>)
 8004e5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d013      	beq.n	8004e94 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e6c:	f7fd f930 	bl	80020d0 <HAL_GetTick>
 8004e70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e72:	e008      	b.n	8004e86 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e74:	f7fd f92c 	bl	80020d0 <HAL_GetTick>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	1ad3      	subs	r3, r2, r3
 8004e7e:	2b64      	cmp	r3, #100	; 0x64
 8004e80:	d901      	bls.n	8004e86 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004e82:	2303      	movs	r3, #3
 8004e84:	e207      	b.n	8005296 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e86:	4b5b      	ldr	r3, [pc, #364]	; (8004ff4 <HAL_RCC_OscConfig+0x240>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d0f0      	beq.n	8004e74 <HAL_RCC_OscConfig+0xc0>
 8004e92:	e014      	b.n	8004ebe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e94:	f7fd f91c 	bl	80020d0 <HAL_GetTick>
 8004e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e9a:	e008      	b.n	8004eae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e9c:	f7fd f918 	bl	80020d0 <HAL_GetTick>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	2b64      	cmp	r3, #100	; 0x64
 8004ea8:	d901      	bls.n	8004eae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	e1f3      	b.n	8005296 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004eae:	4b51      	ldr	r3, [pc, #324]	; (8004ff4 <HAL_RCC_OscConfig+0x240>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d1f0      	bne.n	8004e9c <HAL_RCC_OscConfig+0xe8>
 8004eba:	e000      	b.n	8004ebe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ebc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 0302 	and.w	r3, r3, #2
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d063      	beq.n	8004f92 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004eca:	4b4a      	ldr	r3, [pc, #296]	; (8004ff4 <HAL_RCC_OscConfig+0x240>)
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	f003 030c 	and.w	r3, r3, #12
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d00b      	beq.n	8004eee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ed6:	4b47      	ldr	r3, [pc, #284]	; (8004ff4 <HAL_RCC_OscConfig+0x240>)
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004ede:	2b08      	cmp	r3, #8
 8004ee0:	d11c      	bne.n	8004f1c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ee2:	4b44      	ldr	r3, [pc, #272]	; (8004ff4 <HAL_RCC_OscConfig+0x240>)
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d116      	bne.n	8004f1c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004eee:	4b41      	ldr	r3, [pc, #260]	; (8004ff4 <HAL_RCC_OscConfig+0x240>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 0302 	and.w	r3, r3, #2
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d005      	beq.n	8004f06 <HAL_RCC_OscConfig+0x152>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	68db      	ldr	r3, [r3, #12]
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d001      	beq.n	8004f06 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e1c7      	b.n	8005296 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f06:	4b3b      	ldr	r3, [pc, #236]	; (8004ff4 <HAL_RCC_OscConfig+0x240>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	691b      	ldr	r3, [r3, #16]
 8004f12:	00db      	lsls	r3, r3, #3
 8004f14:	4937      	ldr	r1, [pc, #220]	; (8004ff4 <HAL_RCC_OscConfig+0x240>)
 8004f16:	4313      	orrs	r3, r2
 8004f18:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f1a:	e03a      	b.n	8004f92 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	68db      	ldr	r3, [r3, #12]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d020      	beq.n	8004f66 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f24:	4b34      	ldr	r3, [pc, #208]	; (8004ff8 <HAL_RCC_OscConfig+0x244>)
 8004f26:	2201      	movs	r2, #1
 8004f28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f2a:	f7fd f8d1 	bl	80020d0 <HAL_GetTick>
 8004f2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f30:	e008      	b.n	8004f44 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f32:	f7fd f8cd 	bl	80020d0 <HAL_GetTick>
 8004f36:	4602      	mov	r2, r0
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	1ad3      	subs	r3, r2, r3
 8004f3c:	2b02      	cmp	r3, #2
 8004f3e:	d901      	bls.n	8004f44 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004f40:	2303      	movs	r3, #3
 8004f42:	e1a8      	b.n	8005296 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f44:	4b2b      	ldr	r3, [pc, #172]	; (8004ff4 <HAL_RCC_OscConfig+0x240>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 0302 	and.w	r3, r3, #2
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d0f0      	beq.n	8004f32 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f50:	4b28      	ldr	r3, [pc, #160]	; (8004ff4 <HAL_RCC_OscConfig+0x240>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	691b      	ldr	r3, [r3, #16]
 8004f5c:	00db      	lsls	r3, r3, #3
 8004f5e:	4925      	ldr	r1, [pc, #148]	; (8004ff4 <HAL_RCC_OscConfig+0x240>)
 8004f60:	4313      	orrs	r3, r2
 8004f62:	600b      	str	r3, [r1, #0]
 8004f64:	e015      	b.n	8004f92 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f66:	4b24      	ldr	r3, [pc, #144]	; (8004ff8 <HAL_RCC_OscConfig+0x244>)
 8004f68:	2200      	movs	r2, #0
 8004f6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f6c:	f7fd f8b0 	bl	80020d0 <HAL_GetTick>
 8004f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f72:	e008      	b.n	8004f86 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f74:	f7fd f8ac 	bl	80020d0 <HAL_GetTick>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	2b02      	cmp	r3, #2
 8004f80:	d901      	bls.n	8004f86 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004f82:	2303      	movs	r3, #3
 8004f84:	e187      	b.n	8005296 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f86:	4b1b      	ldr	r3, [pc, #108]	; (8004ff4 <HAL_RCC_OscConfig+0x240>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 0302 	and.w	r3, r3, #2
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d1f0      	bne.n	8004f74 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 0308 	and.w	r3, r3, #8
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d036      	beq.n	800500c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	695b      	ldr	r3, [r3, #20]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d016      	beq.n	8004fd4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fa6:	4b15      	ldr	r3, [pc, #84]	; (8004ffc <HAL_RCC_OscConfig+0x248>)
 8004fa8:	2201      	movs	r2, #1
 8004faa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fac:	f7fd f890 	bl	80020d0 <HAL_GetTick>
 8004fb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fb2:	e008      	b.n	8004fc6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004fb4:	f7fd f88c 	bl	80020d0 <HAL_GetTick>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	2b02      	cmp	r3, #2
 8004fc0:	d901      	bls.n	8004fc6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	e167      	b.n	8005296 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fc6:	4b0b      	ldr	r3, [pc, #44]	; (8004ff4 <HAL_RCC_OscConfig+0x240>)
 8004fc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fca:	f003 0302 	and.w	r3, r3, #2
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d0f0      	beq.n	8004fb4 <HAL_RCC_OscConfig+0x200>
 8004fd2:	e01b      	b.n	800500c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fd4:	4b09      	ldr	r3, [pc, #36]	; (8004ffc <HAL_RCC_OscConfig+0x248>)
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fda:	f7fd f879 	bl	80020d0 <HAL_GetTick>
 8004fde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fe0:	e00e      	b.n	8005000 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004fe2:	f7fd f875 	bl	80020d0 <HAL_GetTick>
 8004fe6:	4602      	mov	r2, r0
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	1ad3      	subs	r3, r2, r3
 8004fec:	2b02      	cmp	r3, #2
 8004fee:	d907      	bls.n	8005000 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004ff0:	2303      	movs	r3, #3
 8004ff2:	e150      	b.n	8005296 <HAL_RCC_OscConfig+0x4e2>
 8004ff4:	40023800 	.word	0x40023800
 8004ff8:	42470000 	.word	0x42470000
 8004ffc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005000:	4b88      	ldr	r3, [pc, #544]	; (8005224 <HAL_RCC_OscConfig+0x470>)
 8005002:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005004:	f003 0302 	and.w	r3, r3, #2
 8005008:	2b00      	cmp	r3, #0
 800500a:	d1ea      	bne.n	8004fe2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 0304 	and.w	r3, r3, #4
 8005014:	2b00      	cmp	r3, #0
 8005016:	f000 8097 	beq.w	8005148 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800501a:	2300      	movs	r3, #0
 800501c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800501e:	4b81      	ldr	r3, [pc, #516]	; (8005224 <HAL_RCC_OscConfig+0x470>)
 8005020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d10f      	bne.n	800504a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800502a:	2300      	movs	r3, #0
 800502c:	60bb      	str	r3, [r7, #8]
 800502e:	4b7d      	ldr	r3, [pc, #500]	; (8005224 <HAL_RCC_OscConfig+0x470>)
 8005030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005032:	4a7c      	ldr	r2, [pc, #496]	; (8005224 <HAL_RCC_OscConfig+0x470>)
 8005034:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005038:	6413      	str	r3, [r2, #64]	; 0x40
 800503a:	4b7a      	ldr	r3, [pc, #488]	; (8005224 <HAL_RCC_OscConfig+0x470>)
 800503c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005042:	60bb      	str	r3, [r7, #8]
 8005044:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005046:	2301      	movs	r3, #1
 8005048:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800504a:	4b77      	ldr	r3, [pc, #476]	; (8005228 <HAL_RCC_OscConfig+0x474>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005052:	2b00      	cmp	r3, #0
 8005054:	d118      	bne.n	8005088 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005056:	4b74      	ldr	r3, [pc, #464]	; (8005228 <HAL_RCC_OscConfig+0x474>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a73      	ldr	r2, [pc, #460]	; (8005228 <HAL_RCC_OscConfig+0x474>)
 800505c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005060:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005062:	f7fd f835 	bl	80020d0 <HAL_GetTick>
 8005066:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005068:	e008      	b.n	800507c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800506a:	f7fd f831 	bl	80020d0 <HAL_GetTick>
 800506e:	4602      	mov	r2, r0
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	1ad3      	subs	r3, r2, r3
 8005074:	2b02      	cmp	r3, #2
 8005076:	d901      	bls.n	800507c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005078:	2303      	movs	r3, #3
 800507a:	e10c      	b.n	8005296 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800507c:	4b6a      	ldr	r3, [pc, #424]	; (8005228 <HAL_RCC_OscConfig+0x474>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005084:	2b00      	cmp	r3, #0
 8005086:	d0f0      	beq.n	800506a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	2b01      	cmp	r3, #1
 800508e:	d106      	bne.n	800509e <HAL_RCC_OscConfig+0x2ea>
 8005090:	4b64      	ldr	r3, [pc, #400]	; (8005224 <HAL_RCC_OscConfig+0x470>)
 8005092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005094:	4a63      	ldr	r2, [pc, #396]	; (8005224 <HAL_RCC_OscConfig+0x470>)
 8005096:	f043 0301 	orr.w	r3, r3, #1
 800509a:	6713      	str	r3, [r2, #112]	; 0x70
 800509c:	e01c      	b.n	80050d8 <HAL_RCC_OscConfig+0x324>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	2b05      	cmp	r3, #5
 80050a4:	d10c      	bne.n	80050c0 <HAL_RCC_OscConfig+0x30c>
 80050a6:	4b5f      	ldr	r3, [pc, #380]	; (8005224 <HAL_RCC_OscConfig+0x470>)
 80050a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050aa:	4a5e      	ldr	r2, [pc, #376]	; (8005224 <HAL_RCC_OscConfig+0x470>)
 80050ac:	f043 0304 	orr.w	r3, r3, #4
 80050b0:	6713      	str	r3, [r2, #112]	; 0x70
 80050b2:	4b5c      	ldr	r3, [pc, #368]	; (8005224 <HAL_RCC_OscConfig+0x470>)
 80050b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050b6:	4a5b      	ldr	r2, [pc, #364]	; (8005224 <HAL_RCC_OscConfig+0x470>)
 80050b8:	f043 0301 	orr.w	r3, r3, #1
 80050bc:	6713      	str	r3, [r2, #112]	; 0x70
 80050be:	e00b      	b.n	80050d8 <HAL_RCC_OscConfig+0x324>
 80050c0:	4b58      	ldr	r3, [pc, #352]	; (8005224 <HAL_RCC_OscConfig+0x470>)
 80050c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050c4:	4a57      	ldr	r2, [pc, #348]	; (8005224 <HAL_RCC_OscConfig+0x470>)
 80050c6:	f023 0301 	bic.w	r3, r3, #1
 80050ca:	6713      	str	r3, [r2, #112]	; 0x70
 80050cc:	4b55      	ldr	r3, [pc, #340]	; (8005224 <HAL_RCC_OscConfig+0x470>)
 80050ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050d0:	4a54      	ldr	r2, [pc, #336]	; (8005224 <HAL_RCC_OscConfig+0x470>)
 80050d2:	f023 0304 	bic.w	r3, r3, #4
 80050d6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d015      	beq.n	800510c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050e0:	f7fc fff6 	bl	80020d0 <HAL_GetTick>
 80050e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050e6:	e00a      	b.n	80050fe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050e8:	f7fc fff2 	bl	80020d0 <HAL_GetTick>
 80050ec:	4602      	mov	r2, r0
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	1ad3      	subs	r3, r2, r3
 80050f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d901      	bls.n	80050fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e0cb      	b.n	8005296 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050fe:	4b49      	ldr	r3, [pc, #292]	; (8005224 <HAL_RCC_OscConfig+0x470>)
 8005100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005102:	f003 0302 	and.w	r3, r3, #2
 8005106:	2b00      	cmp	r3, #0
 8005108:	d0ee      	beq.n	80050e8 <HAL_RCC_OscConfig+0x334>
 800510a:	e014      	b.n	8005136 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800510c:	f7fc ffe0 	bl	80020d0 <HAL_GetTick>
 8005110:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005112:	e00a      	b.n	800512a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005114:	f7fc ffdc 	bl	80020d0 <HAL_GetTick>
 8005118:	4602      	mov	r2, r0
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	1ad3      	subs	r3, r2, r3
 800511e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005122:	4293      	cmp	r3, r2
 8005124:	d901      	bls.n	800512a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005126:	2303      	movs	r3, #3
 8005128:	e0b5      	b.n	8005296 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800512a:	4b3e      	ldr	r3, [pc, #248]	; (8005224 <HAL_RCC_OscConfig+0x470>)
 800512c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800512e:	f003 0302 	and.w	r3, r3, #2
 8005132:	2b00      	cmp	r3, #0
 8005134:	d1ee      	bne.n	8005114 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005136:	7dfb      	ldrb	r3, [r7, #23]
 8005138:	2b01      	cmp	r3, #1
 800513a:	d105      	bne.n	8005148 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800513c:	4b39      	ldr	r3, [pc, #228]	; (8005224 <HAL_RCC_OscConfig+0x470>)
 800513e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005140:	4a38      	ldr	r2, [pc, #224]	; (8005224 <HAL_RCC_OscConfig+0x470>)
 8005142:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005146:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	699b      	ldr	r3, [r3, #24]
 800514c:	2b00      	cmp	r3, #0
 800514e:	f000 80a1 	beq.w	8005294 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005152:	4b34      	ldr	r3, [pc, #208]	; (8005224 <HAL_RCC_OscConfig+0x470>)
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	f003 030c 	and.w	r3, r3, #12
 800515a:	2b08      	cmp	r3, #8
 800515c:	d05c      	beq.n	8005218 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	699b      	ldr	r3, [r3, #24]
 8005162:	2b02      	cmp	r3, #2
 8005164:	d141      	bne.n	80051ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005166:	4b31      	ldr	r3, [pc, #196]	; (800522c <HAL_RCC_OscConfig+0x478>)
 8005168:	2200      	movs	r2, #0
 800516a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800516c:	f7fc ffb0 	bl	80020d0 <HAL_GetTick>
 8005170:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005172:	e008      	b.n	8005186 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005174:	f7fc ffac 	bl	80020d0 <HAL_GetTick>
 8005178:	4602      	mov	r2, r0
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	2b02      	cmp	r3, #2
 8005180:	d901      	bls.n	8005186 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005182:	2303      	movs	r3, #3
 8005184:	e087      	b.n	8005296 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005186:	4b27      	ldr	r3, [pc, #156]	; (8005224 <HAL_RCC_OscConfig+0x470>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800518e:	2b00      	cmp	r3, #0
 8005190:	d1f0      	bne.n	8005174 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	69da      	ldr	r2, [r3, #28]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a1b      	ldr	r3, [r3, #32]
 800519a:	431a      	orrs	r2, r3
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a0:	019b      	lsls	r3, r3, #6
 80051a2:	431a      	orrs	r2, r3
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051a8:	085b      	lsrs	r3, r3, #1
 80051aa:	3b01      	subs	r3, #1
 80051ac:	041b      	lsls	r3, r3, #16
 80051ae:	431a      	orrs	r2, r3
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b4:	061b      	lsls	r3, r3, #24
 80051b6:	491b      	ldr	r1, [pc, #108]	; (8005224 <HAL_RCC_OscConfig+0x470>)
 80051b8:	4313      	orrs	r3, r2
 80051ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051bc:	4b1b      	ldr	r3, [pc, #108]	; (800522c <HAL_RCC_OscConfig+0x478>)
 80051be:	2201      	movs	r2, #1
 80051c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051c2:	f7fc ff85 	bl	80020d0 <HAL_GetTick>
 80051c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051c8:	e008      	b.n	80051dc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051ca:	f7fc ff81 	bl	80020d0 <HAL_GetTick>
 80051ce:	4602      	mov	r2, r0
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	1ad3      	subs	r3, r2, r3
 80051d4:	2b02      	cmp	r3, #2
 80051d6:	d901      	bls.n	80051dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80051d8:	2303      	movs	r3, #3
 80051da:	e05c      	b.n	8005296 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051dc:	4b11      	ldr	r3, [pc, #68]	; (8005224 <HAL_RCC_OscConfig+0x470>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d0f0      	beq.n	80051ca <HAL_RCC_OscConfig+0x416>
 80051e8:	e054      	b.n	8005294 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051ea:	4b10      	ldr	r3, [pc, #64]	; (800522c <HAL_RCC_OscConfig+0x478>)
 80051ec:	2200      	movs	r2, #0
 80051ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051f0:	f7fc ff6e 	bl	80020d0 <HAL_GetTick>
 80051f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051f6:	e008      	b.n	800520a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051f8:	f7fc ff6a 	bl	80020d0 <HAL_GetTick>
 80051fc:	4602      	mov	r2, r0
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	2b02      	cmp	r3, #2
 8005204:	d901      	bls.n	800520a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005206:	2303      	movs	r3, #3
 8005208:	e045      	b.n	8005296 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800520a:	4b06      	ldr	r3, [pc, #24]	; (8005224 <HAL_RCC_OscConfig+0x470>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005212:	2b00      	cmp	r3, #0
 8005214:	d1f0      	bne.n	80051f8 <HAL_RCC_OscConfig+0x444>
 8005216:	e03d      	b.n	8005294 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	699b      	ldr	r3, [r3, #24]
 800521c:	2b01      	cmp	r3, #1
 800521e:	d107      	bne.n	8005230 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	e038      	b.n	8005296 <HAL_RCC_OscConfig+0x4e2>
 8005224:	40023800 	.word	0x40023800
 8005228:	40007000 	.word	0x40007000
 800522c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005230:	4b1b      	ldr	r3, [pc, #108]	; (80052a0 <HAL_RCC_OscConfig+0x4ec>)
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	699b      	ldr	r3, [r3, #24]
 800523a:	2b01      	cmp	r3, #1
 800523c:	d028      	beq.n	8005290 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005248:	429a      	cmp	r2, r3
 800524a:	d121      	bne.n	8005290 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005256:	429a      	cmp	r2, r3
 8005258:	d11a      	bne.n	8005290 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800525a:	68fa      	ldr	r2, [r7, #12]
 800525c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005260:	4013      	ands	r3, r2
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005266:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005268:	4293      	cmp	r3, r2
 800526a:	d111      	bne.n	8005290 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005276:	085b      	lsrs	r3, r3, #1
 8005278:	3b01      	subs	r3, #1
 800527a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800527c:	429a      	cmp	r2, r3
 800527e:	d107      	bne.n	8005290 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800528a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800528c:	429a      	cmp	r2, r3
 800528e:	d001      	beq.n	8005294 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	e000      	b.n	8005296 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005294:	2300      	movs	r3, #0
}
 8005296:	4618      	mov	r0, r3
 8005298:	3718      	adds	r7, #24
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}
 800529e:	bf00      	nop
 80052a0:	40023800 	.word	0x40023800

080052a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b084      	sub	sp, #16
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d101      	bne.n	80052b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e0cc      	b.n	8005452 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80052b8:	4b68      	ldr	r3, [pc, #416]	; (800545c <HAL_RCC_ClockConfig+0x1b8>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 030f 	and.w	r3, r3, #15
 80052c0:	683a      	ldr	r2, [r7, #0]
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d90c      	bls.n	80052e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052c6:	4b65      	ldr	r3, [pc, #404]	; (800545c <HAL_RCC_ClockConfig+0x1b8>)
 80052c8:	683a      	ldr	r2, [r7, #0]
 80052ca:	b2d2      	uxtb	r2, r2
 80052cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052ce:	4b63      	ldr	r3, [pc, #396]	; (800545c <HAL_RCC_ClockConfig+0x1b8>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 030f 	and.w	r3, r3, #15
 80052d6:	683a      	ldr	r2, [r7, #0]
 80052d8:	429a      	cmp	r2, r3
 80052da:	d001      	beq.n	80052e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	e0b8      	b.n	8005452 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 0302 	and.w	r3, r3, #2
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d020      	beq.n	800532e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f003 0304 	and.w	r3, r3, #4
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d005      	beq.n	8005304 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80052f8:	4b59      	ldr	r3, [pc, #356]	; (8005460 <HAL_RCC_ClockConfig+0x1bc>)
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	4a58      	ldr	r2, [pc, #352]	; (8005460 <HAL_RCC_ClockConfig+0x1bc>)
 80052fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005302:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f003 0308 	and.w	r3, r3, #8
 800530c:	2b00      	cmp	r3, #0
 800530e:	d005      	beq.n	800531c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005310:	4b53      	ldr	r3, [pc, #332]	; (8005460 <HAL_RCC_ClockConfig+0x1bc>)
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	4a52      	ldr	r2, [pc, #328]	; (8005460 <HAL_RCC_ClockConfig+0x1bc>)
 8005316:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800531a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800531c:	4b50      	ldr	r3, [pc, #320]	; (8005460 <HAL_RCC_ClockConfig+0x1bc>)
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	494d      	ldr	r1, [pc, #308]	; (8005460 <HAL_RCC_ClockConfig+0x1bc>)
 800532a:	4313      	orrs	r3, r2
 800532c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f003 0301 	and.w	r3, r3, #1
 8005336:	2b00      	cmp	r3, #0
 8005338:	d044      	beq.n	80053c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	2b01      	cmp	r3, #1
 8005340:	d107      	bne.n	8005352 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005342:	4b47      	ldr	r3, [pc, #284]	; (8005460 <HAL_RCC_ClockConfig+0x1bc>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800534a:	2b00      	cmp	r3, #0
 800534c:	d119      	bne.n	8005382 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e07f      	b.n	8005452 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	2b02      	cmp	r3, #2
 8005358:	d003      	beq.n	8005362 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800535e:	2b03      	cmp	r3, #3
 8005360:	d107      	bne.n	8005372 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005362:	4b3f      	ldr	r3, [pc, #252]	; (8005460 <HAL_RCC_ClockConfig+0x1bc>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800536a:	2b00      	cmp	r3, #0
 800536c:	d109      	bne.n	8005382 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e06f      	b.n	8005452 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005372:	4b3b      	ldr	r3, [pc, #236]	; (8005460 <HAL_RCC_ClockConfig+0x1bc>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 0302 	and.w	r3, r3, #2
 800537a:	2b00      	cmp	r3, #0
 800537c:	d101      	bne.n	8005382 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e067      	b.n	8005452 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005382:	4b37      	ldr	r3, [pc, #220]	; (8005460 <HAL_RCC_ClockConfig+0x1bc>)
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	f023 0203 	bic.w	r2, r3, #3
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	4934      	ldr	r1, [pc, #208]	; (8005460 <HAL_RCC_ClockConfig+0x1bc>)
 8005390:	4313      	orrs	r3, r2
 8005392:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005394:	f7fc fe9c 	bl	80020d0 <HAL_GetTick>
 8005398:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800539a:	e00a      	b.n	80053b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800539c:	f7fc fe98 	bl	80020d0 <HAL_GetTick>
 80053a0:	4602      	mov	r2, r0
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	1ad3      	subs	r3, r2, r3
 80053a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d901      	bls.n	80053b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80053ae:	2303      	movs	r3, #3
 80053b0:	e04f      	b.n	8005452 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053b2:	4b2b      	ldr	r3, [pc, #172]	; (8005460 <HAL_RCC_ClockConfig+0x1bc>)
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	f003 020c 	and.w	r2, r3, #12
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d1eb      	bne.n	800539c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80053c4:	4b25      	ldr	r3, [pc, #148]	; (800545c <HAL_RCC_ClockConfig+0x1b8>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f003 030f 	and.w	r3, r3, #15
 80053cc:	683a      	ldr	r2, [r7, #0]
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d20c      	bcs.n	80053ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053d2:	4b22      	ldr	r3, [pc, #136]	; (800545c <HAL_RCC_ClockConfig+0x1b8>)
 80053d4:	683a      	ldr	r2, [r7, #0]
 80053d6:	b2d2      	uxtb	r2, r2
 80053d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053da:	4b20      	ldr	r3, [pc, #128]	; (800545c <HAL_RCC_ClockConfig+0x1b8>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 030f 	and.w	r3, r3, #15
 80053e2:	683a      	ldr	r2, [r7, #0]
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d001      	beq.n	80053ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	e032      	b.n	8005452 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f003 0304 	and.w	r3, r3, #4
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d008      	beq.n	800540a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053f8:	4b19      	ldr	r3, [pc, #100]	; (8005460 <HAL_RCC_ClockConfig+0x1bc>)
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	4916      	ldr	r1, [pc, #88]	; (8005460 <HAL_RCC_ClockConfig+0x1bc>)
 8005406:	4313      	orrs	r3, r2
 8005408:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 0308 	and.w	r3, r3, #8
 8005412:	2b00      	cmp	r3, #0
 8005414:	d009      	beq.n	800542a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005416:	4b12      	ldr	r3, [pc, #72]	; (8005460 <HAL_RCC_ClockConfig+0x1bc>)
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	00db      	lsls	r3, r3, #3
 8005424:	490e      	ldr	r1, [pc, #56]	; (8005460 <HAL_RCC_ClockConfig+0x1bc>)
 8005426:	4313      	orrs	r3, r2
 8005428:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800542a:	f000 f889 	bl	8005540 <HAL_RCC_GetSysClockFreq>
 800542e:	4602      	mov	r2, r0
 8005430:	4b0b      	ldr	r3, [pc, #44]	; (8005460 <HAL_RCC_ClockConfig+0x1bc>)
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	091b      	lsrs	r3, r3, #4
 8005436:	f003 030f 	and.w	r3, r3, #15
 800543a:	490a      	ldr	r1, [pc, #40]	; (8005464 <HAL_RCC_ClockConfig+0x1c0>)
 800543c:	5ccb      	ldrb	r3, [r1, r3]
 800543e:	fa22 f303 	lsr.w	r3, r2, r3
 8005442:	4a09      	ldr	r2, [pc, #36]	; (8005468 <HAL_RCC_ClockConfig+0x1c4>)
 8005444:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005446:	4b09      	ldr	r3, [pc, #36]	; (800546c <HAL_RCC_ClockConfig+0x1c8>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4618      	mov	r0, r3
 800544c:	f7fc fc62 	bl	8001d14 <HAL_InitTick>

  return HAL_OK;
 8005450:	2300      	movs	r3, #0
}
 8005452:	4618      	mov	r0, r3
 8005454:	3710      	adds	r7, #16
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
 800545a:	bf00      	nop
 800545c:	40023c00 	.word	0x40023c00
 8005460:	40023800 	.word	0x40023800
 8005464:	08008ad4 	.word	0x08008ad4
 8005468:	20000000 	.word	0x20000000
 800546c:	20000004 	.word	0x20000004

08005470 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b08c      	sub	sp, #48	; 0x30
 8005474:	af00      	add	r7, sp, #0
 8005476:	60f8      	str	r0, [r7, #12]
 8005478:	60b9      	str	r1, [r7, #8]
 800547a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d129      	bne.n	80054d6 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8005482:	2300      	movs	r3, #0
 8005484:	61bb      	str	r3, [r7, #24]
 8005486:	4b2b      	ldr	r3, [pc, #172]	; (8005534 <HAL_RCC_MCOConfig+0xc4>)
 8005488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800548a:	4a2a      	ldr	r2, [pc, #168]	; (8005534 <HAL_RCC_MCOConfig+0xc4>)
 800548c:	f043 0301 	orr.w	r3, r3, #1
 8005490:	6313      	str	r3, [r2, #48]	; 0x30
 8005492:	4b28      	ldr	r3, [pc, #160]	; (8005534 <HAL_RCC_MCOConfig+0xc4>)
 8005494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005496:	f003 0301 	and.w	r3, r3, #1
 800549a:	61bb      	str	r3, [r7, #24]
 800549c:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800549e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80054a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054a4:	2302      	movs	r3, #2
 80054a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054a8:	2303      	movs	r3, #3
 80054aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054ac:	2300      	movs	r3, #0
 80054ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80054b0:	2300      	movs	r3, #0
 80054b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80054b4:	f107 031c 	add.w	r3, r7, #28
 80054b8:	4619      	mov	r1, r3
 80054ba:	481f      	ldr	r0, [pc, #124]	; (8005538 <HAL_RCC_MCOConfig+0xc8>)
 80054bc:	f7fe ffb4 	bl	8004428 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80054c0:	4b1c      	ldr	r3, [pc, #112]	; (8005534 <HAL_RCC_MCOConfig+0xc4>)
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 80054c8:	68b9      	ldr	r1, [r7, #8]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	430b      	orrs	r3, r1
 80054ce:	4919      	ldr	r1, [pc, #100]	; (8005534 <HAL_RCC_MCOConfig+0xc4>)
 80054d0:	4313      	orrs	r3, r2
 80054d2:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 80054d4:	e029      	b.n	800552a <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 80054d6:	2300      	movs	r3, #0
 80054d8:	617b      	str	r3, [r7, #20]
 80054da:	4b16      	ldr	r3, [pc, #88]	; (8005534 <HAL_RCC_MCOConfig+0xc4>)
 80054dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054de:	4a15      	ldr	r2, [pc, #84]	; (8005534 <HAL_RCC_MCOConfig+0xc4>)
 80054e0:	f043 0304 	orr.w	r3, r3, #4
 80054e4:	6313      	str	r3, [r2, #48]	; 0x30
 80054e6:	4b13      	ldr	r3, [pc, #76]	; (8005534 <HAL_RCC_MCOConfig+0xc4>)
 80054e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ea:	f003 0304 	and.w	r3, r3, #4
 80054ee:	617b      	str	r3, [r7, #20]
 80054f0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80054f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80054f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054f8:	2302      	movs	r3, #2
 80054fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054fc:	2303      	movs	r3, #3
 80054fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005500:	2300      	movs	r3, #0
 8005502:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005504:	2300      	movs	r3, #0
 8005506:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8005508:	f107 031c 	add.w	r3, r7, #28
 800550c:	4619      	mov	r1, r3
 800550e:	480b      	ldr	r0, [pc, #44]	; (800553c <HAL_RCC_MCOConfig+0xcc>)
 8005510:	f7fe ff8a 	bl	8004428 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8005514:	4b07      	ldr	r3, [pc, #28]	; (8005534 <HAL_RCC_MCOConfig+0xc4>)
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	00d9      	lsls	r1, r3, #3
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	430b      	orrs	r3, r1
 8005524:	4903      	ldr	r1, [pc, #12]	; (8005534 <HAL_RCC_MCOConfig+0xc4>)
 8005526:	4313      	orrs	r3, r2
 8005528:	608b      	str	r3, [r1, #8]
}
 800552a:	bf00      	nop
 800552c:	3730      	adds	r7, #48	; 0x30
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop
 8005534:	40023800 	.word	0x40023800
 8005538:	40020000 	.word	0x40020000
 800553c:	40020800 	.word	0x40020800

08005540 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005540:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005544:	b094      	sub	sp, #80	; 0x50
 8005546:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005548:	2300      	movs	r3, #0
 800554a:	647b      	str	r3, [r7, #68]	; 0x44
 800554c:	2300      	movs	r3, #0
 800554e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005550:	2300      	movs	r3, #0
 8005552:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005554:	2300      	movs	r3, #0
 8005556:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005558:	4b79      	ldr	r3, [pc, #484]	; (8005740 <HAL_RCC_GetSysClockFreq+0x200>)
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	f003 030c 	and.w	r3, r3, #12
 8005560:	2b08      	cmp	r3, #8
 8005562:	d00d      	beq.n	8005580 <HAL_RCC_GetSysClockFreq+0x40>
 8005564:	2b08      	cmp	r3, #8
 8005566:	f200 80e1 	bhi.w	800572c <HAL_RCC_GetSysClockFreq+0x1ec>
 800556a:	2b00      	cmp	r3, #0
 800556c:	d002      	beq.n	8005574 <HAL_RCC_GetSysClockFreq+0x34>
 800556e:	2b04      	cmp	r3, #4
 8005570:	d003      	beq.n	800557a <HAL_RCC_GetSysClockFreq+0x3a>
 8005572:	e0db      	b.n	800572c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005574:	4b73      	ldr	r3, [pc, #460]	; (8005744 <HAL_RCC_GetSysClockFreq+0x204>)
 8005576:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005578:	e0db      	b.n	8005732 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800557a:	4b73      	ldr	r3, [pc, #460]	; (8005748 <HAL_RCC_GetSysClockFreq+0x208>)
 800557c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800557e:	e0d8      	b.n	8005732 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005580:	4b6f      	ldr	r3, [pc, #444]	; (8005740 <HAL_RCC_GetSysClockFreq+0x200>)
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005588:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800558a:	4b6d      	ldr	r3, [pc, #436]	; (8005740 <HAL_RCC_GetSysClockFreq+0x200>)
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005592:	2b00      	cmp	r3, #0
 8005594:	d063      	beq.n	800565e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005596:	4b6a      	ldr	r3, [pc, #424]	; (8005740 <HAL_RCC_GetSysClockFreq+0x200>)
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	099b      	lsrs	r3, r3, #6
 800559c:	2200      	movs	r2, #0
 800559e:	63bb      	str	r3, [r7, #56]	; 0x38
 80055a0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80055a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055a8:	633b      	str	r3, [r7, #48]	; 0x30
 80055aa:	2300      	movs	r3, #0
 80055ac:	637b      	str	r3, [r7, #52]	; 0x34
 80055ae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80055b2:	4622      	mov	r2, r4
 80055b4:	462b      	mov	r3, r5
 80055b6:	f04f 0000 	mov.w	r0, #0
 80055ba:	f04f 0100 	mov.w	r1, #0
 80055be:	0159      	lsls	r1, r3, #5
 80055c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80055c4:	0150      	lsls	r0, r2, #5
 80055c6:	4602      	mov	r2, r0
 80055c8:	460b      	mov	r3, r1
 80055ca:	4621      	mov	r1, r4
 80055cc:	1a51      	subs	r1, r2, r1
 80055ce:	6139      	str	r1, [r7, #16]
 80055d0:	4629      	mov	r1, r5
 80055d2:	eb63 0301 	sbc.w	r3, r3, r1
 80055d6:	617b      	str	r3, [r7, #20]
 80055d8:	f04f 0200 	mov.w	r2, #0
 80055dc:	f04f 0300 	mov.w	r3, #0
 80055e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80055e4:	4659      	mov	r1, fp
 80055e6:	018b      	lsls	r3, r1, #6
 80055e8:	4651      	mov	r1, sl
 80055ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80055ee:	4651      	mov	r1, sl
 80055f0:	018a      	lsls	r2, r1, #6
 80055f2:	4651      	mov	r1, sl
 80055f4:	ebb2 0801 	subs.w	r8, r2, r1
 80055f8:	4659      	mov	r1, fp
 80055fa:	eb63 0901 	sbc.w	r9, r3, r1
 80055fe:	f04f 0200 	mov.w	r2, #0
 8005602:	f04f 0300 	mov.w	r3, #0
 8005606:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800560a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800560e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005612:	4690      	mov	r8, r2
 8005614:	4699      	mov	r9, r3
 8005616:	4623      	mov	r3, r4
 8005618:	eb18 0303 	adds.w	r3, r8, r3
 800561c:	60bb      	str	r3, [r7, #8]
 800561e:	462b      	mov	r3, r5
 8005620:	eb49 0303 	adc.w	r3, r9, r3
 8005624:	60fb      	str	r3, [r7, #12]
 8005626:	f04f 0200 	mov.w	r2, #0
 800562a:	f04f 0300 	mov.w	r3, #0
 800562e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005632:	4629      	mov	r1, r5
 8005634:	024b      	lsls	r3, r1, #9
 8005636:	4621      	mov	r1, r4
 8005638:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800563c:	4621      	mov	r1, r4
 800563e:	024a      	lsls	r2, r1, #9
 8005640:	4610      	mov	r0, r2
 8005642:	4619      	mov	r1, r3
 8005644:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005646:	2200      	movs	r2, #0
 8005648:	62bb      	str	r3, [r7, #40]	; 0x28
 800564a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800564c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005650:	f7fa fe1e 	bl	8000290 <__aeabi_uldivmod>
 8005654:	4602      	mov	r2, r0
 8005656:	460b      	mov	r3, r1
 8005658:	4613      	mov	r3, r2
 800565a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800565c:	e058      	b.n	8005710 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800565e:	4b38      	ldr	r3, [pc, #224]	; (8005740 <HAL_RCC_GetSysClockFreq+0x200>)
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	099b      	lsrs	r3, r3, #6
 8005664:	2200      	movs	r2, #0
 8005666:	4618      	mov	r0, r3
 8005668:	4611      	mov	r1, r2
 800566a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800566e:	623b      	str	r3, [r7, #32]
 8005670:	2300      	movs	r3, #0
 8005672:	627b      	str	r3, [r7, #36]	; 0x24
 8005674:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005678:	4642      	mov	r2, r8
 800567a:	464b      	mov	r3, r9
 800567c:	f04f 0000 	mov.w	r0, #0
 8005680:	f04f 0100 	mov.w	r1, #0
 8005684:	0159      	lsls	r1, r3, #5
 8005686:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800568a:	0150      	lsls	r0, r2, #5
 800568c:	4602      	mov	r2, r0
 800568e:	460b      	mov	r3, r1
 8005690:	4641      	mov	r1, r8
 8005692:	ebb2 0a01 	subs.w	sl, r2, r1
 8005696:	4649      	mov	r1, r9
 8005698:	eb63 0b01 	sbc.w	fp, r3, r1
 800569c:	f04f 0200 	mov.w	r2, #0
 80056a0:	f04f 0300 	mov.w	r3, #0
 80056a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80056a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80056ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80056b0:	ebb2 040a 	subs.w	r4, r2, sl
 80056b4:	eb63 050b 	sbc.w	r5, r3, fp
 80056b8:	f04f 0200 	mov.w	r2, #0
 80056bc:	f04f 0300 	mov.w	r3, #0
 80056c0:	00eb      	lsls	r3, r5, #3
 80056c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80056c6:	00e2      	lsls	r2, r4, #3
 80056c8:	4614      	mov	r4, r2
 80056ca:	461d      	mov	r5, r3
 80056cc:	4643      	mov	r3, r8
 80056ce:	18e3      	adds	r3, r4, r3
 80056d0:	603b      	str	r3, [r7, #0]
 80056d2:	464b      	mov	r3, r9
 80056d4:	eb45 0303 	adc.w	r3, r5, r3
 80056d8:	607b      	str	r3, [r7, #4]
 80056da:	f04f 0200 	mov.w	r2, #0
 80056de:	f04f 0300 	mov.w	r3, #0
 80056e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80056e6:	4629      	mov	r1, r5
 80056e8:	028b      	lsls	r3, r1, #10
 80056ea:	4621      	mov	r1, r4
 80056ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80056f0:	4621      	mov	r1, r4
 80056f2:	028a      	lsls	r2, r1, #10
 80056f4:	4610      	mov	r0, r2
 80056f6:	4619      	mov	r1, r3
 80056f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056fa:	2200      	movs	r2, #0
 80056fc:	61bb      	str	r3, [r7, #24]
 80056fe:	61fa      	str	r2, [r7, #28]
 8005700:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005704:	f7fa fdc4 	bl	8000290 <__aeabi_uldivmod>
 8005708:	4602      	mov	r2, r0
 800570a:	460b      	mov	r3, r1
 800570c:	4613      	mov	r3, r2
 800570e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005710:	4b0b      	ldr	r3, [pc, #44]	; (8005740 <HAL_RCC_GetSysClockFreq+0x200>)
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	0c1b      	lsrs	r3, r3, #16
 8005716:	f003 0303 	and.w	r3, r3, #3
 800571a:	3301      	adds	r3, #1
 800571c:	005b      	lsls	r3, r3, #1
 800571e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005720:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005722:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005724:	fbb2 f3f3 	udiv	r3, r2, r3
 8005728:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800572a:	e002      	b.n	8005732 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800572c:	4b05      	ldr	r3, [pc, #20]	; (8005744 <HAL_RCC_GetSysClockFreq+0x204>)
 800572e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005730:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005732:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005734:	4618      	mov	r0, r3
 8005736:	3750      	adds	r7, #80	; 0x50
 8005738:	46bd      	mov	sp, r7
 800573a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800573e:	bf00      	nop
 8005740:	40023800 	.word	0x40023800
 8005744:	00f42400 	.word	0x00f42400
 8005748:	007a1200 	.word	0x007a1200

0800574c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800574c:	b480      	push	{r7}
 800574e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005750:	4b03      	ldr	r3, [pc, #12]	; (8005760 <HAL_RCC_GetHCLKFreq+0x14>)
 8005752:	681b      	ldr	r3, [r3, #0]
}
 8005754:	4618      	mov	r0, r3
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr
 800575e:	bf00      	nop
 8005760:	20000000 	.word	0x20000000

08005764 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005768:	f7ff fff0 	bl	800574c <HAL_RCC_GetHCLKFreq>
 800576c:	4602      	mov	r2, r0
 800576e:	4b05      	ldr	r3, [pc, #20]	; (8005784 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	0a9b      	lsrs	r3, r3, #10
 8005774:	f003 0307 	and.w	r3, r3, #7
 8005778:	4903      	ldr	r1, [pc, #12]	; (8005788 <HAL_RCC_GetPCLK1Freq+0x24>)
 800577a:	5ccb      	ldrb	r3, [r1, r3]
 800577c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005780:	4618      	mov	r0, r3
 8005782:	bd80      	pop	{r7, pc}
 8005784:	40023800 	.word	0x40023800
 8005788:	08008ae4 	.word	0x08008ae4

0800578c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005790:	f7ff ffdc 	bl	800574c <HAL_RCC_GetHCLKFreq>
 8005794:	4602      	mov	r2, r0
 8005796:	4b05      	ldr	r3, [pc, #20]	; (80057ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	0b5b      	lsrs	r3, r3, #13
 800579c:	f003 0307 	and.w	r3, r3, #7
 80057a0:	4903      	ldr	r1, [pc, #12]	; (80057b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80057a2:	5ccb      	ldrb	r3, [r1, r3]
 80057a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	bd80      	pop	{r7, pc}
 80057ac:	40023800 	.word	0x40023800
 80057b0:	08008ae4 	.word	0x08008ae4

080057b4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b083      	sub	sp, #12
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	220f      	movs	r2, #15
 80057c2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80057c4:	4b12      	ldr	r3, [pc, #72]	; (8005810 <HAL_RCC_GetClockConfig+0x5c>)
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	f003 0203 	and.w	r2, r3, #3
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80057d0:	4b0f      	ldr	r3, [pc, #60]	; (8005810 <HAL_RCC_GetClockConfig+0x5c>)
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80057dc:	4b0c      	ldr	r3, [pc, #48]	; (8005810 <HAL_RCC_GetClockConfig+0x5c>)
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80057e8:	4b09      	ldr	r3, [pc, #36]	; (8005810 <HAL_RCC_GetClockConfig+0x5c>)
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	08db      	lsrs	r3, r3, #3
 80057ee:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80057f6:	4b07      	ldr	r3, [pc, #28]	; (8005814 <HAL_RCC_GetClockConfig+0x60>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f003 020f 	and.w	r2, r3, #15
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	601a      	str	r2, [r3, #0]
}
 8005802:	bf00      	nop
 8005804:	370c      	adds	r7, #12
 8005806:	46bd      	mov	sp, r7
 8005808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580c:	4770      	bx	lr
 800580e:	bf00      	nop
 8005810:	40023800 	.word	0x40023800
 8005814:	40023c00 	.word	0x40023c00

08005818 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b082      	sub	sp, #8
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d101      	bne.n	800582a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	e041      	b.n	80058ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005830:	b2db      	uxtb	r3, r3
 8005832:	2b00      	cmp	r3, #0
 8005834:	d106      	bne.n	8005844 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f000 f839 	bl	80058b6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2202      	movs	r2, #2
 8005848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681a      	ldr	r2, [r3, #0]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	3304      	adds	r3, #4
 8005854:	4619      	mov	r1, r3
 8005856:	4610      	mov	r0, r2
 8005858:	f000 f9c0 	bl	8005bdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2201      	movs	r2, #1
 8005868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2201      	movs	r2, #1
 8005870:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2201      	movs	r2, #1
 8005878:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2201      	movs	r2, #1
 8005880:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2201      	movs	r2, #1
 8005890:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2201      	movs	r2, #1
 80058a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058ac:	2300      	movs	r3, #0
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3708      	adds	r7, #8
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}

080058b6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80058b6:	b480      	push	{r7}
 80058b8:	b083      	sub	sp, #12
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80058be:	bf00      	nop
 80058c0:	370c      	adds	r7, #12
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr
	...

080058cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b085      	sub	sp, #20
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058da:	b2db      	uxtb	r3, r3
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d001      	beq.n	80058e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	e04e      	b.n	8005982 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2202      	movs	r2, #2
 80058e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	68da      	ldr	r2, [r3, #12]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f042 0201 	orr.w	r2, r2, #1
 80058fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a23      	ldr	r2, [pc, #140]	; (8005990 <HAL_TIM_Base_Start_IT+0xc4>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d022      	beq.n	800594c <HAL_TIM_Base_Start_IT+0x80>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800590e:	d01d      	beq.n	800594c <HAL_TIM_Base_Start_IT+0x80>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a1f      	ldr	r2, [pc, #124]	; (8005994 <HAL_TIM_Base_Start_IT+0xc8>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d018      	beq.n	800594c <HAL_TIM_Base_Start_IT+0x80>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a1e      	ldr	r2, [pc, #120]	; (8005998 <HAL_TIM_Base_Start_IT+0xcc>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d013      	beq.n	800594c <HAL_TIM_Base_Start_IT+0x80>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a1c      	ldr	r2, [pc, #112]	; (800599c <HAL_TIM_Base_Start_IT+0xd0>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d00e      	beq.n	800594c <HAL_TIM_Base_Start_IT+0x80>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a1b      	ldr	r2, [pc, #108]	; (80059a0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d009      	beq.n	800594c <HAL_TIM_Base_Start_IT+0x80>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a19      	ldr	r2, [pc, #100]	; (80059a4 <HAL_TIM_Base_Start_IT+0xd8>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d004      	beq.n	800594c <HAL_TIM_Base_Start_IT+0x80>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a18      	ldr	r2, [pc, #96]	; (80059a8 <HAL_TIM_Base_Start_IT+0xdc>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d111      	bne.n	8005970 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	f003 0307 	and.w	r3, r3, #7
 8005956:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2b06      	cmp	r3, #6
 800595c:	d010      	beq.n	8005980 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f042 0201 	orr.w	r2, r2, #1
 800596c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800596e:	e007      	b.n	8005980 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f042 0201 	orr.w	r2, r2, #1
 800597e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005980:	2300      	movs	r3, #0
}
 8005982:	4618      	mov	r0, r3
 8005984:	3714      	adds	r7, #20
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr
 800598e:	bf00      	nop
 8005990:	40010000 	.word	0x40010000
 8005994:	40000400 	.word	0x40000400
 8005998:	40000800 	.word	0x40000800
 800599c:	40000c00 	.word	0x40000c00
 80059a0:	40010400 	.word	0x40010400
 80059a4:	40014000 	.word	0x40014000
 80059a8:	40001800 	.word	0x40001800

080059ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b084      	sub	sp, #16
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	68db      	ldr	r3, [r3, #12]
 80059ba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	691b      	ldr	r3, [r3, #16]
 80059c2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	f003 0302 	and.w	r3, r3, #2
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d020      	beq.n	8005a10 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	f003 0302 	and.w	r3, r3, #2
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d01b      	beq.n	8005a10 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f06f 0202 	mvn.w	r2, #2
 80059e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2201      	movs	r2, #1
 80059e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	699b      	ldr	r3, [r3, #24]
 80059ee:	f003 0303 	and.w	r3, r3, #3
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d003      	beq.n	80059fe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f000 f8d2 	bl	8005ba0 <HAL_TIM_IC_CaptureCallback>
 80059fc:	e005      	b.n	8005a0a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f000 f8c4 	bl	8005b8c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f000 f8d5 	bl	8005bb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	f003 0304 	and.w	r3, r3, #4
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d020      	beq.n	8005a5c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f003 0304 	and.w	r3, r3, #4
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d01b      	beq.n	8005a5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f06f 0204 	mvn.w	r2, #4
 8005a2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2202      	movs	r2, #2
 8005a32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	699b      	ldr	r3, [r3, #24]
 8005a3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d003      	beq.n	8005a4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f000 f8ac 	bl	8005ba0 <HAL_TIM_IC_CaptureCallback>
 8005a48:	e005      	b.n	8005a56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f000 f89e 	bl	8005b8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f000 f8af 	bl	8005bb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	f003 0308 	and.w	r3, r3, #8
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d020      	beq.n	8005aa8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f003 0308 	and.w	r3, r3, #8
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d01b      	beq.n	8005aa8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f06f 0208 	mvn.w	r2, #8
 8005a78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2204      	movs	r2, #4
 8005a7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	69db      	ldr	r3, [r3, #28]
 8005a86:	f003 0303 	and.w	r3, r3, #3
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d003      	beq.n	8005a96 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f000 f886 	bl	8005ba0 <HAL_TIM_IC_CaptureCallback>
 8005a94:	e005      	b.n	8005aa2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f000 f878 	bl	8005b8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f000 f889 	bl	8005bb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	f003 0310 	and.w	r3, r3, #16
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d020      	beq.n	8005af4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f003 0310 	and.w	r3, r3, #16
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d01b      	beq.n	8005af4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f06f 0210 	mvn.w	r2, #16
 8005ac4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2208      	movs	r2, #8
 8005aca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	69db      	ldr	r3, [r3, #28]
 8005ad2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d003      	beq.n	8005ae2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f000 f860 	bl	8005ba0 <HAL_TIM_IC_CaptureCallback>
 8005ae0:	e005      	b.n	8005aee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f000 f852 	bl	8005b8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f000 f863 	bl	8005bb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2200      	movs	r2, #0
 8005af2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	f003 0301 	and.w	r3, r3, #1
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d00c      	beq.n	8005b18 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	f003 0301 	and.w	r3, r3, #1
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d007      	beq.n	8005b18 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f06f 0201 	mvn.w	r2, #1
 8005b10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f7fb f99c 	bl	8000e50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d00c      	beq.n	8005b3c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d007      	beq.n	8005b3c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005b34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f000 f906 	bl	8005d48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d00c      	beq.n	8005b60 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d007      	beq.n	8005b60 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005b58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f000 f834 	bl	8005bc8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	f003 0320 	and.w	r3, r3, #32
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d00c      	beq.n	8005b84 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	f003 0320 	and.w	r3, r3, #32
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d007      	beq.n	8005b84 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f06f 0220 	mvn.w	r2, #32
 8005b7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f000 f8d8 	bl	8005d34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b84:	bf00      	nop
 8005b86:	3710      	adds	r7, #16
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}

08005b8c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b083      	sub	sp, #12
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b94:	bf00      	nop
 8005b96:	370c      	adds	r7, #12
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr

08005ba0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b083      	sub	sp, #12
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ba8:	bf00      	nop
 8005baa:	370c      	adds	r7, #12
 8005bac:	46bd      	mov	sp, r7
 8005bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb2:	4770      	bx	lr

08005bb4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b083      	sub	sp, #12
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005bbc:	bf00      	nop
 8005bbe:	370c      	adds	r7, #12
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr

08005bc8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b083      	sub	sp, #12
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005bd0:	bf00      	nop
 8005bd2:	370c      	adds	r7, #12
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr

08005bdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b085      	sub	sp, #20
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	4a46      	ldr	r2, [pc, #280]	; (8005d08 <TIM_Base_SetConfig+0x12c>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d013      	beq.n	8005c1c <TIM_Base_SetConfig+0x40>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bfa:	d00f      	beq.n	8005c1c <TIM_Base_SetConfig+0x40>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	4a43      	ldr	r2, [pc, #268]	; (8005d0c <TIM_Base_SetConfig+0x130>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d00b      	beq.n	8005c1c <TIM_Base_SetConfig+0x40>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	4a42      	ldr	r2, [pc, #264]	; (8005d10 <TIM_Base_SetConfig+0x134>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d007      	beq.n	8005c1c <TIM_Base_SetConfig+0x40>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	4a41      	ldr	r2, [pc, #260]	; (8005d14 <TIM_Base_SetConfig+0x138>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d003      	beq.n	8005c1c <TIM_Base_SetConfig+0x40>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	4a40      	ldr	r2, [pc, #256]	; (8005d18 <TIM_Base_SetConfig+0x13c>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d108      	bne.n	8005c2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	68fa      	ldr	r2, [r7, #12]
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4a35      	ldr	r2, [pc, #212]	; (8005d08 <TIM_Base_SetConfig+0x12c>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d02b      	beq.n	8005c8e <TIM_Base_SetConfig+0xb2>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c3c:	d027      	beq.n	8005c8e <TIM_Base_SetConfig+0xb2>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4a32      	ldr	r2, [pc, #200]	; (8005d0c <TIM_Base_SetConfig+0x130>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d023      	beq.n	8005c8e <TIM_Base_SetConfig+0xb2>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	4a31      	ldr	r2, [pc, #196]	; (8005d10 <TIM_Base_SetConfig+0x134>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d01f      	beq.n	8005c8e <TIM_Base_SetConfig+0xb2>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	4a30      	ldr	r2, [pc, #192]	; (8005d14 <TIM_Base_SetConfig+0x138>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d01b      	beq.n	8005c8e <TIM_Base_SetConfig+0xb2>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4a2f      	ldr	r2, [pc, #188]	; (8005d18 <TIM_Base_SetConfig+0x13c>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d017      	beq.n	8005c8e <TIM_Base_SetConfig+0xb2>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	4a2e      	ldr	r2, [pc, #184]	; (8005d1c <TIM_Base_SetConfig+0x140>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d013      	beq.n	8005c8e <TIM_Base_SetConfig+0xb2>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	4a2d      	ldr	r2, [pc, #180]	; (8005d20 <TIM_Base_SetConfig+0x144>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d00f      	beq.n	8005c8e <TIM_Base_SetConfig+0xb2>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	4a2c      	ldr	r2, [pc, #176]	; (8005d24 <TIM_Base_SetConfig+0x148>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d00b      	beq.n	8005c8e <TIM_Base_SetConfig+0xb2>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	4a2b      	ldr	r2, [pc, #172]	; (8005d28 <TIM_Base_SetConfig+0x14c>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d007      	beq.n	8005c8e <TIM_Base_SetConfig+0xb2>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	4a2a      	ldr	r2, [pc, #168]	; (8005d2c <TIM_Base_SetConfig+0x150>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d003      	beq.n	8005c8e <TIM_Base_SetConfig+0xb2>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	4a29      	ldr	r2, [pc, #164]	; (8005d30 <TIM_Base_SetConfig+0x154>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d108      	bne.n	8005ca0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	68db      	ldr	r3, [r3, #12]
 8005c9a:	68fa      	ldr	r2, [r7, #12]
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	695b      	ldr	r3, [r3, #20]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	68fa      	ldr	r2, [r7, #12]
 8005cb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	689a      	ldr	r2, [r3, #8]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	681a      	ldr	r2, [r3, #0]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	4a10      	ldr	r2, [pc, #64]	; (8005d08 <TIM_Base_SetConfig+0x12c>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d003      	beq.n	8005cd4 <TIM_Base_SetConfig+0xf8>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	4a12      	ldr	r2, [pc, #72]	; (8005d18 <TIM_Base_SetConfig+0x13c>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d103      	bne.n	8005cdc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	691a      	ldr	r2, [r3, #16]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	691b      	ldr	r3, [r3, #16]
 8005ce6:	f003 0301 	and.w	r3, r3, #1
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	d105      	bne.n	8005cfa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	691b      	ldr	r3, [r3, #16]
 8005cf2:	f023 0201 	bic.w	r2, r3, #1
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	611a      	str	r2, [r3, #16]
  }
}
 8005cfa:	bf00      	nop
 8005cfc:	3714      	adds	r7, #20
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr
 8005d06:	bf00      	nop
 8005d08:	40010000 	.word	0x40010000
 8005d0c:	40000400 	.word	0x40000400
 8005d10:	40000800 	.word	0x40000800
 8005d14:	40000c00 	.word	0x40000c00
 8005d18:	40010400 	.word	0x40010400
 8005d1c:	40014000 	.word	0x40014000
 8005d20:	40014400 	.word	0x40014400
 8005d24:	40014800 	.word	0x40014800
 8005d28:	40001800 	.word	0x40001800
 8005d2c:	40001c00 	.word	0x40001c00
 8005d30:	40002000 	.word	0x40002000

08005d34 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b083      	sub	sp, #12
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d3c:	bf00      	nop
 8005d3e:	370c      	adds	r7, #12
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr

08005d48 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b083      	sub	sp, #12
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d50:	bf00      	nop
 8005d52:	370c      	adds	r7, #12
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr

08005d5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b082      	sub	sp, #8
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d101      	bne.n	8005d6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e042      	b.n	8005df4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d74:	b2db      	uxtb	r3, r3
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d106      	bne.n	8005d88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f7fb fec4 	bl	8001b10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2224      	movs	r2, #36	; 0x24
 8005d8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	68da      	ldr	r2, [r3, #12]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d9e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f000 feb1 	bl	8006b08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	691a      	ldr	r2, [r3, #16]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005db4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	695a      	ldr	r2, [r3, #20]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005dc4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	68da      	ldr	r2, [r3, #12]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005dd4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2220      	movs	r2, #32
 8005de0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2220      	movs	r2, #32
 8005de8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2200      	movs	r2, #0
 8005df0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005df2:	2300      	movs	r3, #0
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3708      	adds	r7, #8
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}

08005dfc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b08a      	sub	sp, #40	; 0x28
 8005e00:	af02      	add	r7, sp, #8
 8005e02:	60f8      	str	r0, [r7, #12]
 8005e04:	60b9      	str	r1, [r7, #8]
 8005e06:	603b      	str	r3, [r7, #0]
 8005e08:	4613      	mov	r3, r2
 8005e0a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	2b20      	cmp	r3, #32
 8005e1a:	d175      	bne.n	8005f08 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d002      	beq.n	8005e28 <HAL_UART_Transmit+0x2c>
 8005e22:	88fb      	ldrh	r3, [r7, #6]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d101      	bne.n	8005e2c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	e06e      	b.n	8005f0a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2221      	movs	r2, #33	; 0x21
 8005e36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e3a:	f7fc f949 	bl	80020d0 <HAL_GetTick>
 8005e3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	88fa      	ldrh	r2, [r7, #6]
 8005e44:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	88fa      	ldrh	r2, [r7, #6]
 8005e4a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e54:	d108      	bne.n	8005e68 <HAL_UART_Transmit+0x6c>
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	691b      	ldr	r3, [r3, #16]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d104      	bne.n	8005e68 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	61bb      	str	r3, [r7, #24]
 8005e66:	e003      	b.n	8005e70 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005e70:	e02e      	b.n	8005ed0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	9300      	str	r3, [sp, #0]
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	2180      	movs	r1, #128	; 0x80
 8005e7c:	68f8      	ldr	r0, [r7, #12]
 8005e7e:	f000 fc24 	bl	80066ca <UART_WaitOnFlagUntilTimeout>
 8005e82:	4603      	mov	r3, r0
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d005      	beq.n	8005e94 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2220      	movs	r2, #32
 8005e8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8005e90:	2303      	movs	r3, #3
 8005e92:	e03a      	b.n	8005f0a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005e94:	69fb      	ldr	r3, [r7, #28]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d10b      	bne.n	8005eb2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005e9a:	69bb      	ldr	r3, [r7, #24]
 8005e9c:	881b      	ldrh	r3, [r3, #0]
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ea8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005eaa:	69bb      	ldr	r3, [r7, #24]
 8005eac:	3302      	adds	r3, #2
 8005eae:	61bb      	str	r3, [r7, #24]
 8005eb0:	e007      	b.n	8005ec2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005eb2:	69fb      	ldr	r3, [r7, #28]
 8005eb4:	781a      	ldrb	r2, [r3, #0]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005ebc:	69fb      	ldr	r3, [r7, #28]
 8005ebe:	3301      	adds	r3, #1
 8005ec0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	3b01      	subs	r3, #1
 8005eca:	b29a      	uxth	r2, r3
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d1cb      	bne.n	8005e72 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	9300      	str	r3, [sp, #0]
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	2140      	movs	r1, #64	; 0x40
 8005ee4:	68f8      	ldr	r0, [r7, #12]
 8005ee6:	f000 fbf0 	bl	80066ca <UART_WaitOnFlagUntilTimeout>
 8005eea:	4603      	mov	r3, r0
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d005      	beq.n	8005efc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2220      	movs	r2, #32
 8005ef4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8005ef8:	2303      	movs	r3, #3
 8005efa:	e006      	b.n	8005f0a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2220      	movs	r2, #32
 8005f00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005f04:	2300      	movs	r3, #0
 8005f06:	e000      	b.n	8005f0a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005f08:	2302      	movs	r3, #2
  }
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3720      	adds	r7, #32
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
	...

08005f14 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b08c      	sub	sp, #48	; 0x30
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	60b9      	str	r1, [r7, #8]
 8005f1e:	4613      	mov	r3, r2
 8005f20:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f28:	b2db      	uxtb	r3, r3
 8005f2a:	2b20      	cmp	r3, #32
 8005f2c:	d156      	bne.n	8005fdc <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d002      	beq.n	8005f3a <HAL_UART_Transmit_DMA+0x26>
 8005f34:	88fb      	ldrh	r3, [r7, #6]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d101      	bne.n	8005f3e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e04f      	b.n	8005fde <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8005f3e:	68ba      	ldr	r2, [r7, #8]
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	88fa      	ldrh	r2, [r7, #6]
 8005f48:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	88fa      	ldrh	r2, [r7, #6]
 8005f4e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2200      	movs	r2, #0
 8005f54:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2221      	movs	r2, #33	; 0x21
 8005f5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f62:	4a21      	ldr	r2, [pc, #132]	; (8005fe8 <HAL_UART_Transmit_DMA+0xd4>)
 8005f64:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f6a:	4a20      	ldr	r2, [pc, #128]	; (8005fec <HAL_UART_Transmit_DMA+0xd8>)
 8005f6c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f72:	4a1f      	ldr	r2, [pc, #124]	; (8005ff0 <HAL_UART_Transmit_DMA+0xdc>)
 8005f74:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8005f7e:	f107 0308 	add.w	r3, r7, #8
 8005f82:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f8a:	6819      	ldr	r1, [r3, #0]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	3304      	adds	r3, #4
 8005f92:	461a      	mov	r2, r3
 8005f94:	88fb      	ldrh	r3, [r7, #6]
 8005f96:	f7fc fd6b 	bl	8002a70 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005fa2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	3314      	adds	r3, #20
 8005faa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fac:	69bb      	ldr	r3, [r7, #24]
 8005fae:	e853 3f00 	ldrex	r3, [r3]
 8005fb2:	617b      	str	r3, [r7, #20]
   return(result);
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fba:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	3314      	adds	r3, #20
 8005fc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fc4:	627a      	str	r2, [r7, #36]	; 0x24
 8005fc6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc8:	6a39      	ldr	r1, [r7, #32]
 8005fca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fcc:	e841 2300 	strex	r3, r2, [r1]
 8005fd0:	61fb      	str	r3, [r7, #28]
   return(result);
 8005fd2:	69fb      	ldr	r3, [r7, #28]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d1e5      	bne.n	8005fa4 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	e000      	b.n	8005fde <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8005fdc:	2302      	movs	r3, #2
  }
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3730      	adds	r7, #48	; 0x30
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}
 8005fe6:	bf00      	nop
 8005fe8:	08006581 	.word	0x08006581
 8005fec:	0800661b 	.word	0x0800661b
 8005ff0:	08006637 	.word	0x08006637

08005ff4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b0ba      	sub	sp, #232	; 0xe8
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	695b      	ldr	r3, [r3, #20]
 8006016:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800601a:	2300      	movs	r3, #0
 800601c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006020:	2300      	movs	r3, #0
 8006022:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006026:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800602a:	f003 030f 	and.w	r3, r3, #15
 800602e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006032:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006036:	2b00      	cmp	r3, #0
 8006038:	d10f      	bne.n	800605a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800603a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800603e:	f003 0320 	and.w	r3, r3, #32
 8006042:	2b00      	cmp	r3, #0
 8006044:	d009      	beq.n	800605a <HAL_UART_IRQHandler+0x66>
 8006046:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800604a:	f003 0320 	and.w	r3, r3, #32
 800604e:	2b00      	cmp	r3, #0
 8006050:	d003      	beq.n	800605a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f000 fc99 	bl	800698a <UART_Receive_IT>
      return;
 8006058:	e25b      	b.n	8006512 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800605a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800605e:	2b00      	cmp	r3, #0
 8006060:	f000 80de 	beq.w	8006220 <HAL_UART_IRQHandler+0x22c>
 8006064:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006068:	f003 0301 	and.w	r3, r3, #1
 800606c:	2b00      	cmp	r3, #0
 800606e:	d106      	bne.n	800607e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006070:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006074:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006078:	2b00      	cmp	r3, #0
 800607a:	f000 80d1 	beq.w	8006220 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800607e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006082:	f003 0301 	and.w	r3, r3, #1
 8006086:	2b00      	cmp	r3, #0
 8006088:	d00b      	beq.n	80060a2 <HAL_UART_IRQHandler+0xae>
 800608a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800608e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006092:	2b00      	cmp	r3, #0
 8006094:	d005      	beq.n	80060a2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800609a:	f043 0201 	orr.w	r2, r3, #1
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80060a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060a6:	f003 0304 	and.w	r3, r3, #4
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d00b      	beq.n	80060c6 <HAL_UART_IRQHandler+0xd2>
 80060ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060b2:	f003 0301 	and.w	r3, r3, #1
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d005      	beq.n	80060c6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060be:	f043 0202 	orr.w	r2, r3, #2
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80060c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060ca:	f003 0302 	and.w	r3, r3, #2
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d00b      	beq.n	80060ea <HAL_UART_IRQHandler+0xf6>
 80060d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060d6:	f003 0301 	and.w	r3, r3, #1
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d005      	beq.n	80060ea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060e2:	f043 0204 	orr.w	r2, r3, #4
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80060ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060ee:	f003 0308 	and.w	r3, r3, #8
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d011      	beq.n	800611a <HAL_UART_IRQHandler+0x126>
 80060f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060fa:	f003 0320 	and.w	r3, r3, #32
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d105      	bne.n	800610e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006102:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006106:	f003 0301 	and.w	r3, r3, #1
 800610a:	2b00      	cmp	r3, #0
 800610c:	d005      	beq.n	800611a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006112:	f043 0208 	orr.w	r2, r3, #8
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800611e:	2b00      	cmp	r3, #0
 8006120:	f000 81f2 	beq.w	8006508 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006124:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006128:	f003 0320 	and.w	r3, r3, #32
 800612c:	2b00      	cmp	r3, #0
 800612e:	d008      	beq.n	8006142 <HAL_UART_IRQHandler+0x14e>
 8006130:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006134:	f003 0320 	and.w	r3, r3, #32
 8006138:	2b00      	cmp	r3, #0
 800613a:	d002      	beq.n	8006142 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f000 fc24 	bl	800698a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	695b      	ldr	r3, [r3, #20]
 8006148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800614c:	2b40      	cmp	r3, #64	; 0x40
 800614e:	bf0c      	ite	eq
 8006150:	2301      	moveq	r3, #1
 8006152:	2300      	movne	r3, #0
 8006154:	b2db      	uxtb	r3, r3
 8006156:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800615e:	f003 0308 	and.w	r3, r3, #8
 8006162:	2b00      	cmp	r3, #0
 8006164:	d103      	bne.n	800616e <HAL_UART_IRQHandler+0x17a>
 8006166:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800616a:	2b00      	cmp	r3, #0
 800616c:	d04f      	beq.n	800620e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f000 fb2c 	bl	80067cc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	695b      	ldr	r3, [r3, #20]
 800617a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800617e:	2b40      	cmp	r3, #64	; 0x40
 8006180:	d141      	bne.n	8006206 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	3314      	adds	r3, #20
 8006188:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800618c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006190:	e853 3f00 	ldrex	r3, [r3]
 8006194:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006198:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800619c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	3314      	adds	r3, #20
 80061aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80061ae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80061b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80061ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80061be:	e841 2300 	strex	r3, r2, [r1]
 80061c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80061c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d1d9      	bne.n	8006182 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d013      	beq.n	80061fe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061da:	4a7e      	ldr	r2, [pc, #504]	; (80063d4 <HAL_UART_IRQHandler+0x3e0>)
 80061dc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061e2:	4618      	mov	r0, r3
 80061e4:	f7fc fd0c 	bl	8002c00 <HAL_DMA_Abort_IT>
 80061e8:	4603      	mov	r3, r0
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d016      	beq.n	800621c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061f4:	687a      	ldr	r2, [r7, #4]
 80061f6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80061f8:	4610      	mov	r0, r2
 80061fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061fc:	e00e      	b.n	800621c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f000 f9a8 	bl	8006554 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006204:	e00a      	b.n	800621c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f000 f9a4 	bl	8006554 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800620c:	e006      	b.n	800621c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f000 f9a0 	bl	8006554 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2200      	movs	r2, #0
 8006218:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800621a:	e175      	b.n	8006508 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800621c:	bf00      	nop
    return;
 800621e:	e173      	b.n	8006508 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006224:	2b01      	cmp	r3, #1
 8006226:	f040 814f 	bne.w	80064c8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800622a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800622e:	f003 0310 	and.w	r3, r3, #16
 8006232:	2b00      	cmp	r3, #0
 8006234:	f000 8148 	beq.w	80064c8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006238:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800623c:	f003 0310 	and.w	r3, r3, #16
 8006240:	2b00      	cmp	r3, #0
 8006242:	f000 8141 	beq.w	80064c8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006246:	2300      	movs	r3, #0
 8006248:	60bb      	str	r3, [r7, #8]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	60bb      	str	r3, [r7, #8]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	60bb      	str	r3, [r7, #8]
 800625a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	695b      	ldr	r3, [r3, #20]
 8006262:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006266:	2b40      	cmp	r3, #64	; 0x40
 8006268:	f040 80b6 	bne.w	80063d8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006278:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800627c:	2b00      	cmp	r3, #0
 800627e:	f000 8145 	beq.w	800650c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006286:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800628a:	429a      	cmp	r2, r3
 800628c:	f080 813e 	bcs.w	800650c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006296:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800629c:	69db      	ldr	r3, [r3, #28]
 800629e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062a2:	f000 8088 	beq.w	80063b6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	330c      	adds	r3, #12
 80062ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80062b4:	e853 3f00 	ldrex	r3, [r3]
 80062b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80062bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80062c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80062c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	330c      	adds	r3, #12
 80062ce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80062d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80062d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062da:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80062de:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80062e2:	e841 2300 	strex	r3, r2, [r1]
 80062e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80062ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d1d9      	bne.n	80062a6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	3314      	adds	r3, #20
 80062f8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80062fc:	e853 3f00 	ldrex	r3, [r3]
 8006300:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006302:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006304:	f023 0301 	bic.w	r3, r3, #1
 8006308:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	3314      	adds	r3, #20
 8006312:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006316:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800631a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800631c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800631e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006322:	e841 2300 	strex	r3, r2, [r1]
 8006326:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006328:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800632a:	2b00      	cmp	r3, #0
 800632c:	d1e1      	bne.n	80062f2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	3314      	adds	r3, #20
 8006334:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006336:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006338:	e853 3f00 	ldrex	r3, [r3]
 800633c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800633e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006340:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006344:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	3314      	adds	r3, #20
 800634e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006352:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006354:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006356:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006358:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800635a:	e841 2300 	strex	r3, r2, [r1]
 800635e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006360:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006362:	2b00      	cmp	r3, #0
 8006364:	d1e3      	bne.n	800632e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2220      	movs	r2, #32
 800636a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2200      	movs	r2, #0
 8006372:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	330c      	adds	r3, #12
 800637a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800637c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800637e:	e853 3f00 	ldrex	r3, [r3]
 8006382:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006384:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006386:	f023 0310 	bic.w	r3, r3, #16
 800638a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	330c      	adds	r3, #12
 8006394:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006398:	65ba      	str	r2, [r7, #88]	; 0x58
 800639a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800639c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800639e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80063a0:	e841 2300 	strex	r3, r2, [r1]
 80063a4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80063a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d1e3      	bne.n	8006374 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063b0:	4618      	mov	r0, r3
 80063b2:	f7fc fbb5 	bl	8002b20 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2202      	movs	r2, #2
 80063ba:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	1ad3      	subs	r3, r2, r3
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	4619      	mov	r1, r3
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f000 f8cb 	bl	8006568 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80063d2:	e09b      	b.n	800650c <HAL_UART_IRQHandler+0x518>
 80063d4:	08006893 	.word	0x08006893
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80063e0:	b29b      	uxth	r3, r3
 80063e2:	1ad3      	subs	r3, r2, r3
 80063e4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80063ec:	b29b      	uxth	r3, r3
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	f000 808e 	beq.w	8006510 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80063f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	f000 8089 	beq.w	8006510 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	330c      	adds	r3, #12
 8006404:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006408:	e853 3f00 	ldrex	r3, [r3]
 800640c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800640e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006410:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006414:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	330c      	adds	r3, #12
 800641e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006422:	647a      	str	r2, [r7, #68]	; 0x44
 8006424:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006426:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006428:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800642a:	e841 2300 	strex	r3, r2, [r1]
 800642e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006430:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006432:	2b00      	cmp	r3, #0
 8006434:	d1e3      	bne.n	80063fe <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	3314      	adds	r3, #20
 800643c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800643e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006440:	e853 3f00 	ldrex	r3, [r3]
 8006444:	623b      	str	r3, [r7, #32]
   return(result);
 8006446:	6a3b      	ldr	r3, [r7, #32]
 8006448:	f023 0301 	bic.w	r3, r3, #1
 800644c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	3314      	adds	r3, #20
 8006456:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800645a:	633a      	str	r2, [r7, #48]	; 0x30
 800645c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800645e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006460:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006462:	e841 2300 	strex	r3, r2, [r1]
 8006466:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800646a:	2b00      	cmp	r3, #0
 800646c:	d1e3      	bne.n	8006436 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2220      	movs	r2, #32
 8006472:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2200      	movs	r2, #0
 800647a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	330c      	adds	r3, #12
 8006482:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	e853 3f00 	ldrex	r3, [r3]
 800648a:	60fb      	str	r3, [r7, #12]
   return(result);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f023 0310 	bic.w	r3, r3, #16
 8006492:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	330c      	adds	r3, #12
 800649c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80064a0:	61fa      	str	r2, [r7, #28]
 80064a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064a4:	69b9      	ldr	r1, [r7, #24]
 80064a6:	69fa      	ldr	r2, [r7, #28]
 80064a8:	e841 2300 	strex	r3, r2, [r1]
 80064ac:	617b      	str	r3, [r7, #20]
   return(result);
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d1e3      	bne.n	800647c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2202      	movs	r2, #2
 80064b8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80064ba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80064be:	4619      	mov	r1, r3
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f000 f851 	bl	8006568 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80064c6:	e023      	b.n	8006510 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80064c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d009      	beq.n	80064e8 <HAL_UART_IRQHandler+0x4f4>
 80064d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d003      	beq.n	80064e8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f000 f9ea 	bl	80068ba <UART_Transmit_IT>
    return;
 80064e6:	e014      	b.n	8006512 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80064e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d00e      	beq.n	8006512 <HAL_UART_IRQHandler+0x51e>
 80064f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d008      	beq.n	8006512 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f000 fa2a 	bl	800695a <UART_EndTransmit_IT>
    return;
 8006506:	e004      	b.n	8006512 <HAL_UART_IRQHandler+0x51e>
    return;
 8006508:	bf00      	nop
 800650a:	e002      	b.n	8006512 <HAL_UART_IRQHandler+0x51e>
      return;
 800650c:	bf00      	nop
 800650e:	e000      	b.n	8006512 <HAL_UART_IRQHandler+0x51e>
      return;
 8006510:	bf00      	nop
  }
}
 8006512:	37e8      	adds	r7, #232	; 0xe8
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}

08006518 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006518:	b480      	push	{r7}
 800651a:	b083      	sub	sp, #12
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006520:	bf00      	nop
 8006522:	370c      	adds	r7, #12
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr

0800652c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800652c:	b480      	push	{r7}
 800652e:	b083      	sub	sp, #12
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006534:	bf00      	nop
 8006536:	370c      	adds	r7, #12
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr

08006540 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006540:	b480      	push	{r7}
 8006542:	b083      	sub	sp, #12
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006548:	bf00      	nop
 800654a:	370c      	adds	r7, #12
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr

08006554 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006554:	b480      	push	{r7}
 8006556:	b083      	sub	sp, #12
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800655c:	bf00      	nop
 800655e:	370c      	adds	r7, #12
 8006560:	46bd      	mov	sp, r7
 8006562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006566:	4770      	bx	lr

08006568 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006568:	b480      	push	{r7}
 800656a:	b083      	sub	sp, #12
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	460b      	mov	r3, r1
 8006572:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006574:	bf00      	nop
 8006576:	370c      	adds	r7, #12
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr

08006580 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b090      	sub	sp, #64	; 0x40
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800658c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006598:	2b00      	cmp	r3, #0
 800659a:	d137      	bne.n	800660c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800659c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800659e:	2200      	movs	r2, #0
 80065a0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80065a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	3314      	adds	r3, #20
 80065a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ac:	e853 3f00 	ldrex	r3, [r3]
 80065b0:	623b      	str	r3, [r7, #32]
   return(result);
 80065b2:	6a3b      	ldr	r3, [r7, #32]
 80065b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80065ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	3314      	adds	r3, #20
 80065c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80065c2:	633a      	str	r2, [r7, #48]	; 0x30
 80065c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80065c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065ca:	e841 2300 	strex	r3, r2, [r1]
 80065ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80065d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d1e5      	bne.n	80065a2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80065d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	330c      	adds	r3, #12
 80065dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	e853 3f00 	ldrex	r3, [r3]
 80065e4:	60fb      	str	r3, [r7, #12]
   return(result);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065ec:	637b      	str	r3, [r7, #52]	; 0x34
 80065ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	330c      	adds	r3, #12
 80065f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80065f6:	61fa      	str	r2, [r7, #28]
 80065f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065fa:	69b9      	ldr	r1, [r7, #24]
 80065fc:	69fa      	ldr	r2, [r7, #28]
 80065fe:	e841 2300 	strex	r3, r2, [r1]
 8006602:	617b      	str	r3, [r7, #20]
   return(result);
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d1e5      	bne.n	80065d6 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800660a:	e002      	b.n	8006612 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800660c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800660e:	f7ff ff83 	bl	8006518 <HAL_UART_TxCpltCallback>
}
 8006612:	bf00      	nop
 8006614:	3740      	adds	r7, #64	; 0x40
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}

0800661a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800661a:	b580      	push	{r7, lr}
 800661c:	b084      	sub	sp, #16
 800661e:	af00      	add	r7, sp, #0
 8006620:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006626:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006628:	68f8      	ldr	r0, [r7, #12]
 800662a:	f7ff ff7f 	bl	800652c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800662e:	bf00      	nop
 8006630:	3710      	adds	r7, #16
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}

08006636 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006636:	b580      	push	{r7, lr}
 8006638:	b084      	sub	sp, #16
 800663a:	af00      	add	r7, sp, #0
 800663c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800663e:	2300      	movs	r3, #0
 8006640:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006646:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	695b      	ldr	r3, [r3, #20]
 800664e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006652:	2b80      	cmp	r3, #128	; 0x80
 8006654:	bf0c      	ite	eq
 8006656:	2301      	moveq	r3, #1
 8006658:	2300      	movne	r3, #0
 800665a:	b2db      	uxtb	r3, r3
 800665c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006664:	b2db      	uxtb	r3, r3
 8006666:	2b21      	cmp	r3, #33	; 0x21
 8006668:	d108      	bne.n	800667c <UART_DMAError+0x46>
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d005      	beq.n	800667c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	2200      	movs	r2, #0
 8006674:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006676:	68b8      	ldr	r0, [r7, #8]
 8006678:	f000 f880 	bl	800677c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	695b      	ldr	r3, [r3, #20]
 8006682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006686:	2b40      	cmp	r3, #64	; 0x40
 8006688:	bf0c      	ite	eq
 800668a:	2301      	moveq	r3, #1
 800668c:	2300      	movne	r3, #0
 800668e:	b2db      	uxtb	r3, r3
 8006690:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006698:	b2db      	uxtb	r3, r3
 800669a:	2b22      	cmp	r3, #34	; 0x22
 800669c:	d108      	bne.n	80066b0 <UART_DMAError+0x7a>
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d005      	beq.n	80066b0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	2200      	movs	r2, #0
 80066a8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80066aa:	68b8      	ldr	r0, [r7, #8]
 80066ac:	f000 f88e 	bl	80067cc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066b4:	f043 0210 	orr.w	r2, r3, #16
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80066bc:	68b8      	ldr	r0, [r7, #8]
 80066be:	f7ff ff49 	bl	8006554 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066c2:	bf00      	nop
 80066c4:	3710      	adds	r7, #16
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}

080066ca <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80066ca:	b580      	push	{r7, lr}
 80066cc:	b086      	sub	sp, #24
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	60f8      	str	r0, [r7, #12]
 80066d2:	60b9      	str	r1, [r7, #8]
 80066d4:	603b      	str	r3, [r7, #0]
 80066d6:	4613      	mov	r3, r2
 80066d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066da:	e03b      	b.n	8006754 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066dc:	6a3b      	ldr	r3, [r7, #32]
 80066de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066e2:	d037      	beq.n	8006754 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066e4:	f7fb fcf4 	bl	80020d0 <HAL_GetTick>
 80066e8:	4602      	mov	r2, r0
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	1ad3      	subs	r3, r2, r3
 80066ee:	6a3a      	ldr	r2, [r7, #32]
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d302      	bcc.n	80066fa <UART_WaitOnFlagUntilTimeout+0x30>
 80066f4:	6a3b      	ldr	r3, [r7, #32]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d101      	bne.n	80066fe <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80066fa:	2303      	movs	r3, #3
 80066fc:	e03a      	b.n	8006774 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	68db      	ldr	r3, [r3, #12]
 8006704:	f003 0304 	and.w	r3, r3, #4
 8006708:	2b00      	cmp	r3, #0
 800670a:	d023      	beq.n	8006754 <UART_WaitOnFlagUntilTimeout+0x8a>
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	2b80      	cmp	r3, #128	; 0x80
 8006710:	d020      	beq.n	8006754 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	2b40      	cmp	r3, #64	; 0x40
 8006716:	d01d      	beq.n	8006754 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f003 0308 	and.w	r3, r3, #8
 8006722:	2b08      	cmp	r3, #8
 8006724:	d116      	bne.n	8006754 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006726:	2300      	movs	r3, #0
 8006728:	617b      	str	r3, [r7, #20]
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	617b      	str	r3, [r7, #20]
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	617b      	str	r3, [r7, #20]
 800673a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800673c:	68f8      	ldr	r0, [r7, #12]
 800673e:	f000 f845 	bl	80067cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2208      	movs	r2, #8
 8006746:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2200      	movs	r2, #0
 800674c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006750:	2301      	movs	r3, #1
 8006752:	e00f      	b.n	8006774 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	4013      	ands	r3, r2
 800675e:	68ba      	ldr	r2, [r7, #8]
 8006760:	429a      	cmp	r2, r3
 8006762:	bf0c      	ite	eq
 8006764:	2301      	moveq	r3, #1
 8006766:	2300      	movne	r3, #0
 8006768:	b2db      	uxtb	r3, r3
 800676a:	461a      	mov	r2, r3
 800676c:	79fb      	ldrb	r3, [r7, #7]
 800676e:	429a      	cmp	r2, r3
 8006770:	d0b4      	beq.n	80066dc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006772:	2300      	movs	r3, #0
}
 8006774:	4618      	mov	r0, r3
 8006776:	3718      	adds	r7, #24
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}

0800677c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800677c:	b480      	push	{r7}
 800677e:	b089      	sub	sp, #36	; 0x24
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	330c      	adds	r3, #12
 800678a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	e853 3f00 	ldrex	r3, [r3]
 8006792:	60bb      	str	r3, [r7, #8]
   return(result);
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800679a:	61fb      	str	r3, [r7, #28]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	330c      	adds	r3, #12
 80067a2:	69fa      	ldr	r2, [r7, #28]
 80067a4:	61ba      	str	r2, [r7, #24]
 80067a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067a8:	6979      	ldr	r1, [r7, #20]
 80067aa:	69ba      	ldr	r2, [r7, #24]
 80067ac:	e841 2300 	strex	r3, r2, [r1]
 80067b0:	613b      	str	r3, [r7, #16]
   return(result);
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d1e5      	bne.n	8006784 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2220      	movs	r2, #32
 80067bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 80067c0:	bf00      	nop
 80067c2:	3724      	adds	r7, #36	; 0x24
 80067c4:	46bd      	mov	sp, r7
 80067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ca:	4770      	bx	lr

080067cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b095      	sub	sp, #84	; 0x54
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	330c      	adds	r3, #12
 80067da:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067de:	e853 3f00 	ldrex	r3, [r3]
 80067e2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80067e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80067ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	330c      	adds	r3, #12
 80067f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80067f4:	643a      	str	r2, [r7, #64]	; 0x40
 80067f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80067fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80067fc:	e841 2300 	strex	r3, r2, [r1]
 8006800:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006804:	2b00      	cmp	r3, #0
 8006806:	d1e5      	bne.n	80067d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	3314      	adds	r3, #20
 800680e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006810:	6a3b      	ldr	r3, [r7, #32]
 8006812:	e853 3f00 	ldrex	r3, [r3]
 8006816:	61fb      	str	r3, [r7, #28]
   return(result);
 8006818:	69fb      	ldr	r3, [r7, #28]
 800681a:	f023 0301 	bic.w	r3, r3, #1
 800681e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	3314      	adds	r3, #20
 8006826:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006828:	62fa      	str	r2, [r7, #44]	; 0x2c
 800682a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800682c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800682e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006830:	e841 2300 	strex	r3, r2, [r1]
 8006834:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006838:	2b00      	cmp	r3, #0
 800683a:	d1e5      	bne.n	8006808 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006840:	2b01      	cmp	r3, #1
 8006842:	d119      	bne.n	8006878 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	330c      	adds	r3, #12
 800684a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	e853 3f00 	ldrex	r3, [r3]
 8006852:	60bb      	str	r3, [r7, #8]
   return(result);
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	f023 0310 	bic.w	r3, r3, #16
 800685a:	647b      	str	r3, [r7, #68]	; 0x44
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	330c      	adds	r3, #12
 8006862:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006864:	61ba      	str	r2, [r7, #24]
 8006866:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006868:	6979      	ldr	r1, [r7, #20]
 800686a:	69ba      	ldr	r2, [r7, #24]
 800686c:	e841 2300 	strex	r3, r2, [r1]
 8006870:	613b      	str	r3, [r7, #16]
   return(result);
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d1e5      	bne.n	8006844 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2220      	movs	r2, #32
 800687c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2200      	movs	r2, #0
 8006884:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006886:	bf00      	nop
 8006888:	3754      	adds	r7, #84	; 0x54
 800688a:	46bd      	mov	sp, r7
 800688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006890:	4770      	bx	lr

08006892 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006892:	b580      	push	{r7, lr}
 8006894:	b084      	sub	sp, #16
 8006896:	af00      	add	r7, sp, #0
 8006898:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800689e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2200      	movs	r2, #0
 80068a4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2200      	movs	r2, #0
 80068aa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80068ac:	68f8      	ldr	r0, [r7, #12]
 80068ae:	f7ff fe51 	bl	8006554 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068b2:	bf00      	nop
 80068b4:	3710      	adds	r7, #16
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}

080068ba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80068ba:	b480      	push	{r7}
 80068bc:	b085      	sub	sp, #20
 80068be:	af00      	add	r7, sp, #0
 80068c0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068c8:	b2db      	uxtb	r3, r3
 80068ca:	2b21      	cmp	r3, #33	; 0x21
 80068cc:	d13e      	bne.n	800694c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	689b      	ldr	r3, [r3, #8]
 80068d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068d6:	d114      	bne.n	8006902 <UART_Transmit_IT+0x48>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	691b      	ldr	r3, [r3, #16]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d110      	bne.n	8006902 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6a1b      	ldr	r3, [r3, #32]
 80068e4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	881b      	ldrh	r3, [r3, #0]
 80068ea:	461a      	mov	r2, r3
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80068f4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6a1b      	ldr	r3, [r3, #32]
 80068fa:	1c9a      	adds	r2, r3, #2
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	621a      	str	r2, [r3, #32]
 8006900:	e008      	b.n	8006914 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6a1b      	ldr	r3, [r3, #32]
 8006906:	1c59      	adds	r1, r3, #1
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	6211      	str	r1, [r2, #32]
 800690c:	781a      	ldrb	r2, [r3, #0]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006918:	b29b      	uxth	r3, r3
 800691a:	3b01      	subs	r3, #1
 800691c:	b29b      	uxth	r3, r3
 800691e:	687a      	ldr	r2, [r7, #4]
 8006920:	4619      	mov	r1, r3
 8006922:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006924:	2b00      	cmp	r3, #0
 8006926:	d10f      	bne.n	8006948 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	68da      	ldr	r2, [r3, #12]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006936:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	68da      	ldr	r2, [r3, #12]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006946:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006948:	2300      	movs	r3, #0
 800694a:	e000      	b.n	800694e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800694c:	2302      	movs	r3, #2
  }
}
 800694e:	4618      	mov	r0, r3
 8006950:	3714      	adds	r7, #20
 8006952:	46bd      	mov	sp, r7
 8006954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006958:	4770      	bx	lr

0800695a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800695a:	b580      	push	{r7, lr}
 800695c:	b082      	sub	sp, #8
 800695e:	af00      	add	r7, sp, #0
 8006960:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	68da      	ldr	r2, [r3, #12]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006970:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2220      	movs	r2, #32
 8006976:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f7ff fdcc 	bl	8006518 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006980:	2300      	movs	r3, #0
}
 8006982:	4618      	mov	r0, r3
 8006984:	3708      	adds	r7, #8
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}

0800698a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800698a:	b580      	push	{r7, lr}
 800698c:	b08c      	sub	sp, #48	; 0x30
 800698e:	af00      	add	r7, sp, #0
 8006990:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006998:	b2db      	uxtb	r3, r3
 800699a:	2b22      	cmp	r3, #34	; 0x22
 800699c:	f040 80ae 	bne.w	8006afc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069a8:	d117      	bne.n	80069da <UART_Receive_IT+0x50>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	691b      	ldr	r3, [r3, #16]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d113      	bne.n	80069da <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80069b2:	2300      	movs	r3, #0
 80069b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ba:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069c8:	b29a      	uxth	r2, r3
 80069ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069cc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069d2:	1c9a      	adds	r2, r3, #2
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	629a      	str	r2, [r3, #40]	; 0x28
 80069d8:	e026      	b.n	8006a28 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069de:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80069e0:	2300      	movs	r3, #0
 80069e2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069ec:	d007      	beq.n	80069fe <UART_Receive_IT+0x74>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d10a      	bne.n	8006a0c <UART_Receive_IT+0x82>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	691b      	ldr	r3, [r3, #16]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d106      	bne.n	8006a0c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	b2da      	uxtb	r2, r3
 8006a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a08:	701a      	strb	r2, [r3, #0]
 8006a0a:	e008      	b.n	8006a1e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	b2db      	uxtb	r3, r3
 8006a14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a18:	b2da      	uxtb	r2, r3
 8006a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a1c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a22:	1c5a      	adds	r2, r3, #1
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a2c:	b29b      	uxth	r3, r3
 8006a2e:	3b01      	subs	r3, #1
 8006a30:	b29b      	uxth	r3, r3
 8006a32:	687a      	ldr	r2, [r7, #4]
 8006a34:	4619      	mov	r1, r3
 8006a36:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d15d      	bne.n	8006af8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	68da      	ldr	r2, [r3, #12]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f022 0220 	bic.w	r2, r2, #32
 8006a4a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	68da      	ldr	r2, [r3, #12]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a5a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	695a      	ldr	r2, [r3, #20]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f022 0201 	bic.w	r2, r2, #1
 8006a6a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2220      	movs	r2, #32
 8006a70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2200      	movs	r2, #0
 8006a78:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a7e:	2b01      	cmp	r3, #1
 8006a80:	d135      	bne.n	8006aee <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2200      	movs	r2, #0
 8006a86:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	330c      	adds	r3, #12
 8006a8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	e853 3f00 	ldrex	r3, [r3]
 8006a96:	613b      	str	r3, [r7, #16]
   return(result);
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	f023 0310 	bic.w	r3, r3, #16
 8006a9e:	627b      	str	r3, [r7, #36]	; 0x24
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	330c      	adds	r3, #12
 8006aa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006aa8:	623a      	str	r2, [r7, #32]
 8006aaa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aac:	69f9      	ldr	r1, [r7, #28]
 8006aae:	6a3a      	ldr	r2, [r7, #32]
 8006ab0:	e841 2300 	strex	r3, r2, [r1]
 8006ab4:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ab6:	69bb      	ldr	r3, [r7, #24]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d1e5      	bne.n	8006a88 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f003 0310 	and.w	r3, r3, #16
 8006ac6:	2b10      	cmp	r3, #16
 8006ac8:	d10a      	bne.n	8006ae0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006aca:	2300      	movs	r3, #0
 8006acc:	60fb      	str	r3, [r7, #12]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	60fb      	str	r3, [r7, #12]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	60fb      	str	r3, [r7, #12]
 8006ade:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006ae4:	4619      	mov	r1, r3
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f7ff fd3e 	bl	8006568 <HAL_UARTEx_RxEventCallback>
 8006aec:	e002      	b.n	8006af4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f7ff fd26 	bl	8006540 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006af4:	2300      	movs	r3, #0
 8006af6:	e002      	b.n	8006afe <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006af8:	2300      	movs	r3, #0
 8006afa:	e000      	b.n	8006afe <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006afc:	2302      	movs	r3, #2
  }
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3730      	adds	r7, #48	; 0x30
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
	...

08006b08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b0c:	b0c0      	sub	sp, #256	; 0x100
 8006b0e:	af00      	add	r7, sp, #0
 8006b10:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	691b      	ldr	r3, [r3, #16]
 8006b1c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b24:	68d9      	ldr	r1, [r3, #12]
 8006b26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b2a:	681a      	ldr	r2, [r3, #0]
 8006b2c:	ea40 0301 	orr.w	r3, r0, r1
 8006b30:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006b32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b36:	689a      	ldr	r2, [r3, #8]
 8006b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b3c:	691b      	ldr	r3, [r3, #16]
 8006b3e:	431a      	orrs	r2, r3
 8006b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b44:	695b      	ldr	r3, [r3, #20]
 8006b46:	431a      	orrs	r2, r3
 8006b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b4c:	69db      	ldr	r3, [r3, #28]
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	68db      	ldr	r3, [r3, #12]
 8006b5c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006b60:	f021 010c 	bic.w	r1, r1, #12
 8006b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b68:	681a      	ldr	r2, [r3, #0]
 8006b6a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006b6e:	430b      	orrs	r3, r1
 8006b70:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	695b      	ldr	r3, [r3, #20]
 8006b7a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b82:	6999      	ldr	r1, [r3, #24]
 8006b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b88:	681a      	ldr	r2, [r3, #0]
 8006b8a:	ea40 0301 	orr.w	r3, r0, r1
 8006b8e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b94:	681a      	ldr	r2, [r3, #0]
 8006b96:	4b8f      	ldr	r3, [pc, #572]	; (8006dd4 <UART_SetConfig+0x2cc>)
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	d005      	beq.n	8006ba8 <UART_SetConfig+0xa0>
 8006b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ba0:	681a      	ldr	r2, [r3, #0]
 8006ba2:	4b8d      	ldr	r3, [pc, #564]	; (8006dd8 <UART_SetConfig+0x2d0>)
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d104      	bne.n	8006bb2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006ba8:	f7fe fdf0 	bl	800578c <HAL_RCC_GetPCLK2Freq>
 8006bac:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006bb0:	e003      	b.n	8006bba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006bb2:	f7fe fdd7 	bl	8005764 <HAL_RCC_GetPCLK1Freq>
 8006bb6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006bba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bbe:	69db      	ldr	r3, [r3, #28]
 8006bc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bc4:	f040 810c 	bne.w	8006de0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006bc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006bcc:	2200      	movs	r2, #0
 8006bce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006bd2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006bd6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006bda:	4622      	mov	r2, r4
 8006bdc:	462b      	mov	r3, r5
 8006bde:	1891      	adds	r1, r2, r2
 8006be0:	65b9      	str	r1, [r7, #88]	; 0x58
 8006be2:	415b      	adcs	r3, r3
 8006be4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006be6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006bea:	4621      	mov	r1, r4
 8006bec:	eb12 0801 	adds.w	r8, r2, r1
 8006bf0:	4629      	mov	r1, r5
 8006bf2:	eb43 0901 	adc.w	r9, r3, r1
 8006bf6:	f04f 0200 	mov.w	r2, #0
 8006bfa:	f04f 0300 	mov.w	r3, #0
 8006bfe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006c02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006c06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006c0a:	4690      	mov	r8, r2
 8006c0c:	4699      	mov	r9, r3
 8006c0e:	4623      	mov	r3, r4
 8006c10:	eb18 0303 	adds.w	r3, r8, r3
 8006c14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006c18:	462b      	mov	r3, r5
 8006c1a:	eb49 0303 	adc.w	r3, r9, r3
 8006c1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006c2e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006c32:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006c36:	460b      	mov	r3, r1
 8006c38:	18db      	adds	r3, r3, r3
 8006c3a:	653b      	str	r3, [r7, #80]	; 0x50
 8006c3c:	4613      	mov	r3, r2
 8006c3e:	eb42 0303 	adc.w	r3, r2, r3
 8006c42:	657b      	str	r3, [r7, #84]	; 0x54
 8006c44:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006c48:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006c4c:	f7f9 fb20 	bl	8000290 <__aeabi_uldivmod>
 8006c50:	4602      	mov	r2, r0
 8006c52:	460b      	mov	r3, r1
 8006c54:	4b61      	ldr	r3, [pc, #388]	; (8006ddc <UART_SetConfig+0x2d4>)
 8006c56:	fba3 2302 	umull	r2, r3, r3, r2
 8006c5a:	095b      	lsrs	r3, r3, #5
 8006c5c:	011c      	lsls	r4, r3, #4
 8006c5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c62:	2200      	movs	r2, #0
 8006c64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006c68:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006c6c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006c70:	4642      	mov	r2, r8
 8006c72:	464b      	mov	r3, r9
 8006c74:	1891      	adds	r1, r2, r2
 8006c76:	64b9      	str	r1, [r7, #72]	; 0x48
 8006c78:	415b      	adcs	r3, r3
 8006c7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c7c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006c80:	4641      	mov	r1, r8
 8006c82:	eb12 0a01 	adds.w	sl, r2, r1
 8006c86:	4649      	mov	r1, r9
 8006c88:	eb43 0b01 	adc.w	fp, r3, r1
 8006c8c:	f04f 0200 	mov.w	r2, #0
 8006c90:	f04f 0300 	mov.w	r3, #0
 8006c94:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006c98:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006c9c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006ca0:	4692      	mov	sl, r2
 8006ca2:	469b      	mov	fp, r3
 8006ca4:	4643      	mov	r3, r8
 8006ca6:	eb1a 0303 	adds.w	r3, sl, r3
 8006caa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006cae:	464b      	mov	r3, r9
 8006cb0:	eb4b 0303 	adc.w	r3, fp, r3
 8006cb4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006cc4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006cc8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006ccc:	460b      	mov	r3, r1
 8006cce:	18db      	adds	r3, r3, r3
 8006cd0:	643b      	str	r3, [r7, #64]	; 0x40
 8006cd2:	4613      	mov	r3, r2
 8006cd4:	eb42 0303 	adc.w	r3, r2, r3
 8006cd8:	647b      	str	r3, [r7, #68]	; 0x44
 8006cda:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006cde:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006ce2:	f7f9 fad5 	bl	8000290 <__aeabi_uldivmod>
 8006ce6:	4602      	mov	r2, r0
 8006ce8:	460b      	mov	r3, r1
 8006cea:	4611      	mov	r1, r2
 8006cec:	4b3b      	ldr	r3, [pc, #236]	; (8006ddc <UART_SetConfig+0x2d4>)
 8006cee:	fba3 2301 	umull	r2, r3, r3, r1
 8006cf2:	095b      	lsrs	r3, r3, #5
 8006cf4:	2264      	movs	r2, #100	; 0x64
 8006cf6:	fb02 f303 	mul.w	r3, r2, r3
 8006cfa:	1acb      	subs	r3, r1, r3
 8006cfc:	00db      	lsls	r3, r3, #3
 8006cfe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006d02:	4b36      	ldr	r3, [pc, #216]	; (8006ddc <UART_SetConfig+0x2d4>)
 8006d04:	fba3 2302 	umull	r2, r3, r3, r2
 8006d08:	095b      	lsrs	r3, r3, #5
 8006d0a:	005b      	lsls	r3, r3, #1
 8006d0c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006d10:	441c      	add	r4, r3
 8006d12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d16:	2200      	movs	r2, #0
 8006d18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006d1c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006d20:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006d24:	4642      	mov	r2, r8
 8006d26:	464b      	mov	r3, r9
 8006d28:	1891      	adds	r1, r2, r2
 8006d2a:	63b9      	str	r1, [r7, #56]	; 0x38
 8006d2c:	415b      	adcs	r3, r3
 8006d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d30:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006d34:	4641      	mov	r1, r8
 8006d36:	1851      	adds	r1, r2, r1
 8006d38:	6339      	str	r1, [r7, #48]	; 0x30
 8006d3a:	4649      	mov	r1, r9
 8006d3c:	414b      	adcs	r3, r1
 8006d3e:	637b      	str	r3, [r7, #52]	; 0x34
 8006d40:	f04f 0200 	mov.w	r2, #0
 8006d44:	f04f 0300 	mov.w	r3, #0
 8006d48:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006d4c:	4659      	mov	r1, fp
 8006d4e:	00cb      	lsls	r3, r1, #3
 8006d50:	4651      	mov	r1, sl
 8006d52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d56:	4651      	mov	r1, sl
 8006d58:	00ca      	lsls	r2, r1, #3
 8006d5a:	4610      	mov	r0, r2
 8006d5c:	4619      	mov	r1, r3
 8006d5e:	4603      	mov	r3, r0
 8006d60:	4642      	mov	r2, r8
 8006d62:	189b      	adds	r3, r3, r2
 8006d64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006d68:	464b      	mov	r3, r9
 8006d6a:	460a      	mov	r2, r1
 8006d6c:	eb42 0303 	adc.w	r3, r2, r3
 8006d70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006d80:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006d84:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006d88:	460b      	mov	r3, r1
 8006d8a:	18db      	adds	r3, r3, r3
 8006d8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d8e:	4613      	mov	r3, r2
 8006d90:	eb42 0303 	adc.w	r3, r2, r3
 8006d94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d96:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006d9a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006d9e:	f7f9 fa77 	bl	8000290 <__aeabi_uldivmod>
 8006da2:	4602      	mov	r2, r0
 8006da4:	460b      	mov	r3, r1
 8006da6:	4b0d      	ldr	r3, [pc, #52]	; (8006ddc <UART_SetConfig+0x2d4>)
 8006da8:	fba3 1302 	umull	r1, r3, r3, r2
 8006dac:	095b      	lsrs	r3, r3, #5
 8006dae:	2164      	movs	r1, #100	; 0x64
 8006db0:	fb01 f303 	mul.w	r3, r1, r3
 8006db4:	1ad3      	subs	r3, r2, r3
 8006db6:	00db      	lsls	r3, r3, #3
 8006db8:	3332      	adds	r3, #50	; 0x32
 8006dba:	4a08      	ldr	r2, [pc, #32]	; (8006ddc <UART_SetConfig+0x2d4>)
 8006dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8006dc0:	095b      	lsrs	r3, r3, #5
 8006dc2:	f003 0207 	and.w	r2, r3, #7
 8006dc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4422      	add	r2, r4
 8006dce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006dd0:	e106      	b.n	8006fe0 <UART_SetConfig+0x4d8>
 8006dd2:	bf00      	nop
 8006dd4:	40011000 	.word	0x40011000
 8006dd8:	40011400 	.word	0x40011400
 8006ddc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006de0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006de4:	2200      	movs	r2, #0
 8006de6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006dea:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006dee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006df2:	4642      	mov	r2, r8
 8006df4:	464b      	mov	r3, r9
 8006df6:	1891      	adds	r1, r2, r2
 8006df8:	6239      	str	r1, [r7, #32]
 8006dfa:	415b      	adcs	r3, r3
 8006dfc:	627b      	str	r3, [r7, #36]	; 0x24
 8006dfe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006e02:	4641      	mov	r1, r8
 8006e04:	1854      	adds	r4, r2, r1
 8006e06:	4649      	mov	r1, r9
 8006e08:	eb43 0501 	adc.w	r5, r3, r1
 8006e0c:	f04f 0200 	mov.w	r2, #0
 8006e10:	f04f 0300 	mov.w	r3, #0
 8006e14:	00eb      	lsls	r3, r5, #3
 8006e16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006e1a:	00e2      	lsls	r2, r4, #3
 8006e1c:	4614      	mov	r4, r2
 8006e1e:	461d      	mov	r5, r3
 8006e20:	4643      	mov	r3, r8
 8006e22:	18e3      	adds	r3, r4, r3
 8006e24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006e28:	464b      	mov	r3, r9
 8006e2a:	eb45 0303 	adc.w	r3, r5, r3
 8006e2e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006e32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006e3e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006e42:	f04f 0200 	mov.w	r2, #0
 8006e46:	f04f 0300 	mov.w	r3, #0
 8006e4a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006e4e:	4629      	mov	r1, r5
 8006e50:	008b      	lsls	r3, r1, #2
 8006e52:	4621      	mov	r1, r4
 8006e54:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e58:	4621      	mov	r1, r4
 8006e5a:	008a      	lsls	r2, r1, #2
 8006e5c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006e60:	f7f9 fa16 	bl	8000290 <__aeabi_uldivmod>
 8006e64:	4602      	mov	r2, r0
 8006e66:	460b      	mov	r3, r1
 8006e68:	4b60      	ldr	r3, [pc, #384]	; (8006fec <UART_SetConfig+0x4e4>)
 8006e6a:	fba3 2302 	umull	r2, r3, r3, r2
 8006e6e:	095b      	lsrs	r3, r3, #5
 8006e70:	011c      	lsls	r4, r3, #4
 8006e72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e76:	2200      	movs	r2, #0
 8006e78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006e7c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006e80:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006e84:	4642      	mov	r2, r8
 8006e86:	464b      	mov	r3, r9
 8006e88:	1891      	adds	r1, r2, r2
 8006e8a:	61b9      	str	r1, [r7, #24]
 8006e8c:	415b      	adcs	r3, r3
 8006e8e:	61fb      	str	r3, [r7, #28]
 8006e90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e94:	4641      	mov	r1, r8
 8006e96:	1851      	adds	r1, r2, r1
 8006e98:	6139      	str	r1, [r7, #16]
 8006e9a:	4649      	mov	r1, r9
 8006e9c:	414b      	adcs	r3, r1
 8006e9e:	617b      	str	r3, [r7, #20]
 8006ea0:	f04f 0200 	mov.w	r2, #0
 8006ea4:	f04f 0300 	mov.w	r3, #0
 8006ea8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006eac:	4659      	mov	r1, fp
 8006eae:	00cb      	lsls	r3, r1, #3
 8006eb0:	4651      	mov	r1, sl
 8006eb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006eb6:	4651      	mov	r1, sl
 8006eb8:	00ca      	lsls	r2, r1, #3
 8006eba:	4610      	mov	r0, r2
 8006ebc:	4619      	mov	r1, r3
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	4642      	mov	r2, r8
 8006ec2:	189b      	adds	r3, r3, r2
 8006ec4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006ec8:	464b      	mov	r3, r9
 8006eca:	460a      	mov	r2, r1
 8006ecc:	eb42 0303 	adc.w	r3, r2, r3
 8006ed0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	2200      	movs	r2, #0
 8006edc:	67bb      	str	r3, [r7, #120]	; 0x78
 8006ede:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006ee0:	f04f 0200 	mov.w	r2, #0
 8006ee4:	f04f 0300 	mov.w	r3, #0
 8006ee8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006eec:	4649      	mov	r1, r9
 8006eee:	008b      	lsls	r3, r1, #2
 8006ef0:	4641      	mov	r1, r8
 8006ef2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ef6:	4641      	mov	r1, r8
 8006ef8:	008a      	lsls	r2, r1, #2
 8006efa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006efe:	f7f9 f9c7 	bl	8000290 <__aeabi_uldivmod>
 8006f02:	4602      	mov	r2, r0
 8006f04:	460b      	mov	r3, r1
 8006f06:	4611      	mov	r1, r2
 8006f08:	4b38      	ldr	r3, [pc, #224]	; (8006fec <UART_SetConfig+0x4e4>)
 8006f0a:	fba3 2301 	umull	r2, r3, r3, r1
 8006f0e:	095b      	lsrs	r3, r3, #5
 8006f10:	2264      	movs	r2, #100	; 0x64
 8006f12:	fb02 f303 	mul.w	r3, r2, r3
 8006f16:	1acb      	subs	r3, r1, r3
 8006f18:	011b      	lsls	r3, r3, #4
 8006f1a:	3332      	adds	r3, #50	; 0x32
 8006f1c:	4a33      	ldr	r2, [pc, #204]	; (8006fec <UART_SetConfig+0x4e4>)
 8006f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8006f22:	095b      	lsrs	r3, r3, #5
 8006f24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f28:	441c      	add	r4, r3
 8006f2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f2e:	2200      	movs	r2, #0
 8006f30:	673b      	str	r3, [r7, #112]	; 0x70
 8006f32:	677a      	str	r2, [r7, #116]	; 0x74
 8006f34:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006f38:	4642      	mov	r2, r8
 8006f3a:	464b      	mov	r3, r9
 8006f3c:	1891      	adds	r1, r2, r2
 8006f3e:	60b9      	str	r1, [r7, #8]
 8006f40:	415b      	adcs	r3, r3
 8006f42:	60fb      	str	r3, [r7, #12]
 8006f44:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006f48:	4641      	mov	r1, r8
 8006f4a:	1851      	adds	r1, r2, r1
 8006f4c:	6039      	str	r1, [r7, #0]
 8006f4e:	4649      	mov	r1, r9
 8006f50:	414b      	adcs	r3, r1
 8006f52:	607b      	str	r3, [r7, #4]
 8006f54:	f04f 0200 	mov.w	r2, #0
 8006f58:	f04f 0300 	mov.w	r3, #0
 8006f5c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006f60:	4659      	mov	r1, fp
 8006f62:	00cb      	lsls	r3, r1, #3
 8006f64:	4651      	mov	r1, sl
 8006f66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f6a:	4651      	mov	r1, sl
 8006f6c:	00ca      	lsls	r2, r1, #3
 8006f6e:	4610      	mov	r0, r2
 8006f70:	4619      	mov	r1, r3
 8006f72:	4603      	mov	r3, r0
 8006f74:	4642      	mov	r2, r8
 8006f76:	189b      	adds	r3, r3, r2
 8006f78:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f7a:	464b      	mov	r3, r9
 8006f7c:	460a      	mov	r2, r1
 8006f7e:	eb42 0303 	adc.w	r3, r2, r3
 8006f82:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	663b      	str	r3, [r7, #96]	; 0x60
 8006f8e:	667a      	str	r2, [r7, #100]	; 0x64
 8006f90:	f04f 0200 	mov.w	r2, #0
 8006f94:	f04f 0300 	mov.w	r3, #0
 8006f98:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006f9c:	4649      	mov	r1, r9
 8006f9e:	008b      	lsls	r3, r1, #2
 8006fa0:	4641      	mov	r1, r8
 8006fa2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006fa6:	4641      	mov	r1, r8
 8006fa8:	008a      	lsls	r2, r1, #2
 8006faa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006fae:	f7f9 f96f 	bl	8000290 <__aeabi_uldivmod>
 8006fb2:	4602      	mov	r2, r0
 8006fb4:	460b      	mov	r3, r1
 8006fb6:	4b0d      	ldr	r3, [pc, #52]	; (8006fec <UART_SetConfig+0x4e4>)
 8006fb8:	fba3 1302 	umull	r1, r3, r3, r2
 8006fbc:	095b      	lsrs	r3, r3, #5
 8006fbe:	2164      	movs	r1, #100	; 0x64
 8006fc0:	fb01 f303 	mul.w	r3, r1, r3
 8006fc4:	1ad3      	subs	r3, r2, r3
 8006fc6:	011b      	lsls	r3, r3, #4
 8006fc8:	3332      	adds	r3, #50	; 0x32
 8006fca:	4a08      	ldr	r2, [pc, #32]	; (8006fec <UART_SetConfig+0x4e4>)
 8006fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8006fd0:	095b      	lsrs	r3, r3, #5
 8006fd2:	f003 020f 	and.w	r2, r3, #15
 8006fd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4422      	add	r2, r4
 8006fde:	609a      	str	r2, [r3, #8]
}
 8006fe0:	bf00      	nop
 8006fe2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006fec:	51eb851f 	.word	0x51eb851f

08006ff0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006ff0:	b084      	sub	sp, #16
 8006ff2:	b580      	push	{r7, lr}
 8006ff4:	b084      	sub	sp, #16
 8006ff6:	af00      	add	r7, sp, #0
 8006ff8:	6078      	str	r0, [r7, #4]
 8006ffa:	f107 001c 	add.w	r0, r7, #28
 8006ffe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007002:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8007006:	2b01      	cmp	r3, #1
 8007008:	d123      	bne.n	8007052 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800700e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	68db      	ldr	r3, [r3, #12]
 800701a:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800701e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007022:	687a      	ldr	r2, [r7, #4]
 8007024:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	68db      	ldr	r3, [r3, #12]
 800702a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007032:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007036:	2b01      	cmp	r3, #1
 8007038:	d105      	bne.n	8007046 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	68db      	ldr	r3, [r3, #12]
 800703e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 faa0 	bl	800758c <USB_CoreReset>
 800704c:	4603      	mov	r3, r0
 800704e:	73fb      	strb	r3, [r7, #15]
 8007050:	e01b      	b.n	800708a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	68db      	ldr	r3, [r3, #12]
 8007056:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f000 fa94 	bl	800758c <USB_CoreReset>
 8007064:	4603      	mov	r3, r0
 8007066:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007068:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800706c:	2b00      	cmp	r3, #0
 800706e:	d106      	bne.n	800707e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007074:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	639a      	str	r2, [r3, #56]	; 0x38
 800707c:	e005      	b.n	800708a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007082:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800708a:	7fbb      	ldrb	r3, [r7, #30]
 800708c:	2b01      	cmp	r3, #1
 800708e:	d10b      	bne.n	80070a8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	689b      	ldr	r3, [r3, #8]
 8007094:	f043 0206 	orr.w	r2, r3, #6
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	689b      	ldr	r3, [r3, #8]
 80070a0:	f043 0220 	orr.w	r2, r3, #32
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80070a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3710      	adds	r7, #16
 80070ae:	46bd      	mov	sp, r7
 80070b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80070b4:	b004      	add	sp, #16
 80070b6:	4770      	bx	lr

080070b8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b083      	sub	sp, #12
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	689b      	ldr	r3, [r3, #8]
 80070c4:	f023 0201 	bic.w	r2, r3, #1
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80070cc:	2300      	movs	r3, #0
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	370c      	adds	r7, #12
 80070d2:	46bd      	mov	sp, r7
 80070d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d8:	4770      	bx	lr

080070da <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80070da:	b580      	push	{r7, lr}
 80070dc:	b084      	sub	sp, #16
 80070de:	af00      	add	r7, sp, #0
 80070e0:	6078      	str	r0, [r7, #4]
 80070e2:	460b      	mov	r3, r1
 80070e4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80070e6:	2300      	movs	r3, #0
 80070e8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	68db      	ldr	r3, [r3, #12]
 80070ee:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80070f6:	78fb      	ldrb	r3, [r7, #3]
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	d115      	bne.n	8007128 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	68db      	ldr	r3, [r3, #12]
 8007100:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007108:	200a      	movs	r0, #10
 800710a:	f7fa ffed 	bl	80020e8 <HAL_Delay>
      ms += 10U;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	330a      	adds	r3, #10
 8007112:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f000 fa2b 	bl	8007570 <USB_GetMode>
 800711a:	4603      	mov	r3, r0
 800711c:	2b01      	cmp	r3, #1
 800711e:	d01e      	beq.n	800715e <USB_SetCurrentMode+0x84>
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2bc7      	cmp	r3, #199	; 0xc7
 8007124:	d9f0      	bls.n	8007108 <USB_SetCurrentMode+0x2e>
 8007126:	e01a      	b.n	800715e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007128:	78fb      	ldrb	r3, [r7, #3]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d115      	bne.n	800715a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	68db      	ldr	r3, [r3, #12]
 8007132:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800713a:	200a      	movs	r0, #10
 800713c:	f7fa ffd4 	bl	80020e8 <HAL_Delay>
      ms += 10U;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	330a      	adds	r3, #10
 8007144:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f000 fa12 	bl	8007570 <USB_GetMode>
 800714c:	4603      	mov	r3, r0
 800714e:	2b00      	cmp	r3, #0
 8007150:	d005      	beq.n	800715e <USB_SetCurrentMode+0x84>
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2bc7      	cmp	r3, #199	; 0xc7
 8007156:	d9f0      	bls.n	800713a <USB_SetCurrentMode+0x60>
 8007158:	e001      	b.n	800715e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800715a:	2301      	movs	r3, #1
 800715c:	e005      	b.n	800716a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2bc8      	cmp	r3, #200	; 0xc8
 8007162:	d101      	bne.n	8007168 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007164:	2301      	movs	r3, #1
 8007166:	e000      	b.n	800716a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007168:	2300      	movs	r3, #0
}
 800716a:	4618      	mov	r0, r3
 800716c:	3710      	adds	r7, #16
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}
	...

08007174 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007174:	b084      	sub	sp, #16
 8007176:	b580      	push	{r7, lr}
 8007178:	b086      	sub	sp, #24
 800717a:	af00      	add	r7, sp, #0
 800717c:	6078      	str	r0, [r7, #4]
 800717e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007182:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007186:	2300      	movs	r3, #0
 8007188:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800718e:	2300      	movs	r3, #0
 8007190:	613b      	str	r3, [r7, #16]
 8007192:	e009      	b.n	80071a8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007194:	687a      	ldr	r2, [r7, #4]
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	3340      	adds	r3, #64	; 0x40
 800719a:	009b      	lsls	r3, r3, #2
 800719c:	4413      	add	r3, r2
 800719e:	2200      	movs	r2, #0
 80071a0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	3301      	adds	r3, #1
 80071a6:	613b      	str	r3, [r7, #16]
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	2b0e      	cmp	r3, #14
 80071ac:	d9f2      	bls.n	8007194 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80071ae:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d11c      	bne.n	80071f0 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	68fa      	ldr	r2, [r7, #12]
 80071c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80071c4:	f043 0302 	orr.w	r3, r3, #2
 80071c8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ce:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071da:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071e6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	639a      	str	r2, [r3, #56]	; 0x38
 80071ee:	e00b      	b.n	8007208 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071f4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007200:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800720e:	461a      	mov	r2, r3
 8007210:	2300      	movs	r3, #0
 8007212:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007214:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8007218:	2b01      	cmp	r3, #1
 800721a:	d10d      	bne.n	8007238 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800721c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007220:	2b00      	cmp	r3, #0
 8007222:	d104      	bne.n	800722e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007224:	2100      	movs	r1, #0
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f000 f968 	bl	80074fc <USB_SetDevSpeed>
 800722c:	e008      	b.n	8007240 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800722e:	2101      	movs	r1, #1
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f000 f963 	bl	80074fc <USB_SetDevSpeed>
 8007236:	e003      	b.n	8007240 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007238:	2103      	movs	r1, #3
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f000 f95e 	bl	80074fc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007240:	2110      	movs	r1, #16
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f000 f8fa 	bl	800743c <USB_FlushTxFifo>
 8007248:	4603      	mov	r3, r0
 800724a:	2b00      	cmp	r3, #0
 800724c:	d001      	beq.n	8007252 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800724e:	2301      	movs	r3, #1
 8007250:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f000 f924 	bl	80074a0 <USB_FlushRxFifo>
 8007258:	4603      	mov	r3, r0
 800725a:	2b00      	cmp	r3, #0
 800725c:	d001      	beq.n	8007262 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800725e:	2301      	movs	r3, #1
 8007260:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007268:	461a      	mov	r2, r3
 800726a:	2300      	movs	r3, #0
 800726c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007274:	461a      	mov	r2, r3
 8007276:	2300      	movs	r3, #0
 8007278:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007280:	461a      	mov	r2, r3
 8007282:	2300      	movs	r3, #0
 8007284:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007286:	2300      	movs	r3, #0
 8007288:	613b      	str	r3, [r7, #16]
 800728a:	e043      	b.n	8007314 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800728c:	693b      	ldr	r3, [r7, #16]
 800728e:	015a      	lsls	r2, r3, #5
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	4413      	add	r3, r2
 8007294:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800729e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80072a2:	d118      	bne.n	80072d6 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d10a      	bne.n	80072c0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	015a      	lsls	r2, r3, #5
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	4413      	add	r3, r2
 80072b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072b6:	461a      	mov	r2, r3
 80072b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80072bc:	6013      	str	r3, [r2, #0]
 80072be:	e013      	b.n	80072e8 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	015a      	lsls	r2, r3, #5
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	4413      	add	r3, r2
 80072c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072cc:	461a      	mov	r2, r3
 80072ce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80072d2:	6013      	str	r3, [r2, #0]
 80072d4:	e008      	b.n	80072e8 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	015a      	lsls	r2, r3, #5
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	4413      	add	r3, r2
 80072de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072e2:	461a      	mov	r2, r3
 80072e4:	2300      	movs	r3, #0
 80072e6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	015a      	lsls	r2, r3, #5
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	4413      	add	r3, r2
 80072f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072f4:	461a      	mov	r2, r3
 80072f6:	2300      	movs	r3, #0
 80072f8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	015a      	lsls	r2, r3, #5
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	4413      	add	r3, r2
 8007302:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007306:	461a      	mov	r2, r3
 8007308:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800730c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	3301      	adds	r3, #1
 8007312:	613b      	str	r3, [r7, #16]
 8007314:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007318:	461a      	mov	r2, r3
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	4293      	cmp	r3, r2
 800731e:	d3b5      	bcc.n	800728c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007320:	2300      	movs	r3, #0
 8007322:	613b      	str	r3, [r7, #16]
 8007324:	e043      	b.n	80073ae <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	015a      	lsls	r2, r3, #5
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	4413      	add	r3, r2
 800732e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007338:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800733c:	d118      	bne.n	8007370 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d10a      	bne.n	800735a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	015a      	lsls	r2, r3, #5
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	4413      	add	r3, r2
 800734c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007350:	461a      	mov	r2, r3
 8007352:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007356:	6013      	str	r3, [r2, #0]
 8007358:	e013      	b.n	8007382 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	015a      	lsls	r2, r3, #5
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	4413      	add	r3, r2
 8007362:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007366:	461a      	mov	r2, r3
 8007368:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800736c:	6013      	str	r3, [r2, #0]
 800736e:	e008      	b.n	8007382 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007370:	693b      	ldr	r3, [r7, #16]
 8007372:	015a      	lsls	r2, r3, #5
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	4413      	add	r3, r2
 8007378:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800737c:	461a      	mov	r2, r3
 800737e:	2300      	movs	r3, #0
 8007380:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	015a      	lsls	r2, r3, #5
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	4413      	add	r3, r2
 800738a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800738e:	461a      	mov	r2, r3
 8007390:	2300      	movs	r3, #0
 8007392:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	015a      	lsls	r2, r3, #5
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	4413      	add	r3, r2
 800739c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073a0:	461a      	mov	r2, r3
 80073a2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80073a6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	3301      	adds	r3, #1
 80073ac:	613b      	str	r3, [r7, #16]
 80073ae:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80073b2:	461a      	mov	r2, r3
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d3b5      	bcc.n	8007326 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073c0:	691b      	ldr	r3, [r3, #16]
 80073c2:	68fa      	ldr	r2, [r7, #12]
 80073c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80073c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80073cc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2200      	movs	r2, #0
 80073d2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80073da:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80073dc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d105      	bne.n	80073f0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	699b      	ldr	r3, [r3, #24]
 80073e8:	f043 0210 	orr.w	r2, r3, #16
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	699a      	ldr	r2, [r3, #24]
 80073f4:	4b10      	ldr	r3, [pc, #64]	; (8007438 <USB_DevInit+0x2c4>)
 80073f6:	4313      	orrs	r3, r2
 80073f8:	687a      	ldr	r2, [r7, #4]
 80073fa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80073fc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8007400:	2b00      	cmp	r3, #0
 8007402:	d005      	beq.n	8007410 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	699b      	ldr	r3, [r3, #24]
 8007408:	f043 0208 	orr.w	r2, r3, #8
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007410:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007414:	2b01      	cmp	r3, #1
 8007416:	d107      	bne.n	8007428 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	699b      	ldr	r3, [r3, #24]
 800741c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007420:	f043 0304 	orr.w	r3, r3, #4
 8007424:	687a      	ldr	r2, [r7, #4]
 8007426:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007428:	7dfb      	ldrb	r3, [r7, #23]
}
 800742a:	4618      	mov	r0, r3
 800742c:	3718      	adds	r7, #24
 800742e:	46bd      	mov	sp, r7
 8007430:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007434:	b004      	add	sp, #16
 8007436:	4770      	bx	lr
 8007438:	803c3800 	.word	0x803c3800

0800743c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800743c:	b480      	push	{r7}
 800743e:	b085      	sub	sp, #20
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
 8007444:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007446:	2300      	movs	r3, #0
 8007448:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	3301      	adds	r3, #1
 800744e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007456:	d901      	bls.n	800745c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007458:	2303      	movs	r3, #3
 800745a:	e01b      	b.n	8007494 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	691b      	ldr	r3, [r3, #16]
 8007460:	2b00      	cmp	r3, #0
 8007462:	daf2      	bge.n	800744a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007464:	2300      	movs	r3, #0
 8007466:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	019b      	lsls	r3, r3, #6
 800746c:	f043 0220 	orr.w	r2, r3, #32
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	3301      	adds	r3, #1
 8007478:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007480:	d901      	bls.n	8007486 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007482:	2303      	movs	r3, #3
 8007484:	e006      	b.n	8007494 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	691b      	ldr	r3, [r3, #16]
 800748a:	f003 0320 	and.w	r3, r3, #32
 800748e:	2b20      	cmp	r3, #32
 8007490:	d0f0      	beq.n	8007474 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007492:	2300      	movs	r3, #0
}
 8007494:	4618      	mov	r0, r3
 8007496:	3714      	adds	r7, #20
 8007498:	46bd      	mov	sp, r7
 800749a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749e:	4770      	bx	lr

080074a0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b085      	sub	sp, #20
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80074a8:	2300      	movs	r3, #0
 80074aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	3301      	adds	r3, #1
 80074b0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80074b8:	d901      	bls.n	80074be <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80074ba:	2303      	movs	r3, #3
 80074bc:	e018      	b.n	80074f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	691b      	ldr	r3, [r3, #16]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	daf2      	bge.n	80074ac <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80074c6:	2300      	movs	r3, #0
 80074c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2210      	movs	r2, #16
 80074ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	3301      	adds	r3, #1
 80074d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80074dc:	d901      	bls.n	80074e2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80074de:	2303      	movs	r3, #3
 80074e0:	e006      	b.n	80074f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	691b      	ldr	r3, [r3, #16]
 80074e6:	f003 0310 	and.w	r3, r3, #16
 80074ea:	2b10      	cmp	r3, #16
 80074ec:	d0f0      	beq.n	80074d0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80074ee:	2300      	movs	r3, #0
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3714      	adds	r7, #20
 80074f4:	46bd      	mov	sp, r7
 80074f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fa:	4770      	bx	lr

080074fc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b085      	sub	sp, #20
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
 8007504:	460b      	mov	r3, r1
 8007506:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007512:	681a      	ldr	r2, [r3, #0]
 8007514:	78fb      	ldrb	r3, [r7, #3]
 8007516:	68f9      	ldr	r1, [r7, #12]
 8007518:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800751c:	4313      	orrs	r3, r2
 800751e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007520:	2300      	movs	r3, #0
}
 8007522:	4618      	mov	r0, r3
 8007524:	3714      	adds	r7, #20
 8007526:	46bd      	mov	sp, r7
 8007528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752c:	4770      	bx	lr

0800752e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800752e:	b480      	push	{r7}
 8007530:	b085      	sub	sp, #20
 8007532:	af00      	add	r7, sp, #0
 8007534:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	68fa      	ldr	r2, [r7, #12]
 8007544:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007548:	f023 0303 	bic.w	r3, r3, #3
 800754c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	68fa      	ldr	r2, [r7, #12]
 8007558:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800755c:	f043 0302 	orr.w	r3, r3, #2
 8007560:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007562:	2300      	movs	r3, #0
}
 8007564:	4618      	mov	r0, r3
 8007566:	3714      	adds	r7, #20
 8007568:	46bd      	mov	sp, r7
 800756a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756e:	4770      	bx	lr

08007570 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007570:	b480      	push	{r7}
 8007572:	b083      	sub	sp, #12
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	695b      	ldr	r3, [r3, #20]
 800757c:	f003 0301 	and.w	r3, r3, #1
}
 8007580:	4618      	mov	r0, r3
 8007582:	370c      	adds	r7, #12
 8007584:	46bd      	mov	sp, r7
 8007586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758a:	4770      	bx	lr

0800758c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800758c:	b480      	push	{r7}
 800758e:	b085      	sub	sp, #20
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007594:	2300      	movs	r3, #0
 8007596:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	3301      	adds	r3, #1
 800759c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80075a4:	d901      	bls.n	80075aa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80075a6:	2303      	movs	r3, #3
 80075a8:	e01b      	b.n	80075e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	691b      	ldr	r3, [r3, #16]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	daf2      	bge.n	8007598 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80075b2:	2300      	movs	r3, #0
 80075b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	691b      	ldr	r3, [r3, #16]
 80075ba:	f043 0201 	orr.w	r2, r3, #1
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	3301      	adds	r3, #1
 80075c6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80075ce:	d901      	bls.n	80075d4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80075d0:	2303      	movs	r3, #3
 80075d2:	e006      	b.n	80075e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	691b      	ldr	r3, [r3, #16]
 80075d8:	f003 0301 	and.w	r3, r3, #1
 80075dc:	2b01      	cmp	r3, #1
 80075de:	d0f0      	beq.n	80075c2 <USB_CoreReset+0x36>

  return HAL_OK;
 80075e0:	2300      	movs	r3, #0
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3714      	adds	r7, #20
 80075e6:	46bd      	mov	sp, r7
 80075e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ec:	4770      	bx	lr
	...

080075f0 <std>:
 80075f0:	2300      	movs	r3, #0
 80075f2:	b510      	push	{r4, lr}
 80075f4:	4604      	mov	r4, r0
 80075f6:	e9c0 3300 	strd	r3, r3, [r0]
 80075fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80075fe:	6083      	str	r3, [r0, #8]
 8007600:	8181      	strh	r1, [r0, #12]
 8007602:	6643      	str	r3, [r0, #100]	; 0x64
 8007604:	81c2      	strh	r2, [r0, #14]
 8007606:	6183      	str	r3, [r0, #24]
 8007608:	4619      	mov	r1, r3
 800760a:	2208      	movs	r2, #8
 800760c:	305c      	adds	r0, #92	; 0x5c
 800760e:	f000 f9f7 	bl	8007a00 <memset>
 8007612:	4b0d      	ldr	r3, [pc, #52]	; (8007648 <std+0x58>)
 8007614:	6263      	str	r3, [r4, #36]	; 0x24
 8007616:	4b0d      	ldr	r3, [pc, #52]	; (800764c <std+0x5c>)
 8007618:	62a3      	str	r3, [r4, #40]	; 0x28
 800761a:	4b0d      	ldr	r3, [pc, #52]	; (8007650 <std+0x60>)
 800761c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800761e:	4b0d      	ldr	r3, [pc, #52]	; (8007654 <std+0x64>)
 8007620:	6323      	str	r3, [r4, #48]	; 0x30
 8007622:	4b0d      	ldr	r3, [pc, #52]	; (8007658 <std+0x68>)
 8007624:	6224      	str	r4, [r4, #32]
 8007626:	429c      	cmp	r4, r3
 8007628:	d006      	beq.n	8007638 <std+0x48>
 800762a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800762e:	4294      	cmp	r4, r2
 8007630:	d002      	beq.n	8007638 <std+0x48>
 8007632:	33d0      	adds	r3, #208	; 0xd0
 8007634:	429c      	cmp	r4, r3
 8007636:	d105      	bne.n	8007644 <std+0x54>
 8007638:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800763c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007640:	f000 ba56 	b.w	8007af0 <__retarget_lock_init_recursive>
 8007644:	bd10      	pop	{r4, pc}
 8007646:	bf00      	nop
 8007648:	08007851 	.word	0x08007851
 800764c:	08007873 	.word	0x08007873
 8007650:	080078ab 	.word	0x080078ab
 8007654:	080078cf 	.word	0x080078cf
 8007658:	2001f7dc 	.word	0x2001f7dc

0800765c <stdio_exit_handler>:
 800765c:	4a02      	ldr	r2, [pc, #8]	; (8007668 <stdio_exit_handler+0xc>)
 800765e:	4903      	ldr	r1, [pc, #12]	; (800766c <stdio_exit_handler+0x10>)
 8007660:	4803      	ldr	r0, [pc, #12]	; (8007670 <stdio_exit_handler+0x14>)
 8007662:	f000 b869 	b.w	8007738 <_fwalk_sglue>
 8007666:	bf00      	nop
 8007668:	2000000c 	.word	0x2000000c
 800766c:	080083b9 	.word	0x080083b9
 8007670:	20000018 	.word	0x20000018

08007674 <cleanup_stdio>:
 8007674:	6841      	ldr	r1, [r0, #4]
 8007676:	4b0c      	ldr	r3, [pc, #48]	; (80076a8 <cleanup_stdio+0x34>)
 8007678:	4299      	cmp	r1, r3
 800767a:	b510      	push	{r4, lr}
 800767c:	4604      	mov	r4, r0
 800767e:	d001      	beq.n	8007684 <cleanup_stdio+0x10>
 8007680:	f000 fe9a 	bl	80083b8 <_fflush_r>
 8007684:	68a1      	ldr	r1, [r4, #8]
 8007686:	4b09      	ldr	r3, [pc, #36]	; (80076ac <cleanup_stdio+0x38>)
 8007688:	4299      	cmp	r1, r3
 800768a:	d002      	beq.n	8007692 <cleanup_stdio+0x1e>
 800768c:	4620      	mov	r0, r4
 800768e:	f000 fe93 	bl	80083b8 <_fflush_r>
 8007692:	68e1      	ldr	r1, [r4, #12]
 8007694:	4b06      	ldr	r3, [pc, #24]	; (80076b0 <cleanup_stdio+0x3c>)
 8007696:	4299      	cmp	r1, r3
 8007698:	d004      	beq.n	80076a4 <cleanup_stdio+0x30>
 800769a:	4620      	mov	r0, r4
 800769c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076a0:	f000 be8a 	b.w	80083b8 <_fflush_r>
 80076a4:	bd10      	pop	{r4, pc}
 80076a6:	bf00      	nop
 80076a8:	2001f7dc 	.word	0x2001f7dc
 80076ac:	2001f844 	.word	0x2001f844
 80076b0:	2001f8ac 	.word	0x2001f8ac

080076b4 <global_stdio_init.part.0>:
 80076b4:	b510      	push	{r4, lr}
 80076b6:	4b0b      	ldr	r3, [pc, #44]	; (80076e4 <global_stdio_init.part.0+0x30>)
 80076b8:	4c0b      	ldr	r4, [pc, #44]	; (80076e8 <global_stdio_init.part.0+0x34>)
 80076ba:	4a0c      	ldr	r2, [pc, #48]	; (80076ec <global_stdio_init.part.0+0x38>)
 80076bc:	601a      	str	r2, [r3, #0]
 80076be:	4620      	mov	r0, r4
 80076c0:	2200      	movs	r2, #0
 80076c2:	2104      	movs	r1, #4
 80076c4:	f7ff ff94 	bl	80075f0 <std>
 80076c8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80076cc:	2201      	movs	r2, #1
 80076ce:	2109      	movs	r1, #9
 80076d0:	f7ff ff8e 	bl	80075f0 <std>
 80076d4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80076d8:	2202      	movs	r2, #2
 80076da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076de:	2112      	movs	r1, #18
 80076e0:	f7ff bf86 	b.w	80075f0 <std>
 80076e4:	2001f914 	.word	0x2001f914
 80076e8:	2001f7dc 	.word	0x2001f7dc
 80076ec:	0800765d 	.word	0x0800765d

080076f0 <__sfp_lock_acquire>:
 80076f0:	4801      	ldr	r0, [pc, #4]	; (80076f8 <__sfp_lock_acquire+0x8>)
 80076f2:	f000 b9fe 	b.w	8007af2 <__retarget_lock_acquire_recursive>
 80076f6:	bf00      	nop
 80076f8:	2001f91d 	.word	0x2001f91d

080076fc <__sfp_lock_release>:
 80076fc:	4801      	ldr	r0, [pc, #4]	; (8007704 <__sfp_lock_release+0x8>)
 80076fe:	f000 b9f9 	b.w	8007af4 <__retarget_lock_release_recursive>
 8007702:	bf00      	nop
 8007704:	2001f91d 	.word	0x2001f91d

08007708 <__sinit>:
 8007708:	b510      	push	{r4, lr}
 800770a:	4604      	mov	r4, r0
 800770c:	f7ff fff0 	bl	80076f0 <__sfp_lock_acquire>
 8007710:	6a23      	ldr	r3, [r4, #32]
 8007712:	b11b      	cbz	r3, 800771c <__sinit+0x14>
 8007714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007718:	f7ff bff0 	b.w	80076fc <__sfp_lock_release>
 800771c:	4b04      	ldr	r3, [pc, #16]	; (8007730 <__sinit+0x28>)
 800771e:	6223      	str	r3, [r4, #32]
 8007720:	4b04      	ldr	r3, [pc, #16]	; (8007734 <__sinit+0x2c>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d1f5      	bne.n	8007714 <__sinit+0xc>
 8007728:	f7ff ffc4 	bl	80076b4 <global_stdio_init.part.0>
 800772c:	e7f2      	b.n	8007714 <__sinit+0xc>
 800772e:	bf00      	nop
 8007730:	08007675 	.word	0x08007675
 8007734:	2001f914 	.word	0x2001f914

08007738 <_fwalk_sglue>:
 8007738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800773c:	4607      	mov	r7, r0
 800773e:	4688      	mov	r8, r1
 8007740:	4614      	mov	r4, r2
 8007742:	2600      	movs	r6, #0
 8007744:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007748:	f1b9 0901 	subs.w	r9, r9, #1
 800774c:	d505      	bpl.n	800775a <_fwalk_sglue+0x22>
 800774e:	6824      	ldr	r4, [r4, #0]
 8007750:	2c00      	cmp	r4, #0
 8007752:	d1f7      	bne.n	8007744 <_fwalk_sglue+0xc>
 8007754:	4630      	mov	r0, r6
 8007756:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800775a:	89ab      	ldrh	r3, [r5, #12]
 800775c:	2b01      	cmp	r3, #1
 800775e:	d907      	bls.n	8007770 <_fwalk_sglue+0x38>
 8007760:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007764:	3301      	adds	r3, #1
 8007766:	d003      	beq.n	8007770 <_fwalk_sglue+0x38>
 8007768:	4629      	mov	r1, r5
 800776a:	4638      	mov	r0, r7
 800776c:	47c0      	blx	r8
 800776e:	4306      	orrs	r6, r0
 8007770:	3568      	adds	r5, #104	; 0x68
 8007772:	e7e9      	b.n	8007748 <_fwalk_sglue+0x10>

08007774 <iprintf>:
 8007774:	b40f      	push	{r0, r1, r2, r3}
 8007776:	b507      	push	{r0, r1, r2, lr}
 8007778:	4906      	ldr	r1, [pc, #24]	; (8007794 <iprintf+0x20>)
 800777a:	ab04      	add	r3, sp, #16
 800777c:	6808      	ldr	r0, [r1, #0]
 800777e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007782:	6881      	ldr	r1, [r0, #8]
 8007784:	9301      	str	r3, [sp, #4]
 8007786:	f000 fae7 	bl	8007d58 <_vfiprintf_r>
 800778a:	b003      	add	sp, #12
 800778c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007790:	b004      	add	sp, #16
 8007792:	4770      	bx	lr
 8007794:	20000064 	.word	0x20000064

08007798 <_puts_r>:
 8007798:	6a03      	ldr	r3, [r0, #32]
 800779a:	b570      	push	{r4, r5, r6, lr}
 800779c:	6884      	ldr	r4, [r0, #8]
 800779e:	4605      	mov	r5, r0
 80077a0:	460e      	mov	r6, r1
 80077a2:	b90b      	cbnz	r3, 80077a8 <_puts_r+0x10>
 80077a4:	f7ff ffb0 	bl	8007708 <__sinit>
 80077a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80077aa:	07db      	lsls	r3, r3, #31
 80077ac:	d405      	bmi.n	80077ba <_puts_r+0x22>
 80077ae:	89a3      	ldrh	r3, [r4, #12]
 80077b0:	0598      	lsls	r0, r3, #22
 80077b2:	d402      	bmi.n	80077ba <_puts_r+0x22>
 80077b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80077b6:	f000 f99c 	bl	8007af2 <__retarget_lock_acquire_recursive>
 80077ba:	89a3      	ldrh	r3, [r4, #12]
 80077bc:	0719      	lsls	r1, r3, #28
 80077be:	d513      	bpl.n	80077e8 <_puts_r+0x50>
 80077c0:	6923      	ldr	r3, [r4, #16]
 80077c2:	b18b      	cbz	r3, 80077e8 <_puts_r+0x50>
 80077c4:	3e01      	subs	r6, #1
 80077c6:	68a3      	ldr	r3, [r4, #8]
 80077c8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80077cc:	3b01      	subs	r3, #1
 80077ce:	60a3      	str	r3, [r4, #8]
 80077d0:	b9e9      	cbnz	r1, 800780e <_puts_r+0x76>
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	da2e      	bge.n	8007834 <_puts_r+0x9c>
 80077d6:	4622      	mov	r2, r4
 80077d8:	210a      	movs	r1, #10
 80077da:	4628      	mov	r0, r5
 80077dc:	f000 f87b 	bl	80078d6 <__swbuf_r>
 80077e0:	3001      	adds	r0, #1
 80077e2:	d007      	beq.n	80077f4 <_puts_r+0x5c>
 80077e4:	250a      	movs	r5, #10
 80077e6:	e007      	b.n	80077f8 <_puts_r+0x60>
 80077e8:	4621      	mov	r1, r4
 80077ea:	4628      	mov	r0, r5
 80077ec:	f000 f8b0 	bl	8007950 <__swsetup_r>
 80077f0:	2800      	cmp	r0, #0
 80077f2:	d0e7      	beq.n	80077c4 <_puts_r+0x2c>
 80077f4:	f04f 35ff 	mov.w	r5, #4294967295
 80077f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80077fa:	07da      	lsls	r2, r3, #31
 80077fc:	d405      	bmi.n	800780a <_puts_r+0x72>
 80077fe:	89a3      	ldrh	r3, [r4, #12]
 8007800:	059b      	lsls	r3, r3, #22
 8007802:	d402      	bmi.n	800780a <_puts_r+0x72>
 8007804:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007806:	f000 f975 	bl	8007af4 <__retarget_lock_release_recursive>
 800780a:	4628      	mov	r0, r5
 800780c:	bd70      	pop	{r4, r5, r6, pc}
 800780e:	2b00      	cmp	r3, #0
 8007810:	da04      	bge.n	800781c <_puts_r+0x84>
 8007812:	69a2      	ldr	r2, [r4, #24]
 8007814:	429a      	cmp	r2, r3
 8007816:	dc06      	bgt.n	8007826 <_puts_r+0x8e>
 8007818:	290a      	cmp	r1, #10
 800781a:	d004      	beq.n	8007826 <_puts_r+0x8e>
 800781c:	6823      	ldr	r3, [r4, #0]
 800781e:	1c5a      	adds	r2, r3, #1
 8007820:	6022      	str	r2, [r4, #0]
 8007822:	7019      	strb	r1, [r3, #0]
 8007824:	e7cf      	b.n	80077c6 <_puts_r+0x2e>
 8007826:	4622      	mov	r2, r4
 8007828:	4628      	mov	r0, r5
 800782a:	f000 f854 	bl	80078d6 <__swbuf_r>
 800782e:	3001      	adds	r0, #1
 8007830:	d1c9      	bne.n	80077c6 <_puts_r+0x2e>
 8007832:	e7df      	b.n	80077f4 <_puts_r+0x5c>
 8007834:	6823      	ldr	r3, [r4, #0]
 8007836:	250a      	movs	r5, #10
 8007838:	1c5a      	adds	r2, r3, #1
 800783a:	6022      	str	r2, [r4, #0]
 800783c:	701d      	strb	r5, [r3, #0]
 800783e:	e7db      	b.n	80077f8 <_puts_r+0x60>

08007840 <puts>:
 8007840:	4b02      	ldr	r3, [pc, #8]	; (800784c <puts+0xc>)
 8007842:	4601      	mov	r1, r0
 8007844:	6818      	ldr	r0, [r3, #0]
 8007846:	f7ff bfa7 	b.w	8007798 <_puts_r>
 800784a:	bf00      	nop
 800784c:	20000064 	.word	0x20000064

08007850 <__sread>:
 8007850:	b510      	push	{r4, lr}
 8007852:	460c      	mov	r4, r1
 8007854:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007858:	f000 f8fc 	bl	8007a54 <_read_r>
 800785c:	2800      	cmp	r0, #0
 800785e:	bfab      	itete	ge
 8007860:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007862:	89a3      	ldrhlt	r3, [r4, #12]
 8007864:	181b      	addge	r3, r3, r0
 8007866:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800786a:	bfac      	ite	ge
 800786c:	6563      	strge	r3, [r4, #84]	; 0x54
 800786e:	81a3      	strhlt	r3, [r4, #12]
 8007870:	bd10      	pop	{r4, pc}

08007872 <__swrite>:
 8007872:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007876:	461f      	mov	r7, r3
 8007878:	898b      	ldrh	r3, [r1, #12]
 800787a:	05db      	lsls	r3, r3, #23
 800787c:	4605      	mov	r5, r0
 800787e:	460c      	mov	r4, r1
 8007880:	4616      	mov	r6, r2
 8007882:	d505      	bpl.n	8007890 <__swrite+0x1e>
 8007884:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007888:	2302      	movs	r3, #2
 800788a:	2200      	movs	r2, #0
 800788c:	f000 f8d0 	bl	8007a30 <_lseek_r>
 8007890:	89a3      	ldrh	r3, [r4, #12]
 8007892:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007896:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800789a:	81a3      	strh	r3, [r4, #12]
 800789c:	4632      	mov	r2, r6
 800789e:	463b      	mov	r3, r7
 80078a0:	4628      	mov	r0, r5
 80078a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078a6:	f000 b8e7 	b.w	8007a78 <_write_r>

080078aa <__sseek>:
 80078aa:	b510      	push	{r4, lr}
 80078ac:	460c      	mov	r4, r1
 80078ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078b2:	f000 f8bd 	bl	8007a30 <_lseek_r>
 80078b6:	1c43      	adds	r3, r0, #1
 80078b8:	89a3      	ldrh	r3, [r4, #12]
 80078ba:	bf15      	itete	ne
 80078bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80078be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80078c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80078c6:	81a3      	strheq	r3, [r4, #12]
 80078c8:	bf18      	it	ne
 80078ca:	81a3      	strhne	r3, [r4, #12]
 80078cc:	bd10      	pop	{r4, pc}

080078ce <__sclose>:
 80078ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078d2:	f000 b89d 	b.w	8007a10 <_close_r>

080078d6 <__swbuf_r>:
 80078d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078d8:	460e      	mov	r6, r1
 80078da:	4614      	mov	r4, r2
 80078dc:	4605      	mov	r5, r0
 80078de:	b118      	cbz	r0, 80078e8 <__swbuf_r+0x12>
 80078e0:	6a03      	ldr	r3, [r0, #32]
 80078e2:	b90b      	cbnz	r3, 80078e8 <__swbuf_r+0x12>
 80078e4:	f7ff ff10 	bl	8007708 <__sinit>
 80078e8:	69a3      	ldr	r3, [r4, #24]
 80078ea:	60a3      	str	r3, [r4, #8]
 80078ec:	89a3      	ldrh	r3, [r4, #12]
 80078ee:	071a      	lsls	r2, r3, #28
 80078f0:	d525      	bpl.n	800793e <__swbuf_r+0x68>
 80078f2:	6923      	ldr	r3, [r4, #16]
 80078f4:	b31b      	cbz	r3, 800793e <__swbuf_r+0x68>
 80078f6:	6823      	ldr	r3, [r4, #0]
 80078f8:	6922      	ldr	r2, [r4, #16]
 80078fa:	1a98      	subs	r0, r3, r2
 80078fc:	6963      	ldr	r3, [r4, #20]
 80078fe:	b2f6      	uxtb	r6, r6
 8007900:	4283      	cmp	r3, r0
 8007902:	4637      	mov	r7, r6
 8007904:	dc04      	bgt.n	8007910 <__swbuf_r+0x3a>
 8007906:	4621      	mov	r1, r4
 8007908:	4628      	mov	r0, r5
 800790a:	f000 fd55 	bl	80083b8 <_fflush_r>
 800790e:	b9e0      	cbnz	r0, 800794a <__swbuf_r+0x74>
 8007910:	68a3      	ldr	r3, [r4, #8]
 8007912:	3b01      	subs	r3, #1
 8007914:	60a3      	str	r3, [r4, #8]
 8007916:	6823      	ldr	r3, [r4, #0]
 8007918:	1c5a      	adds	r2, r3, #1
 800791a:	6022      	str	r2, [r4, #0]
 800791c:	701e      	strb	r6, [r3, #0]
 800791e:	6962      	ldr	r2, [r4, #20]
 8007920:	1c43      	adds	r3, r0, #1
 8007922:	429a      	cmp	r2, r3
 8007924:	d004      	beq.n	8007930 <__swbuf_r+0x5a>
 8007926:	89a3      	ldrh	r3, [r4, #12]
 8007928:	07db      	lsls	r3, r3, #31
 800792a:	d506      	bpl.n	800793a <__swbuf_r+0x64>
 800792c:	2e0a      	cmp	r6, #10
 800792e:	d104      	bne.n	800793a <__swbuf_r+0x64>
 8007930:	4621      	mov	r1, r4
 8007932:	4628      	mov	r0, r5
 8007934:	f000 fd40 	bl	80083b8 <_fflush_r>
 8007938:	b938      	cbnz	r0, 800794a <__swbuf_r+0x74>
 800793a:	4638      	mov	r0, r7
 800793c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800793e:	4621      	mov	r1, r4
 8007940:	4628      	mov	r0, r5
 8007942:	f000 f805 	bl	8007950 <__swsetup_r>
 8007946:	2800      	cmp	r0, #0
 8007948:	d0d5      	beq.n	80078f6 <__swbuf_r+0x20>
 800794a:	f04f 37ff 	mov.w	r7, #4294967295
 800794e:	e7f4      	b.n	800793a <__swbuf_r+0x64>

08007950 <__swsetup_r>:
 8007950:	b538      	push	{r3, r4, r5, lr}
 8007952:	4b2a      	ldr	r3, [pc, #168]	; (80079fc <__swsetup_r+0xac>)
 8007954:	4605      	mov	r5, r0
 8007956:	6818      	ldr	r0, [r3, #0]
 8007958:	460c      	mov	r4, r1
 800795a:	b118      	cbz	r0, 8007964 <__swsetup_r+0x14>
 800795c:	6a03      	ldr	r3, [r0, #32]
 800795e:	b90b      	cbnz	r3, 8007964 <__swsetup_r+0x14>
 8007960:	f7ff fed2 	bl	8007708 <__sinit>
 8007964:	89a3      	ldrh	r3, [r4, #12]
 8007966:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800796a:	0718      	lsls	r0, r3, #28
 800796c:	d422      	bmi.n	80079b4 <__swsetup_r+0x64>
 800796e:	06d9      	lsls	r1, r3, #27
 8007970:	d407      	bmi.n	8007982 <__swsetup_r+0x32>
 8007972:	2309      	movs	r3, #9
 8007974:	602b      	str	r3, [r5, #0]
 8007976:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800797a:	81a3      	strh	r3, [r4, #12]
 800797c:	f04f 30ff 	mov.w	r0, #4294967295
 8007980:	e034      	b.n	80079ec <__swsetup_r+0x9c>
 8007982:	0758      	lsls	r0, r3, #29
 8007984:	d512      	bpl.n	80079ac <__swsetup_r+0x5c>
 8007986:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007988:	b141      	cbz	r1, 800799c <__swsetup_r+0x4c>
 800798a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800798e:	4299      	cmp	r1, r3
 8007990:	d002      	beq.n	8007998 <__swsetup_r+0x48>
 8007992:	4628      	mov	r0, r5
 8007994:	f000 f8be 	bl	8007b14 <_free_r>
 8007998:	2300      	movs	r3, #0
 800799a:	6363      	str	r3, [r4, #52]	; 0x34
 800799c:	89a3      	ldrh	r3, [r4, #12]
 800799e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80079a2:	81a3      	strh	r3, [r4, #12]
 80079a4:	2300      	movs	r3, #0
 80079a6:	6063      	str	r3, [r4, #4]
 80079a8:	6923      	ldr	r3, [r4, #16]
 80079aa:	6023      	str	r3, [r4, #0]
 80079ac:	89a3      	ldrh	r3, [r4, #12]
 80079ae:	f043 0308 	orr.w	r3, r3, #8
 80079b2:	81a3      	strh	r3, [r4, #12]
 80079b4:	6923      	ldr	r3, [r4, #16]
 80079b6:	b94b      	cbnz	r3, 80079cc <__swsetup_r+0x7c>
 80079b8:	89a3      	ldrh	r3, [r4, #12]
 80079ba:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80079be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079c2:	d003      	beq.n	80079cc <__swsetup_r+0x7c>
 80079c4:	4621      	mov	r1, r4
 80079c6:	4628      	mov	r0, r5
 80079c8:	f000 fd44 	bl	8008454 <__smakebuf_r>
 80079cc:	89a0      	ldrh	r0, [r4, #12]
 80079ce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80079d2:	f010 0301 	ands.w	r3, r0, #1
 80079d6:	d00a      	beq.n	80079ee <__swsetup_r+0x9e>
 80079d8:	2300      	movs	r3, #0
 80079da:	60a3      	str	r3, [r4, #8]
 80079dc:	6963      	ldr	r3, [r4, #20]
 80079de:	425b      	negs	r3, r3
 80079e0:	61a3      	str	r3, [r4, #24]
 80079e2:	6923      	ldr	r3, [r4, #16]
 80079e4:	b943      	cbnz	r3, 80079f8 <__swsetup_r+0xa8>
 80079e6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80079ea:	d1c4      	bne.n	8007976 <__swsetup_r+0x26>
 80079ec:	bd38      	pop	{r3, r4, r5, pc}
 80079ee:	0781      	lsls	r1, r0, #30
 80079f0:	bf58      	it	pl
 80079f2:	6963      	ldrpl	r3, [r4, #20]
 80079f4:	60a3      	str	r3, [r4, #8]
 80079f6:	e7f4      	b.n	80079e2 <__swsetup_r+0x92>
 80079f8:	2000      	movs	r0, #0
 80079fa:	e7f7      	b.n	80079ec <__swsetup_r+0x9c>
 80079fc:	20000064 	.word	0x20000064

08007a00 <memset>:
 8007a00:	4402      	add	r2, r0
 8007a02:	4603      	mov	r3, r0
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d100      	bne.n	8007a0a <memset+0xa>
 8007a08:	4770      	bx	lr
 8007a0a:	f803 1b01 	strb.w	r1, [r3], #1
 8007a0e:	e7f9      	b.n	8007a04 <memset+0x4>

08007a10 <_close_r>:
 8007a10:	b538      	push	{r3, r4, r5, lr}
 8007a12:	4d06      	ldr	r5, [pc, #24]	; (8007a2c <_close_r+0x1c>)
 8007a14:	2300      	movs	r3, #0
 8007a16:	4604      	mov	r4, r0
 8007a18:	4608      	mov	r0, r1
 8007a1a:	602b      	str	r3, [r5, #0]
 8007a1c:	f7fa fa7b 	bl	8001f16 <_close>
 8007a20:	1c43      	adds	r3, r0, #1
 8007a22:	d102      	bne.n	8007a2a <_close_r+0x1a>
 8007a24:	682b      	ldr	r3, [r5, #0]
 8007a26:	b103      	cbz	r3, 8007a2a <_close_r+0x1a>
 8007a28:	6023      	str	r3, [r4, #0]
 8007a2a:	bd38      	pop	{r3, r4, r5, pc}
 8007a2c:	2001f918 	.word	0x2001f918

08007a30 <_lseek_r>:
 8007a30:	b538      	push	{r3, r4, r5, lr}
 8007a32:	4d07      	ldr	r5, [pc, #28]	; (8007a50 <_lseek_r+0x20>)
 8007a34:	4604      	mov	r4, r0
 8007a36:	4608      	mov	r0, r1
 8007a38:	4611      	mov	r1, r2
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	602a      	str	r2, [r5, #0]
 8007a3e:	461a      	mov	r2, r3
 8007a40:	f7fa fa90 	bl	8001f64 <_lseek>
 8007a44:	1c43      	adds	r3, r0, #1
 8007a46:	d102      	bne.n	8007a4e <_lseek_r+0x1e>
 8007a48:	682b      	ldr	r3, [r5, #0]
 8007a4a:	b103      	cbz	r3, 8007a4e <_lseek_r+0x1e>
 8007a4c:	6023      	str	r3, [r4, #0]
 8007a4e:	bd38      	pop	{r3, r4, r5, pc}
 8007a50:	2001f918 	.word	0x2001f918

08007a54 <_read_r>:
 8007a54:	b538      	push	{r3, r4, r5, lr}
 8007a56:	4d07      	ldr	r5, [pc, #28]	; (8007a74 <_read_r+0x20>)
 8007a58:	4604      	mov	r4, r0
 8007a5a:	4608      	mov	r0, r1
 8007a5c:	4611      	mov	r1, r2
 8007a5e:	2200      	movs	r2, #0
 8007a60:	602a      	str	r2, [r5, #0]
 8007a62:	461a      	mov	r2, r3
 8007a64:	f7fa fa3a 	bl	8001edc <_read>
 8007a68:	1c43      	adds	r3, r0, #1
 8007a6a:	d102      	bne.n	8007a72 <_read_r+0x1e>
 8007a6c:	682b      	ldr	r3, [r5, #0]
 8007a6e:	b103      	cbz	r3, 8007a72 <_read_r+0x1e>
 8007a70:	6023      	str	r3, [r4, #0]
 8007a72:	bd38      	pop	{r3, r4, r5, pc}
 8007a74:	2001f918 	.word	0x2001f918

08007a78 <_write_r>:
 8007a78:	b538      	push	{r3, r4, r5, lr}
 8007a7a:	4d07      	ldr	r5, [pc, #28]	; (8007a98 <_write_r+0x20>)
 8007a7c:	4604      	mov	r4, r0
 8007a7e:	4608      	mov	r0, r1
 8007a80:	4611      	mov	r1, r2
 8007a82:	2200      	movs	r2, #0
 8007a84:	602a      	str	r2, [r5, #0]
 8007a86:	461a      	mov	r2, r3
 8007a88:	f7f8 fd80 	bl	800058c <_write>
 8007a8c:	1c43      	adds	r3, r0, #1
 8007a8e:	d102      	bne.n	8007a96 <_write_r+0x1e>
 8007a90:	682b      	ldr	r3, [r5, #0]
 8007a92:	b103      	cbz	r3, 8007a96 <_write_r+0x1e>
 8007a94:	6023      	str	r3, [r4, #0]
 8007a96:	bd38      	pop	{r3, r4, r5, pc}
 8007a98:	2001f918 	.word	0x2001f918

08007a9c <__errno>:
 8007a9c:	4b01      	ldr	r3, [pc, #4]	; (8007aa4 <__errno+0x8>)
 8007a9e:	6818      	ldr	r0, [r3, #0]
 8007aa0:	4770      	bx	lr
 8007aa2:	bf00      	nop
 8007aa4:	20000064 	.word	0x20000064

08007aa8 <__libc_init_array>:
 8007aa8:	b570      	push	{r4, r5, r6, lr}
 8007aaa:	4d0d      	ldr	r5, [pc, #52]	; (8007ae0 <__libc_init_array+0x38>)
 8007aac:	4c0d      	ldr	r4, [pc, #52]	; (8007ae4 <__libc_init_array+0x3c>)
 8007aae:	1b64      	subs	r4, r4, r5
 8007ab0:	10a4      	asrs	r4, r4, #2
 8007ab2:	2600      	movs	r6, #0
 8007ab4:	42a6      	cmp	r6, r4
 8007ab6:	d109      	bne.n	8007acc <__libc_init_array+0x24>
 8007ab8:	4d0b      	ldr	r5, [pc, #44]	; (8007ae8 <__libc_init_array+0x40>)
 8007aba:	4c0c      	ldr	r4, [pc, #48]	; (8007aec <__libc_init_array+0x44>)
 8007abc:	f000 fd38 	bl	8008530 <_init>
 8007ac0:	1b64      	subs	r4, r4, r5
 8007ac2:	10a4      	asrs	r4, r4, #2
 8007ac4:	2600      	movs	r6, #0
 8007ac6:	42a6      	cmp	r6, r4
 8007ac8:	d105      	bne.n	8007ad6 <__libc_init_array+0x2e>
 8007aca:	bd70      	pop	{r4, r5, r6, pc}
 8007acc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ad0:	4798      	blx	r3
 8007ad2:	3601      	adds	r6, #1
 8007ad4:	e7ee      	b.n	8007ab4 <__libc_init_array+0xc>
 8007ad6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ada:	4798      	blx	r3
 8007adc:	3601      	adds	r6, #1
 8007ade:	e7f2      	b.n	8007ac6 <__libc_init_array+0x1e>
 8007ae0:	08008b30 	.word	0x08008b30
 8007ae4:	08008b30 	.word	0x08008b30
 8007ae8:	08008b30 	.word	0x08008b30
 8007aec:	08008b34 	.word	0x08008b34

08007af0 <__retarget_lock_init_recursive>:
 8007af0:	4770      	bx	lr

08007af2 <__retarget_lock_acquire_recursive>:
 8007af2:	4770      	bx	lr

08007af4 <__retarget_lock_release_recursive>:
 8007af4:	4770      	bx	lr

08007af6 <memcpy>:
 8007af6:	440a      	add	r2, r1
 8007af8:	4291      	cmp	r1, r2
 8007afa:	f100 33ff 	add.w	r3, r0, #4294967295
 8007afe:	d100      	bne.n	8007b02 <memcpy+0xc>
 8007b00:	4770      	bx	lr
 8007b02:	b510      	push	{r4, lr}
 8007b04:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b08:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b0c:	4291      	cmp	r1, r2
 8007b0e:	d1f9      	bne.n	8007b04 <memcpy+0xe>
 8007b10:	bd10      	pop	{r4, pc}
	...

08007b14 <_free_r>:
 8007b14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007b16:	2900      	cmp	r1, #0
 8007b18:	d044      	beq.n	8007ba4 <_free_r+0x90>
 8007b1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b1e:	9001      	str	r0, [sp, #4]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	f1a1 0404 	sub.w	r4, r1, #4
 8007b26:	bfb8      	it	lt
 8007b28:	18e4      	addlt	r4, r4, r3
 8007b2a:	f000 f8df 	bl	8007cec <__malloc_lock>
 8007b2e:	4a1e      	ldr	r2, [pc, #120]	; (8007ba8 <_free_r+0x94>)
 8007b30:	9801      	ldr	r0, [sp, #4]
 8007b32:	6813      	ldr	r3, [r2, #0]
 8007b34:	b933      	cbnz	r3, 8007b44 <_free_r+0x30>
 8007b36:	6063      	str	r3, [r4, #4]
 8007b38:	6014      	str	r4, [r2, #0]
 8007b3a:	b003      	add	sp, #12
 8007b3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007b40:	f000 b8da 	b.w	8007cf8 <__malloc_unlock>
 8007b44:	42a3      	cmp	r3, r4
 8007b46:	d908      	bls.n	8007b5a <_free_r+0x46>
 8007b48:	6825      	ldr	r5, [r4, #0]
 8007b4a:	1961      	adds	r1, r4, r5
 8007b4c:	428b      	cmp	r3, r1
 8007b4e:	bf01      	itttt	eq
 8007b50:	6819      	ldreq	r1, [r3, #0]
 8007b52:	685b      	ldreq	r3, [r3, #4]
 8007b54:	1949      	addeq	r1, r1, r5
 8007b56:	6021      	streq	r1, [r4, #0]
 8007b58:	e7ed      	b.n	8007b36 <_free_r+0x22>
 8007b5a:	461a      	mov	r2, r3
 8007b5c:	685b      	ldr	r3, [r3, #4]
 8007b5e:	b10b      	cbz	r3, 8007b64 <_free_r+0x50>
 8007b60:	42a3      	cmp	r3, r4
 8007b62:	d9fa      	bls.n	8007b5a <_free_r+0x46>
 8007b64:	6811      	ldr	r1, [r2, #0]
 8007b66:	1855      	adds	r5, r2, r1
 8007b68:	42a5      	cmp	r5, r4
 8007b6a:	d10b      	bne.n	8007b84 <_free_r+0x70>
 8007b6c:	6824      	ldr	r4, [r4, #0]
 8007b6e:	4421      	add	r1, r4
 8007b70:	1854      	adds	r4, r2, r1
 8007b72:	42a3      	cmp	r3, r4
 8007b74:	6011      	str	r1, [r2, #0]
 8007b76:	d1e0      	bne.n	8007b3a <_free_r+0x26>
 8007b78:	681c      	ldr	r4, [r3, #0]
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	6053      	str	r3, [r2, #4]
 8007b7e:	440c      	add	r4, r1
 8007b80:	6014      	str	r4, [r2, #0]
 8007b82:	e7da      	b.n	8007b3a <_free_r+0x26>
 8007b84:	d902      	bls.n	8007b8c <_free_r+0x78>
 8007b86:	230c      	movs	r3, #12
 8007b88:	6003      	str	r3, [r0, #0]
 8007b8a:	e7d6      	b.n	8007b3a <_free_r+0x26>
 8007b8c:	6825      	ldr	r5, [r4, #0]
 8007b8e:	1961      	adds	r1, r4, r5
 8007b90:	428b      	cmp	r3, r1
 8007b92:	bf04      	itt	eq
 8007b94:	6819      	ldreq	r1, [r3, #0]
 8007b96:	685b      	ldreq	r3, [r3, #4]
 8007b98:	6063      	str	r3, [r4, #4]
 8007b9a:	bf04      	itt	eq
 8007b9c:	1949      	addeq	r1, r1, r5
 8007b9e:	6021      	streq	r1, [r4, #0]
 8007ba0:	6054      	str	r4, [r2, #4]
 8007ba2:	e7ca      	b.n	8007b3a <_free_r+0x26>
 8007ba4:	b003      	add	sp, #12
 8007ba6:	bd30      	pop	{r4, r5, pc}
 8007ba8:	2001f920 	.word	0x2001f920

08007bac <sbrk_aligned>:
 8007bac:	b570      	push	{r4, r5, r6, lr}
 8007bae:	4e0e      	ldr	r6, [pc, #56]	; (8007be8 <sbrk_aligned+0x3c>)
 8007bb0:	460c      	mov	r4, r1
 8007bb2:	6831      	ldr	r1, [r6, #0]
 8007bb4:	4605      	mov	r5, r0
 8007bb6:	b911      	cbnz	r1, 8007bbe <sbrk_aligned+0x12>
 8007bb8:	f000 fcaa 	bl	8008510 <_sbrk_r>
 8007bbc:	6030      	str	r0, [r6, #0]
 8007bbe:	4621      	mov	r1, r4
 8007bc0:	4628      	mov	r0, r5
 8007bc2:	f000 fca5 	bl	8008510 <_sbrk_r>
 8007bc6:	1c43      	adds	r3, r0, #1
 8007bc8:	d00a      	beq.n	8007be0 <sbrk_aligned+0x34>
 8007bca:	1cc4      	adds	r4, r0, #3
 8007bcc:	f024 0403 	bic.w	r4, r4, #3
 8007bd0:	42a0      	cmp	r0, r4
 8007bd2:	d007      	beq.n	8007be4 <sbrk_aligned+0x38>
 8007bd4:	1a21      	subs	r1, r4, r0
 8007bd6:	4628      	mov	r0, r5
 8007bd8:	f000 fc9a 	bl	8008510 <_sbrk_r>
 8007bdc:	3001      	adds	r0, #1
 8007bde:	d101      	bne.n	8007be4 <sbrk_aligned+0x38>
 8007be0:	f04f 34ff 	mov.w	r4, #4294967295
 8007be4:	4620      	mov	r0, r4
 8007be6:	bd70      	pop	{r4, r5, r6, pc}
 8007be8:	2001f924 	.word	0x2001f924

08007bec <_malloc_r>:
 8007bec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bf0:	1ccd      	adds	r5, r1, #3
 8007bf2:	f025 0503 	bic.w	r5, r5, #3
 8007bf6:	3508      	adds	r5, #8
 8007bf8:	2d0c      	cmp	r5, #12
 8007bfa:	bf38      	it	cc
 8007bfc:	250c      	movcc	r5, #12
 8007bfe:	2d00      	cmp	r5, #0
 8007c00:	4607      	mov	r7, r0
 8007c02:	db01      	blt.n	8007c08 <_malloc_r+0x1c>
 8007c04:	42a9      	cmp	r1, r5
 8007c06:	d905      	bls.n	8007c14 <_malloc_r+0x28>
 8007c08:	230c      	movs	r3, #12
 8007c0a:	603b      	str	r3, [r7, #0]
 8007c0c:	2600      	movs	r6, #0
 8007c0e:	4630      	mov	r0, r6
 8007c10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c14:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007ce8 <_malloc_r+0xfc>
 8007c18:	f000 f868 	bl	8007cec <__malloc_lock>
 8007c1c:	f8d8 3000 	ldr.w	r3, [r8]
 8007c20:	461c      	mov	r4, r3
 8007c22:	bb5c      	cbnz	r4, 8007c7c <_malloc_r+0x90>
 8007c24:	4629      	mov	r1, r5
 8007c26:	4638      	mov	r0, r7
 8007c28:	f7ff ffc0 	bl	8007bac <sbrk_aligned>
 8007c2c:	1c43      	adds	r3, r0, #1
 8007c2e:	4604      	mov	r4, r0
 8007c30:	d155      	bne.n	8007cde <_malloc_r+0xf2>
 8007c32:	f8d8 4000 	ldr.w	r4, [r8]
 8007c36:	4626      	mov	r6, r4
 8007c38:	2e00      	cmp	r6, #0
 8007c3a:	d145      	bne.n	8007cc8 <_malloc_r+0xdc>
 8007c3c:	2c00      	cmp	r4, #0
 8007c3e:	d048      	beq.n	8007cd2 <_malloc_r+0xe6>
 8007c40:	6823      	ldr	r3, [r4, #0]
 8007c42:	4631      	mov	r1, r6
 8007c44:	4638      	mov	r0, r7
 8007c46:	eb04 0903 	add.w	r9, r4, r3
 8007c4a:	f000 fc61 	bl	8008510 <_sbrk_r>
 8007c4e:	4581      	cmp	r9, r0
 8007c50:	d13f      	bne.n	8007cd2 <_malloc_r+0xe6>
 8007c52:	6821      	ldr	r1, [r4, #0]
 8007c54:	1a6d      	subs	r5, r5, r1
 8007c56:	4629      	mov	r1, r5
 8007c58:	4638      	mov	r0, r7
 8007c5a:	f7ff ffa7 	bl	8007bac <sbrk_aligned>
 8007c5e:	3001      	adds	r0, #1
 8007c60:	d037      	beq.n	8007cd2 <_malloc_r+0xe6>
 8007c62:	6823      	ldr	r3, [r4, #0]
 8007c64:	442b      	add	r3, r5
 8007c66:	6023      	str	r3, [r4, #0]
 8007c68:	f8d8 3000 	ldr.w	r3, [r8]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d038      	beq.n	8007ce2 <_malloc_r+0xf6>
 8007c70:	685a      	ldr	r2, [r3, #4]
 8007c72:	42a2      	cmp	r2, r4
 8007c74:	d12b      	bne.n	8007cce <_malloc_r+0xe2>
 8007c76:	2200      	movs	r2, #0
 8007c78:	605a      	str	r2, [r3, #4]
 8007c7a:	e00f      	b.n	8007c9c <_malloc_r+0xb0>
 8007c7c:	6822      	ldr	r2, [r4, #0]
 8007c7e:	1b52      	subs	r2, r2, r5
 8007c80:	d41f      	bmi.n	8007cc2 <_malloc_r+0xd6>
 8007c82:	2a0b      	cmp	r2, #11
 8007c84:	d917      	bls.n	8007cb6 <_malloc_r+0xca>
 8007c86:	1961      	adds	r1, r4, r5
 8007c88:	42a3      	cmp	r3, r4
 8007c8a:	6025      	str	r5, [r4, #0]
 8007c8c:	bf18      	it	ne
 8007c8e:	6059      	strne	r1, [r3, #4]
 8007c90:	6863      	ldr	r3, [r4, #4]
 8007c92:	bf08      	it	eq
 8007c94:	f8c8 1000 	streq.w	r1, [r8]
 8007c98:	5162      	str	r2, [r4, r5]
 8007c9a:	604b      	str	r3, [r1, #4]
 8007c9c:	4638      	mov	r0, r7
 8007c9e:	f104 060b 	add.w	r6, r4, #11
 8007ca2:	f000 f829 	bl	8007cf8 <__malloc_unlock>
 8007ca6:	f026 0607 	bic.w	r6, r6, #7
 8007caa:	1d23      	adds	r3, r4, #4
 8007cac:	1af2      	subs	r2, r6, r3
 8007cae:	d0ae      	beq.n	8007c0e <_malloc_r+0x22>
 8007cb0:	1b9b      	subs	r3, r3, r6
 8007cb2:	50a3      	str	r3, [r4, r2]
 8007cb4:	e7ab      	b.n	8007c0e <_malloc_r+0x22>
 8007cb6:	42a3      	cmp	r3, r4
 8007cb8:	6862      	ldr	r2, [r4, #4]
 8007cba:	d1dd      	bne.n	8007c78 <_malloc_r+0x8c>
 8007cbc:	f8c8 2000 	str.w	r2, [r8]
 8007cc0:	e7ec      	b.n	8007c9c <_malloc_r+0xb0>
 8007cc2:	4623      	mov	r3, r4
 8007cc4:	6864      	ldr	r4, [r4, #4]
 8007cc6:	e7ac      	b.n	8007c22 <_malloc_r+0x36>
 8007cc8:	4634      	mov	r4, r6
 8007cca:	6876      	ldr	r6, [r6, #4]
 8007ccc:	e7b4      	b.n	8007c38 <_malloc_r+0x4c>
 8007cce:	4613      	mov	r3, r2
 8007cd0:	e7cc      	b.n	8007c6c <_malloc_r+0x80>
 8007cd2:	230c      	movs	r3, #12
 8007cd4:	603b      	str	r3, [r7, #0]
 8007cd6:	4638      	mov	r0, r7
 8007cd8:	f000 f80e 	bl	8007cf8 <__malloc_unlock>
 8007cdc:	e797      	b.n	8007c0e <_malloc_r+0x22>
 8007cde:	6025      	str	r5, [r4, #0]
 8007ce0:	e7dc      	b.n	8007c9c <_malloc_r+0xb0>
 8007ce2:	605b      	str	r3, [r3, #4]
 8007ce4:	deff      	udf	#255	; 0xff
 8007ce6:	bf00      	nop
 8007ce8:	2001f920 	.word	0x2001f920

08007cec <__malloc_lock>:
 8007cec:	4801      	ldr	r0, [pc, #4]	; (8007cf4 <__malloc_lock+0x8>)
 8007cee:	f7ff bf00 	b.w	8007af2 <__retarget_lock_acquire_recursive>
 8007cf2:	bf00      	nop
 8007cf4:	2001f91c 	.word	0x2001f91c

08007cf8 <__malloc_unlock>:
 8007cf8:	4801      	ldr	r0, [pc, #4]	; (8007d00 <__malloc_unlock+0x8>)
 8007cfa:	f7ff befb 	b.w	8007af4 <__retarget_lock_release_recursive>
 8007cfe:	bf00      	nop
 8007d00:	2001f91c 	.word	0x2001f91c

08007d04 <__sfputc_r>:
 8007d04:	6893      	ldr	r3, [r2, #8]
 8007d06:	3b01      	subs	r3, #1
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	b410      	push	{r4}
 8007d0c:	6093      	str	r3, [r2, #8]
 8007d0e:	da08      	bge.n	8007d22 <__sfputc_r+0x1e>
 8007d10:	6994      	ldr	r4, [r2, #24]
 8007d12:	42a3      	cmp	r3, r4
 8007d14:	db01      	blt.n	8007d1a <__sfputc_r+0x16>
 8007d16:	290a      	cmp	r1, #10
 8007d18:	d103      	bne.n	8007d22 <__sfputc_r+0x1e>
 8007d1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d1e:	f7ff bdda 	b.w	80078d6 <__swbuf_r>
 8007d22:	6813      	ldr	r3, [r2, #0]
 8007d24:	1c58      	adds	r0, r3, #1
 8007d26:	6010      	str	r0, [r2, #0]
 8007d28:	7019      	strb	r1, [r3, #0]
 8007d2a:	4608      	mov	r0, r1
 8007d2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d30:	4770      	bx	lr

08007d32 <__sfputs_r>:
 8007d32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d34:	4606      	mov	r6, r0
 8007d36:	460f      	mov	r7, r1
 8007d38:	4614      	mov	r4, r2
 8007d3a:	18d5      	adds	r5, r2, r3
 8007d3c:	42ac      	cmp	r4, r5
 8007d3e:	d101      	bne.n	8007d44 <__sfputs_r+0x12>
 8007d40:	2000      	movs	r0, #0
 8007d42:	e007      	b.n	8007d54 <__sfputs_r+0x22>
 8007d44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d48:	463a      	mov	r2, r7
 8007d4a:	4630      	mov	r0, r6
 8007d4c:	f7ff ffda 	bl	8007d04 <__sfputc_r>
 8007d50:	1c43      	adds	r3, r0, #1
 8007d52:	d1f3      	bne.n	8007d3c <__sfputs_r+0xa>
 8007d54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007d58 <_vfiprintf_r>:
 8007d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d5c:	460d      	mov	r5, r1
 8007d5e:	b09d      	sub	sp, #116	; 0x74
 8007d60:	4614      	mov	r4, r2
 8007d62:	4698      	mov	r8, r3
 8007d64:	4606      	mov	r6, r0
 8007d66:	b118      	cbz	r0, 8007d70 <_vfiprintf_r+0x18>
 8007d68:	6a03      	ldr	r3, [r0, #32]
 8007d6a:	b90b      	cbnz	r3, 8007d70 <_vfiprintf_r+0x18>
 8007d6c:	f7ff fccc 	bl	8007708 <__sinit>
 8007d70:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d72:	07d9      	lsls	r1, r3, #31
 8007d74:	d405      	bmi.n	8007d82 <_vfiprintf_r+0x2a>
 8007d76:	89ab      	ldrh	r3, [r5, #12]
 8007d78:	059a      	lsls	r2, r3, #22
 8007d7a:	d402      	bmi.n	8007d82 <_vfiprintf_r+0x2a>
 8007d7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d7e:	f7ff feb8 	bl	8007af2 <__retarget_lock_acquire_recursive>
 8007d82:	89ab      	ldrh	r3, [r5, #12]
 8007d84:	071b      	lsls	r3, r3, #28
 8007d86:	d501      	bpl.n	8007d8c <_vfiprintf_r+0x34>
 8007d88:	692b      	ldr	r3, [r5, #16]
 8007d8a:	b99b      	cbnz	r3, 8007db4 <_vfiprintf_r+0x5c>
 8007d8c:	4629      	mov	r1, r5
 8007d8e:	4630      	mov	r0, r6
 8007d90:	f7ff fdde 	bl	8007950 <__swsetup_r>
 8007d94:	b170      	cbz	r0, 8007db4 <_vfiprintf_r+0x5c>
 8007d96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d98:	07dc      	lsls	r4, r3, #31
 8007d9a:	d504      	bpl.n	8007da6 <_vfiprintf_r+0x4e>
 8007d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8007da0:	b01d      	add	sp, #116	; 0x74
 8007da2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007da6:	89ab      	ldrh	r3, [r5, #12]
 8007da8:	0598      	lsls	r0, r3, #22
 8007daa:	d4f7      	bmi.n	8007d9c <_vfiprintf_r+0x44>
 8007dac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007dae:	f7ff fea1 	bl	8007af4 <__retarget_lock_release_recursive>
 8007db2:	e7f3      	b.n	8007d9c <_vfiprintf_r+0x44>
 8007db4:	2300      	movs	r3, #0
 8007db6:	9309      	str	r3, [sp, #36]	; 0x24
 8007db8:	2320      	movs	r3, #32
 8007dba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007dbe:	f8cd 800c 	str.w	r8, [sp, #12]
 8007dc2:	2330      	movs	r3, #48	; 0x30
 8007dc4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007f78 <_vfiprintf_r+0x220>
 8007dc8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007dcc:	f04f 0901 	mov.w	r9, #1
 8007dd0:	4623      	mov	r3, r4
 8007dd2:	469a      	mov	sl, r3
 8007dd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007dd8:	b10a      	cbz	r2, 8007dde <_vfiprintf_r+0x86>
 8007dda:	2a25      	cmp	r2, #37	; 0x25
 8007ddc:	d1f9      	bne.n	8007dd2 <_vfiprintf_r+0x7a>
 8007dde:	ebba 0b04 	subs.w	fp, sl, r4
 8007de2:	d00b      	beq.n	8007dfc <_vfiprintf_r+0xa4>
 8007de4:	465b      	mov	r3, fp
 8007de6:	4622      	mov	r2, r4
 8007de8:	4629      	mov	r1, r5
 8007dea:	4630      	mov	r0, r6
 8007dec:	f7ff ffa1 	bl	8007d32 <__sfputs_r>
 8007df0:	3001      	adds	r0, #1
 8007df2:	f000 80a9 	beq.w	8007f48 <_vfiprintf_r+0x1f0>
 8007df6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007df8:	445a      	add	r2, fp
 8007dfa:	9209      	str	r2, [sp, #36]	; 0x24
 8007dfc:	f89a 3000 	ldrb.w	r3, [sl]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	f000 80a1 	beq.w	8007f48 <_vfiprintf_r+0x1f0>
 8007e06:	2300      	movs	r3, #0
 8007e08:	f04f 32ff 	mov.w	r2, #4294967295
 8007e0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e10:	f10a 0a01 	add.w	sl, sl, #1
 8007e14:	9304      	str	r3, [sp, #16]
 8007e16:	9307      	str	r3, [sp, #28]
 8007e18:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007e1c:	931a      	str	r3, [sp, #104]	; 0x68
 8007e1e:	4654      	mov	r4, sl
 8007e20:	2205      	movs	r2, #5
 8007e22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e26:	4854      	ldr	r0, [pc, #336]	; (8007f78 <_vfiprintf_r+0x220>)
 8007e28:	f7f8 f9e2 	bl	80001f0 <memchr>
 8007e2c:	9a04      	ldr	r2, [sp, #16]
 8007e2e:	b9d8      	cbnz	r0, 8007e68 <_vfiprintf_r+0x110>
 8007e30:	06d1      	lsls	r1, r2, #27
 8007e32:	bf44      	itt	mi
 8007e34:	2320      	movmi	r3, #32
 8007e36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e3a:	0713      	lsls	r3, r2, #28
 8007e3c:	bf44      	itt	mi
 8007e3e:	232b      	movmi	r3, #43	; 0x2b
 8007e40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e44:	f89a 3000 	ldrb.w	r3, [sl]
 8007e48:	2b2a      	cmp	r3, #42	; 0x2a
 8007e4a:	d015      	beq.n	8007e78 <_vfiprintf_r+0x120>
 8007e4c:	9a07      	ldr	r2, [sp, #28]
 8007e4e:	4654      	mov	r4, sl
 8007e50:	2000      	movs	r0, #0
 8007e52:	f04f 0c0a 	mov.w	ip, #10
 8007e56:	4621      	mov	r1, r4
 8007e58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e5c:	3b30      	subs	r3, #48	; 0x30
 8007e5e:	2b09      	cmp	r3, #9
 8007e60:	d94d      	bls.n	8007efe <_vfiprintf_r+0x1a6>
 8007e62:	b1b0      	cbz	r0, 8007e92 <_vfiprintf_r+0x13a>
 8007e64:	9207      	str	r2, [sp, #28]
 8007e66:	e014      	b.n	8007e92 <_vfiprintf_r+0x13a>
 8007e68:	eba0 0308 	sub.w	r3, r0, r8
 8007e6c:	fa09 f303 	lsl.w	r3, r9, r3
 8007e70:	4313      	orrs	r3, r2
 8007e72:	9304      	str	r3, [sp, #16]
 8007e74:	46a2      	mov	sl, r4
 8007e76:	e7d2      	b.n	8007e1e <_vfiprintf_r+0xc6>
 8007e78:	9b03      	ldr	r3, [sp, #12]
 8007e7a:	1d19      	adds	r1, r3, #4
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	9103      	str	r1, [sp, #12]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	bfbb      	ittet	lt
 8007e84:	425b      	neglt	r3, r3
 8007e86:	f042 0202 	orrlt.w	r2, r2, #2
 8007e8a:	9307      	strge	r3, [sp, #28]
 8007e8c:	9307      	strlt	r3, [sp, #28]
 8007e8e:	bfb8      	it	lt
 8007e90:	9204      	strlt	r2, [sp, #16]
 8007e92:	7823      	ldrb	r3, [r4, #0]
 8007e94:	2b2e      	cmp	r3, #46	; 0x2e
 8007e96:	d10c      	bne.n	8007eb2 <_vfiprintf_r+0x15a>
 8007e98:	7863      	ldrb	r3, [r4, #1]
 8007e9a:	2b2a      	cmp	r3, #42	; 0x2a
 8007e9c:	d134      	bne.n	8007f08 <_vfiprintf_r+0x1b0>
 8007e9e:	9b03      	ldr	r3, [sp, #12]
 8007ea0:	1d1a      	adds	r2, r3, #4
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	9203      	str	r2, [sp, #12]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	bfb8      	it	lt
 8007eaa:	f04f 33ff 	movlt.w	r3, #4294967295
 8007eae:	3402      	adds	r4, #2
 8007eb0:	9305      	str	r3, [sp, #20]
 8007eb2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007f88 <_vfiprintf_r+0x230>
 8007eb6:	7821      	ldrb	r1, [r4, #0]
 8007eb8:	2203      	movs	r2, #3
 8007eba:	4650      	mov	r0, sl
 8007ebc:	f7f8 f998 	bl	80001f0 <memchr>
 8007ec0:	b138      	cbz	r0, 8007ed2 <_vfiprintf_r+0x17a>
 8007ec2:	9b04      	ldr	r3, [sp, #16]
 8007ec4:	eba0 000a 	sub.w	r0, r0, sl
 8007ec8:	2240      	movs	r2, #64	; 0x40
 8007eca:	4082      	lsls	r2, r0
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	3401      	adds	r4, #1
 8007ed0:	9304      	str	r3, [sp, #16]
 8007ed2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ed6:	4829      	ldr	r0, [pc, #164]	; (8007f7c <_vfiprintf_r+0x224>)
 8007ed8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007edc:	2206      	movs	r2, #6
 8007ede:	f7f8 f987 	bl	80001f0 <memchr>
 8007ee2:	2800      	cmp	r0, #0
 8007ee4:	d03f      	beq.n	8007f66 <_vfiprintf_r+0x20e>
 8007ee6:	4b26      	ldr	r3, [pc, #152]	; (8007f80 <_vfiprintf_r+0x228>)
 8007ee8:	bb1b      	cbnz	r3, 8007f32 <_vfiprintf_r+0x1da>
 8007eea:	9b03      	ldr	r3, [sp, #12]
 8007eec:	3307      	adds	r3, #7
 8007eee:	f023 0307 	bic.w	r3, r3, #7
 8007ef2:	3308      	adds	r3, #8
 8007ef4:	9303      	str	r3, [sp, #12]
 8007ef6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ef8:	443b      	add	r3, r7
 8007efa:	9309      	str	r3, [sp, #36]	; 0x24
 8007efc:	e768      	b.n	8007dd0 <_vfiprintf_r+0x78>
 8007efe:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f02:	460c      	mov	r4, r1
 8007f04:	2001      	movs	r0, #1
 8007f06:	e7a6      	b.n	8007e56 <_vfiprintf_r+0xfe>
 8007f08:	2300      	movs	r3, #0
 8007f0a:	3401      	adds	r4, #1
 8007f0c:	9305      	str	r3, [sp, #20]
 8007f0e:	4619      	mov	r1, r3
 8007f10:	f04f 0c0a 	mov.w	ip, #10
 8007f14:	4620      	mov	r0, r4
 8007f16:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f1a:	3a30      	subs	r2, #48	; 0x30
 8007f1c:	2a09      	cmp	r2, #9
 8007f1e:	d903      	bls.n	8007f28 <_vfiprintf_r+0x1d0>
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d0c6      	beq.n	8007eb2 <_vfiprintf_r+0x15a>
 8007f24:	9105      	str	r1, [sp, #20]
 8007f26:	e7c4      	b.n	8007eb2 <_vfiprintf_r+0x15a>
 8007f28:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f2c:	4604      	mov	r4, r0
 8007f2e:	2301      	movs	r3, #1
 8007f30:	e7f0      	b.n	8007f14 <_vfiprintf_r+0x1bc>
 8007f32:	ab03      	add	r3, sp, #12
 8007f34:	9300      	str	r3, [sp, #0]
 8007f36:	462a      	mov	r2, r5
 8007f38:	4b12      	ldr	r3, [pc, #72]	; (8007f84 <_vfiprintf_r+0x22c>)
 8007f3a:	a904      	add	r1, sp, #16
 8007f3c:	4630      	mov	r0, r6
 8007f3e:	f3af 8000 	nop.w
 8007f42:	4607      	mov	r7, r0
 8007f44:	1c78      	adds	r0, r7, #1
 8007f46:	d1d6      	bne.n	8007ef6 <_vfiprintf_r+0x19e>
 8007f48:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f4a:	07d9      	lsls	r1, r3, #31
 8007f4c:	d405      	bmi.n	8007f5a <_vfiprintf_r+0x202>
 8007f4e:	89ab      	ldrh	r3, [r5, #12]
 8007f50:	059a      	lsls	r2, r3, #22
 8007f52:	d402      	bmi.n	8007f5a <_vfiprintf_r+0x202>
 8007f54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f56:	f7ff fdcd 	bl	8007af4 <__retarget_lock_release_recursive>
 8007f5a:	89ab      	ldrh	r3, [r5, #12]
 8007f5c:	065b      	lsls	r3, r3, #25
 8007f5e:	f53f af1d 	bmi.w	8007d9c <_vfiprintf_r+0x44>
 8007f62:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f64:	e71c      	b.n	8007da0 <_vfiprintf_r+0x48>
 8007f66:	ab03      	add	r3, sp, #12
 8007f68:	9300      	str	r3, [sp, #0]
 8007f6a:	462a      	mov	r2, r5
 8007f6c:	4b05      	ldr	r3, [pc, #20]	; (8007f84 <_vfiprintf_r+0x22c>)
 8007f6e:	a904      	add	r1, sp, #16
 8007f70:	4630      	mov	r0, r6
 8007f72:	f000 f879 	bl	8008068 <_printf_i>
 8007f76:	e7e4      	b.n	8007f42 <_vfiprintf_r+0x1ea>
 8007f78:	08008af4 	.word	0x08008af4
 8007f7c:	08008afe 	.word	0x08008afe
 8007f80:	00000000 	.word	0x00000000
 8007f84:	08007d33 	.word	0x08007d33
 8007f88:	08008afa 	.word	0x08008afa

08007f8c <_printf_common>:
 8007f8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f90:	4616      	mov	r6, r2
 8007f92:	4699      	mov	r9, r3
 8007f94:	688a      	ldr	r2, [r1, #8]
 8007f96:	690b      	ldr	r3, [r1, #16]
 8007f98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	bfb8      	it	lt
 8007fa0:	4613      	movlt	r3, r2
 8007fa2:	6033      	str	r3, [r6, #0]
 8007fa4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007fa8:	4607      	mov	r7, r0
 8007faa:	460c      	mov	r4, r1
 8007fac:	b10a      	cbz	r2, 8007fb2 <_printf_common+0x26>
 8007fae:	3301      	adds	r3, #1
 8007fb0:	6033      	str	r3, [r6, #0]
 8007fb2:	6823      	ldr	r3, [r4, #0]
 8007fb4:	0699      	lsls	r1, r3, #26
 8007fb6:	bf42      	ittt	mi
 8007fb8:	6833      	ldrmi	r3, [r6, #0]
 8007fba:	3302      	addmi	r3, #2
 8007fbc:	6033      	strmi	r3, [r6, #0]
 8007fbe:	6825      	ldr	r5, [r4, #0]
 8007fc0:	f015 0506 	ands.w	r5, r5, #6
 8007fc4:	d106      	bne.n	8007fd4 <_printf_common+0x48>
 8007fc6:	f104 0a19 	add.w	sl, r4, #25
 8007fca:	68e3      	ldr	r3, [r4, #12]
 8007fcc:	6832      	ldr	r2, [r6, #0]
 8007fce:	1a9b      	subs	r3, r3, r2
 8007fd0:	42ab      	cmp	r3, r5
 8007fd2:	dc26      	bgt.n	8008022 <_printf_common+0x96>
 8007fd4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007fd8:	1e13      	subs	r3, r2, #0
 8007fda:	6822      	ldr	r2, [r4, #0]
 8007fdc:	bf18      	it	ne
 8007fde:	2301      	movne	r3, #1
 8007fe0:	0692      	lsls	r2, r2, #26
 8007fe2:	d42b      	bmi.n	800803c <_printf_common+0xb0>
 8007fe4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007fe8:	4649      	mov	r1, r9
 8007fea:	4638      	mov	r0, r7
 8007fec:	47c0      	blx	r8
 8007fee:	3001      	adds	r0, #1
 8007ff0:	d01e      	beq.n	8008030 <_printf_common+0xa4>
 8007ff2:	6823      	ldr	r3, [r4, #0]
 8007ff4:	6922      	ldr	r2, [r4, #16]
 8007ff6:	f003 0306 	and.w	r3, r3, #6
 8007ffa:	2b04      	cmp	r3, #4
 8007ffc:	bf02      	ittt	eq
 8007ffe:	68e5      	ldreq	r5, [r4, #12]
 8008000:	6833      	ldreq	r3, [r6, #0]
 8008002:	1aed      	subeq	r5, r5, r3
 8008004:	68a3      	ldr	r3, [r4, #8]
 8008006:	bf0c      	ite	eq
 8008008:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800800c:	2500      	movne	r5, #0
 800800e:	4293      	cmp	r3, r2
 8008010:	bfc4      	itt	gt
 8008012:	1a9b      	subgt	r3, r3, r2
 8008014:	18ed      	addgt	r5, r5, r3
 8008016:	2600      	movs	r6, #0
 8008018:	341a      	adds	r4, #26
 800801a:	42b5      	cmp	r5, r6
 800801c:	d11a      	bne.n	8008054 <_printf_common+0xc8>
 800801e:	2000      	movs	r0, #0
 8008020:	e008      	b.n	8008034 <_printf_common+0xa8>
 8008022:	2301      	movs	r3, #1
 8008024:	4652      	mov	r2, sl
 8008026:	4649      	mov	r1, r9
 8008028:	4638      	mov	r0, r7
 800802a:	47c0      	blx	r8
 800802c:	3001      	adds	r0, #1
 800802e:	d103      	bne.n	8008038 <_printf_common+0xac>
 8008030:	f04f 30ff 	mov.w	r0, #4294967295
 8008034:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008038:	3501      	adds	r5, #1
 800803a:	e7c6      	b.n	8007fca <_printf_common+0x3e>
 800803c:	18e1      	adds	r1, r4, r3
 800803e:	1c5a      	adds	r2, r3, #1
 8008040:	2030      	movs	r0, #48	; 0x30
 8008042:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008046:	4422      	add	r2, r4
 8008048:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800804c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008050:	3302      	adds	r3, #2
 8008052:	e7c7      	b.n	8007fe4 <_printf_common+0x58>
 8008054:	2301      	movs	r3, #1
 8008056:	4622      	mov	r2, r4
 8008058:	4649      	mov	r1, r9
 800805a:	4638      	mov	r0, r7
 800805c:	47c0      	blx	r8
 800805e:	3001      	adds	r0, #1
 8008060:	d0e6      	beq.n	8008030 <_printf_common+0xa4>
 8008062:	3601      	adds	r6, #1
 8008064:	e7d9      	b.n	800801a <_printf_common+0x8e>
	...

08008068 <_printf_i>:
 8008068:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800806c:	7e0f      	ldrb	r7, [r1, #24]
 800806e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008070:	2f78      	cmp	r7, #120	; 0x78
 8008072:	4691      	mov	r9, r2
 8008074:	4680      	mov	r8, r0
 8008076:	460c      	mov	r4, r1
 8008078:	469a      	mov	sl, r3
 800807a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800807e:	d807      	bhi.n	8008090 <_printf_i+0x28>
 8008080:	2f62      	cmp	r7, #98	; 0x62
 8008082:	d80a      	bhi.n	800809a <_printf_i+0x32>
 8008084:	2f00      	cmp	r7, #0
 8008086:	f000 80d4 	beq.w	8008232 <_printf_i+0x1ca>
 800808a:	2f58      	cmp	r7, #88	; 0x58
 800808c:	f000 80c0 	beq.w	8008210 <_printf_i+0x1a8>
 8008090:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008094:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008098:	e03a      	b.n	8008110 <_printf_i+0xa8>
 800809a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800809e:	2b15      	cmp	r3, #21
 80080a0:	d8f6      	bhi.n	8008090 <_printf_i+0x28>
 80080a2:	a101      	add	r1, pc, #4	; (adr r1, 80080a8 <_printf_i+0x40>)
 80080a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80080a8:	08008101 	.word	0x08008101
 80080ac:	08008115 	.word	0x08008115
 80080b0:	08008091 	.word	0x08008091
 80080b4:	08008091 	.word	0x08008091
 80080b8:	08008091 	.word	0x08008091
 80080bc:	08008091 	.word	0x08008091
 80080c0:	08008115 	.word	0x08008115
 80080c4:	08008091 	.word	0x08008091
 80080c8:	08008091 	.word	0x08008091
 80080cc:	08008091 	.word	0x08008091
 80080d0:	08008091 	.word	0x08008091
 80080d4:	08008219 	.word	0x08008219
 80080d8:	08008141 	.word	0x08008141
 80080dc:	080081d3 	.word	0x080081d3
 80080e0:	08008091 	.word	0x08008091
 80080e4:	08008091 	.word	0x08008091
 80080e8:	0800823b 	.word	0x0800823b
 80080ec:	08008091 	.word	0x08008091
 80080f0:	08008141 	.word	0x08008141
 80080f4:	08008091 	.word	0x08008091
 80080f8:	08008091 	.word	0x08008091
 80080fc:	080081db 	.word	0x080081db
 8008100:	682b      	ldr	r3, [r5, #0]
 8008102:	1d1a      	adds	r2, r3, #4
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	602a      	str	r2, [r5, #0]
 8008108:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800810c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008110:	2301      	movs	r3, #1
 8008112:	e09f      	b.n	8008254 <_printf_i+0x1ec>
 8008114:	6820      	ldr	r0, [r4, #0]
 8008116:	682b      	ldr	r3, [r5, #0]
 8008118:	0607      	lsls	r7, r0, #24
 800811a:	f103 0104 	add.w	r1, r3, #4
 800811e:	6029      	str	r1, [r5, #0]
 8008120:	d501      	bpl.n	8008126 <_printf_i+0xbe>
 8008122:	681e      	ldr	r6, [r3, #0]
 8008124:	e003      	b.n	800812e <_printf_i+0xc6>
 8008126:	0646      	lsls	r6, r0, #25
 8008128:	d5fb      	bpl.n	8008122 <_printf_i+0xba>
 800812a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800812e:	2e00      	cmp	r6, #0
 8008130:	da03      	bge.n	800813a <_printf_i+0xd2>
 8008132:	232d      	movs	r3, #45	; 0x2d
 8008134:	4276      	negs	r6, r6
 8008136:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800813a:	485a      	ldr	r0, [pc, #360]	; (80082a4 <_printf_i+0x23c>)
 800813c:	230a      	movs	r3, #10
 800813e:	e012      	b.n	8008166 <_printf_i+0xfe>
 8008140:	682b      	ldr	r3, [r5, #0]
 8008142:	6820      	ldr	r0, [r4, #0]
 8008144:	1d19      	adds	r1, r3, #4
 8008146:	6029      	str	r1, [r5, #0]
 8008148:	0605      	lsls	r5, r0, #24
 800814a:	d501      	bpl.n	8008150 <_printf_i+0xe8>
 800814c:	681e      	ldr	r6, [r3, #0]
 800814e:	e002      	b.n	8008156 <_printf_i+0xee>
 8008150:	0641      	lsls	r1, r0, #25
 8008152:	d5fb      	bpl.n	800814c <_printf_i+0xe4>
 8008154:	881e      	ldrh	r6, [r3, #0]
 8008156:	4853      	ldr	r0, [pc, #332]	; (80082a4 <_printf_i+0x23c>)
 8008158:	2f6f      	cmp	r7, #111	; 0x6f
 800815a:	bf0c      	ite	eq
 800815c:	2308      	moveq	r3, #8
 800815e:	230a      	movne	r3, #10
 8008160:	2100      	movs	r1, #0
 8008162:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008166:	6865      	ldr	r5, [r4, #4]
 8008168:	60a5      	str	r5, [r4, #8]
 800816a:	2d00      	cmp	r5, #0
 800816c:	bfa2      	ittt	ge
 800816e:	6821      	ldrge	r1, [r4, #0]
 8008170:	f021 0104 	bicge.w	r1, r1, #4
 8008174:	6021      	strge	r1, [r4, #0]
 8008176:	b90e      	cbnz	r6, 800817c <_printf_i+0x114>
 8008178:	2d00      	cmp	r5, #0
 800817a:	d04b      	beq.n	8008214 <_printf_i+0x1ac>
 800817c:	4615      	mov	r5, r2
 800817e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008182:	fb03 6711 	mls	r7, r3, r1, r6
 8008186:	5dc7      	ldrb	r7, [r0, r7]
 8008188:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800818c:	4637      	mov	r7, r6
 800818e:	42bb      	cmp	r3, r7
 8008190:	460e      	mov	r6, r1
 8008192:	d9f4      	bls.n	800817e <_printf_i+0x116>
 8008194:	2b08      	cmp	r3, #8
 8008196:	d10b      	bne.n	80081b0 <_printf_i+0x148>
 8008198:	6823      	ldr	r3, [r4, #0]
 800819a:	07de      	lsls	r6, r3, #31
 800819c:	d508      	bpl.n	80081b0 <_printf_i+0x148>
 800819e:	6923      	ldr	r3, [r4, #16]
 80081a0:	6861      	ldr	r1, [r4, #4]
 80081a2:	4299      	cmp	r1, r3
 80081a4:	bfde      	ittt	le
 80081a6:	2330      	movle	r3, #48	; 0x30
 80081a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80081ac:	f105 35ff 	addle.w	r5, r5, #4294967295
 80081b0:	1b52      	subs	r2, r2, r5
 80081b2:	6122      	str	r2, [r4, #16]
 80081b4:	f8cd a000 	str.w	sl, [sp]
 80081b8:	464b      	mov	r3, r9
 80081ba:	aa03      	add	r2, sp, #12
 80081bc:	4621      	mov	r1, r4
 80081be:	4640      	mov	r0, r8
 80081c0:	f7ff fee4 	bl	8007f8c <_printf_common>
 80081c4:	3001      	adds	r0, #1
 80081c6:	d14a      	bne.n	800825e <_printf_i+0x1f6>
 80081c8:	f04f 30ff 	mov.w	r0, #4294967295
 80081cc:	b004      	add	sp, #16
 80081ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081d2:	6823      	ldr	r3, [r4, #0]
 80081d4:	f043 0320 	orr.w	r3, r3, #32
 80081d8:	6023      	str	r3, [r4, #0]
 80081da:	4833      	ldr	r0, [pc, #204]	; (80082a8 <_printf_i+0x240>)
 80081dc:	2778      	movs	r7, #120	; 0x78
 80081de:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80081e2:	6823      	ldr	r3, [r4, #0]
 80081e4:	6829      	ldr	r1, [r5, #0]
 80081e6:	061f      	lsls	r7, r3, #24
 80081e8:	f851 6b04 	ldr.w	r6, [r1], #4
 80081ec:	d402      	bmi.n	80081f4 <_printf_i+0x18c>
 80081ee:	065f      	lsls	r7, r3, #25
 80081f0:	bf48      	it	mi
 80081f2:	b2b6      	uxthmi	r6, r6
 80081f4:	07df      	lsls	r7, r3, #31
 80081f6:	bf48      	it	mi
 80081f8:	f043 0320 	orrmi.w	r3, r3, #32
 80081fc:	6029      	str	r1, [r5, #0]
 80081fe:	bf48      	it	mi
 8008200:	6023      	strmi	r3, [r4, #0]
 8008202:	b91e      	cbnz	r6, 800820c <_printf_i+0x1a4>
 8008204:	6823      	ldr	r3, [r4, #0]
 8008206:	f023 0320 	bic.w	r3, r3, #32
 800820a:	6023      	str	r3, [r4, #0]
 800820c:	2310      	movs	r3, #16
 800820e:	e7a7      	b.n	8008160 <_printf_i+0xf8>
 8008210:	4824      	ldr	r0, [pc, #144]	; (80082a4 <_printf_i+0x23c>)
 8008212:	e7e4      	b.n	80081de <_printf_i+0x176>
 8008214:	4615      	mov	r5, r2
 8008216:	e7bd      	b.n	8008194 <_printf_i+0x12c>
 8008218:	682b      	ldr	r3, [r5, #0]
 800821a:	6826      	ldr	r6, [r4, #0]
 800821c:	6961      	ldr	r1, [r4, #20]
 800821e:	1d18      	adds	r0, r3, #4
 8008220:	6028      	str	r0, [r5, #0]
 8008222:	0635      	lsls	r5, r6, #24
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	d501      	bpl.n	800822c <_printf_i+0x1c4>
 8008228:	6019      	str	r1, [r3, #0]
 800822a:	e002      	b.n	8008232 <_printf_i+0x1ca>
 800822c:	0670      	lsls	r0, r6, #25
 800822e:	d5fb      	bpl.n	8008228 <_printf_i+0x1c0>
 8008230:	8019      	strh	r1, [r3, #0]
 8008232:	2300      	movs	r3, #0
 8008234:	6123      	str	r3, [r4, #16]
 8008236:	4615      	mov	r5, r2
 8008238:	e7bc      	b.n	80081b4 <_printf_i+0x14c>
 800823a:	682b      	ldr	r3, [r5, #0]
 800823c:	1d1a      	adds	r2, r3, #4
 800823e:	602a      	str	r2, [r5, #0]
 8008240:	681d      	ldr	r5, [r3, #0]
 8008242:	6862      	ldr	r2, [r4, #4]
 8008244:	2100      	movs	r1, #0
 8008246:	4628      	mov	r0, r5
 8008248:	f7f7 ffd2 	bl	80001f0 <memchr>
 800824c:	b108      	cbz	r0, 8008252 <_printf_i+0x1ea>
 800824e:	1b40      	subs	r0, r0, r5
 8008250:	6060      	str	r0, [r4, #4]
 8008252:	6863      	ldr	r3, [r4, #4]
 8008254:	6123      	str	r3, [r4, #16]
 8008256:	2300      	movs	r3, #0
 8008258:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800825c:	e7aa      	b.n	80081b4 <_printf_i+0x14c>
 800825e:	6923      	ldr	r3, [r4, #16]
 8008260:	462a      	mov	r2, r5
 8008262:	4649      	mov	r1, r9
 8008264:	4640      	mov	r0, r8
 8008266:	47d0      	blx	sl
 8008268:	3001      	adds	r0, #1
 800826a:	d0ad      	beq.n	80081c8 <_printf_i+0x160>
 800826c:	6823      	ldr	r3, [r4, #0]
 800826e:	079b      	lsls	r3, r3, #30
 8008270:	d413      	bmi.n	800829a <_printf_i+0x232>
 8008272:	68e0      	ldr	r0, [r4, #12]
 8008274:	9b03      	ldr	r3, [sp, #12]
 8008276:	4298      	cmp	r0, r3
 8008278:	bfb8      	it	lt
 800827a:	4618      	movlt	r0, r3
 800827c:	e7a6      	b.n	80081cc <_printf_i+0x164>
 800827e:	2301      	movs	r3, #1
 8008280:	4632      	mov	r2, r6
 8008282:	4649      	mov	r1, r9
 8008284:	4640      	mov	r0, r8
 8008286:	47d0      	blx	sl
 8008288:	3001      	adds	r0, #1
 800828a:	d09d      	beq.n	80081c8 <_printf_i+0x160>
 800828c:	3501      	adds	r5, #1
 800828e:	68e3      	ldr	r3, [r4, #12]
 8008290:	9903      	ldr	r1, [sp, #12]
 8008292:	1a5b      	subs	r3, r3, r1
 8008294:	42ab      	cmp	r3, r5
 8008296:	dcf2      	bgt.n	800827e <_printf_i+0x216>
 8008298:	e7eb      	b.n	8008272 <_printf_i+0x20a>
 800829a:	2500      	movs	r5, #0
 800829c:	f104 0619 	add.w	r6, r4, #25
 80082a0:	e7f5      	b.n	800828e <_printf_i+0x226>
 80082a2:	bf00      	nop
 80082a4:	08008b05 	.word	0x08008b05
 80082a8:	08008b16 	.word	0x08008b16

080082ac <__sflush_r>:
 80082ac:	898a      	ldrh	r2, [r1, #12]
 80082ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082b2:	4605      	mov	r5, r0
 80082b4:	0710      	lsls	r0, r2, #28
 80082b6:	460c      	mov	r4, r1
 80082b8:	d458      	bmi.n	800836c <__sflush_r+0xc0>
 80082ba:	684b      	ldr	r3, [r1, #4]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	dc05      	bgt.n	80082cc <__sflush_r+0x20>
 80082c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	dc02      	bgt.n	80082cc <__sflush_r+0x20>
 80082c6:	2000      	movs	r0, #0
 80082c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80082ce:	2e00      	cmp	r6, #0
 80082d0:	d0f9      	beq.n	80082c6 <__sflush_r+0x1a>
 80082d2:	2300      	movs	r3, #0
 80082d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80082d8:	682f      	ldr	r7, [r5, #0]
 80082da:	6a21      	ldr	r1, [r4, #32]
 80082dc:	602b      	str	r3, [r5, #0]
 80082de:	d032      	beq.n	8008346 <__sflush_r+0x9a>
 80082e0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80082e2:	89a3      	ldrh	r3, [r4, #12]
 80082e4:	075a      	lsls	r2, r3, #29
 80082e6:	d505      	bpl.n	80082f4 <__sflush_r+0x48>
 80082e8:	6863      	ldr	r3, [r4, #4]
 80082ea:	1ac0      	subs	r0, r0, r3
 80082ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80082ee:	b10b      	cbz	r3, 80082f4 <__sflush_r+0x48>
 80082f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80082f2:	1ac0      	subs	r0, r0, r3
 80082f4:	2300      	movs	r3, #0
 80082f6:	4602      	mov	r2, r0
 80082f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80082fa:	6a21      	ldr	r1, [r4, #32]
 80082fc:	4628      	mov	r0, r5
 80082fe:	47b0      	blx	r6
 8008300:	1c43      	adds	r3, r0, #1
 8008302:	89a3      	ldrh	r3, [r4, #12]
 8008304:	d106      	bne.n	8008314 <__sflush_r+0x68>
 8008306:	6829      	ldr	r1, [r5, #0]
 8008308:	291d      	cmp	r1, #29
 800830a:	d82b      	bhi.n	8008364 <__sflush_r+0xb8>
 800830c:	4a29      	ldr	r2, [pc, #164]	; (80083b4 <__sflush_r+0x108>)
 800830e:	410a      	asrs	r2, r1
 8008310:	07d6      	lsls	r6, r2, #31
 8008312:	d427      	bmi.n	8008364 <__sflush_r+0xb8>
 8008314:	2200      	movs	r2, #0
 8008316:	6062      	str	r2, [r4, #4]
 8008318:	04d9      	lsls	r1, r3, #19
 800831a:	6922      	ldr	r2, [r4, #16]
 800831c:	6022      	str	r2, [r4, #0]
 800831e:	d504      	bpl.n	800832a <__sflush_r+0x7e>
 8008320:	1c42      	adds	r2, r0, #1
 8008322:	d101      	bne.n	8008328 <__sflush_r+0x7c>
 8008324:	682b      	ldr	r3, [r5, #0]
 8008326:	b903      	cbnz	r3, 800832a <__sflush_r+0x7e>
 8008328:	6560      	str	r0, [r4, #84]	; 0x54
 800832a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800832c:	602f      	str	r7, [r5, #0]
 800832e:	2900      	cmp	r1, #0
 8008330:	d0c9      	beq.n	80082c6 <__sflush_r+0x1a>
 8008332:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008336:	4299      	cmp	r1, r3
 8008338:	d002      	beq.n	8008340 <__sflush_r+0x94>
 800833a:	4628      	mov	r0, r5
 800833c:	f7ff fbea 	bl	8007b14 <_free_r>
 8008340:	2000      	movs	r0, #0
 8008342:	6360      	str	r0, [r4, #52]	; 0x34
 8008344:	e7c0      	b.n	80082c8 <__sflush_r+0x1c>
 8008346:	2301      	movs	r3, #1
 8008348:	4628      	mov	r0, r5
 800834a:	47b0      	blx	r6
 800834c:	1c41      	adds	r1, r0, #1
 800834e:	d1c8      	bne.n	80082e2 <__sflush_r+0x36>
 8008350:	682b      	ldr	r3, [r5, #0]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d0c5      	beq.n	80082e2 <__sflush_r+0x36>
 8008356:	2b1d      	cmp	r3, #29
 8008358:	d001      	beq.n	800835e <__sflush_r+0xb2>
 800835a:	2b16      	cmp	r3, #22
 800835c:	d101      	bne.n	8008362 <__sflush_r+0xb6>
 800835e:	602f      	str	r7, [r5, #0]
 8008360:	e7b1      	b.n	80082c6 <__sflush_r+0x1a>
 8008362:	89a3      	ldrh	r3, [r4, #12]
 8008364:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008368:	81a3      	strh	r3, [r4, #12]
 800836a:	e7ad      	b.n	80082c8 <__sflush_r+0x1c>
 800836c:	690f      	ldr	r7, [r1, #16]
 800836e:	2f00      	cmp	r7, #0
 8008370:	d0a9      	beq.n	80082c6 <__sflush_r+0x1a>
 8008372:	0793      	lsls	r3, r2, #30
 8008374:	680e      	ldr	r6, [r1, #0]
 8008376:	bf08      	it	eq
 8008378:	694b      	ldreq	r3, [r1, #20]
 800837a:	600f      	str	r7, [r1, #0]
 800837c:	bf18      	it	ne
 800837e:	2300      	movne	r3, #0
 8008380:	eba6 0807 	sub.w	r8, r6, r7
 8008384:	608b      	str	r3, [r1, #8]
 8008386:	f1b8 0f00 	cmp.w	r8, #0
 800838a:	dd9c      	ble.n	80082c6 <__sflush_r+0x1a>
 800838c:	6a21      	ldr	r1, [r4, #32]
 800838e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008390:	4643      	mov	r3, r8
 8008392:	463a      	mov	r2, r7
 8008394:	4628      	mov	r0, r5
 8008396:	47b0      	blx	r6
 8008398:	2800      	cmp	r0, #0
 800839a:	dc06      	bgt.n	80083aa <__sflush_r+0xfe>
 800839c:	89a3      	ldrh	r3, [r4, #12]
 800839e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083a2:	81a3      	strh	r3, [r4, #12]
 80083a4:	f04f 30ff 	mov.w	r0, #4294967295
 80083a8:	e78e      	b.n	80082c8 <__sflush_r+0x1c>
 80083aa:	4407      	add	r7, r0
 80083ac:	eba8 0800 	sub.w	r8, r8, r0
 80083b0:	e7e9      	b.n	8008386 <__sflush_r+0xda>
 80083b2:	bf00      	nop
 80083b4:	dfbffffe 	.word	0xdfbffffe

080083b8 <_fflush_r>:
 80083b8:	b538      	push	{r3, r4, r5, lr}
 80083ba:	690b      	ldr	r3, [r1, #16]
 80083bc:	4605      	mov	r5, r0
 80083be:	460c      	mov	r4, r1
 80083c0:	b913      	cbnz	r3, 80083c8 <_fflush_r+0x10>
 80083c2:	2500      	movs	r5, #0
 80083c4:	4628      	mov	r0, r5
 80083c6:	bd38      	pop	{r3, r4, r5, pc}
 80083c8:	b118      	cbz	r0, 80083d2 <_fflush_r+0x1a>
 80083ca:	6a03      	ldr	r3, [r0, #32]
 80083cc:	b90b      	cbnz	r3, 80083d2 <_fflush_r+0x1a>
 80083ce:	f7ff f99b 	bl	8007708 <__sinit>
 80083d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d0f3      	beq.n	80083c2 <_fflush_r+0xa>
 80083da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80083dc:	07d0      	lsls	r0, r2, #31
 80083de:	d404      	bmi.n	80083ea <_fflush_r+0x32>
 80083e0:	0599      	lsls	r1, r3, #22
 80083e2:	d402      	bmi.n	80083ea <_fflush_r+0x32>
 80083e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80083e6:	f7ff fb84 	bl	8007af2 <__retarget_lock_acquire_recursive>
 80083ea:	4628      	mov	r0, r5
 80083ec:	4621      	mov	r1, r4
 80083ee:	f7ff ff5d 	bl	80082ac <__sflush_r>
 80083f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80083f4:	07da      	lsls	r2, r3, #31
 80083f6:	4605      	mov	r5, r0
 80083f8:	d4e4      	bmi.n	80083c4 <_fflush_r+0xc>
 80083fa:	89a3      	ldrh	r3, [r4, #12]
 80083fc:	059b      	lsls	r3, r3, #22
 80083fe:	d4e1      	bmi.n	80083c4 <_fflush_r+0xc>
 8008400:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008402:	f7ff fb77 	bl	8007af4 <__retarget_lock_release_recursive>
 8008406:	e7dd      	b.n	80083c4 <_fflush_r+0xc>

08008408 <__swhatbuf_r>:
 8008408:	b570      	push	{r4, r5, r6, lr}
 800840a:	460c      	mov	r4, r1
 800840c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008410:	2900      	cmp	r1, #0
 8008412:	b096      	sub	sp, #88	; 0x58
 8008414:	4615      	mov	r5, r2
 8008416:	461e      	mov	r6, r3
 8008418:	da0d      	bge.n	8008436 <__swhatbuf_r+0x2e>
 800841a:	89a3      	ldrh	r3, [r4, #12]
 800841c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008420:	f04f 0100 	mov.w	r1, #0
 8008424:	bf0c      	ite	eq
 8008426:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800842a:	2340      	movne	r3, #64	; 0x40
 800842c:	2000      	movs	r0, #0
 800842e:	6031      	str	r1, [r6, #0]
 8008430:	602b      	str	r3, [r5, #0]
 8008432:	b016      	add	sp, #88	; 0x58
 8008434:	bd70      	pop	{r4, r5, r6, pc}
 8008436:	466a      	mov	r2, sp
 8008438:	f000 f848 	bl	80084cc <_fstat_r>
 800843c:	2800      	cmp	r0, #0
 800843e:	dbec      	blt.n	800841a <__swhatbuf_r+0x12>
 8008440:	9901      	ldr	r1, [sp, #4]
 8008442:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008446:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800844a:	4259      	negs	r1, r3
 800844c:	4159      	adcs	r1, r3
 800844e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008452:	e7eb      	b.n	800842c <__swhatbuf_r+0x24>

08008454 <__smakebuf_r>:
 8008454:	898b      	ldrh	r3, [r1, #12]
 8008456:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008458:	079d      	lsls	r5, r3, #30
 800845a:	4606      	mov	r6, r0
 800845c:	460c      	mov	r4, r1
 800845e:	d507      	bpl.n	8008470 <__smakebuf_r+0x1c>
 8008460:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008464:	6023      	str	r3, [r4, #0]
 8008466:	6123      	str	r3, [r4, #16]
 8008468:	2301      	movs	r3, #1
 800846a:	6163      	str	r3, [r4, #20]
 800846c:	b002      	add	sp, #8
 800846e:	bd70      	pop	{r4, r5, r6, pc}
 8008470:	ab01      	add	r3, sp, #4
 8008472:	466a      	mov	r2, sp
 8008474:	f7ff ffc8 	bl	8008408 <__swhatbuf_r>
 8008478:	9900      	ldr	r1, [sp, #0]
 800847a:	4605      	mov	r5, r0
 800847c:	4630      	mov	r0, r6
 800847e:	f7ff fbb5 	bl	8007bec <_malloc_r>
 8008482:	b948      	cbnz	r0, 8008498 <__smakebuf_r+0x44>
 8008484:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008488:	059a      	lsls	r2, r3, #22
 800848a:	d4ef      	bmi.n	800846c <__smakebuf_r+0x18>
 800848c:	f023 0303 	bic.w	r3, r3, #3
 8008490:	f043 0302 	orr.w	r3, r3, #2
 8008494:	81a3      	strh	r3, [r4, #12]
 8008496:	e7e3      	b.n	8008460 <__smakebuf_r+0xc>
 8008498:	89a3      	ldrh	r3, [r4, #12]
 800849a:	6020      	str	r0, [r4, #0]
 800849c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084a0:	81a3      	strh	r3, [r4, #12]
 80084a2:	9b00      	ldr	r3, [sp, #0]
 80084a4:	6163      	str	r3, [r4, #20]
 80084a6:	9b01      	ldr	r3, [sp, #4]
 80084a8:	6120      	str	r0, [r4, #16]
 80084aa:	b15b      	cbz	r3, 80084c4 <__smakebuf_r+0x70>
 80084ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80084b0:	4630      	mov	r0, r6
 80084b2:	f000 f81d 	bl	80084f0 <_isatty_r>
 80084b6:	b128      	cbz	r0, 80084c4 <__smakebuf_r+0x70>
 80084b8:	89a3      	ldrh	r3, [r4, #12]
 80084ba:	f023 0303 	bic.w	r3, r3, #3
 80084be:	f043 0301 	orr.w	r3, r3, #1
 80084c2:	81a3      	strh	r3, [r4, #12]
 80084c4:	89a3      	ldrh	r3, [r4, #12]
 80084c6:	431d      	orrs	r5, r3
 80084c8:	81a5      	strh	r5, [r4, #12]
 80084ca:	e7cf      	b.n	800846c <__smakebuf_r+0x18>

080084cc <_fstat_r>:
 80084cc:	b538      	push	{r3, r4, r5, lr}
 80084ce:	4d07      	ldr	r5, [pc, #28]	; (80084ec <_fstat_r+0x20>)
 80084d0:	2300      	movs	r3, #0
 80084d2:	4604      	mov	r4, r0
 80084d4:	4608      	mov	r0, r1
 80084d6:	4611      	mov	r1, r2
 80084d8:	602b      	str	r3, [r5, #0]
 80084da:	f7f9 fd28 	bl	8001f2e <_fstat>
 80084de:	1c43      	adds	r3, r0, #1
 80084e0:	d102      	bne.n	80084e8 <_fstat_r+0x1c>
 80084e2:	682b      	ldr	r3, [r5, #0]
 80084e4:	b103      	cbz	r3, 80084e8 <_fstat_r+0x1c>
 80084e6:	6023      	str	r3, [r4, #0]
 80084e8:	bd38      	pop	{r3, r4, r5, pc}
 80084ea:	bf00      	nop
 80084ec:	2001f918 	.word	0x2001f918

080084f0 <_isatty_r>:
 80084f0:	b538      	push	{r3, r4, r5, lr}
 80084f2:	4d06      	ldr	r5, [pc, #24]	; (800850c <_isatty_r+0x1c>)
 80084f4:	2300      	movs	r3, #0
 80084f6:	4604      	mov	r4, r0
 80084f8:	4608      	mov	r0, r1
 80084fa:	602b      	str	r3, [r5, #0]
 80084fc:	f7f9 fd27 	bl	8001f4e <_isatty>
 8008500:	1c43      	adds	r3, r0, #1
 8008502:	d102      	bne.n	800850a <_isatty_r+0x1a>
 8008504:	682b      	ldr	r3, [r5, #0]
 8008506:	b103      	cbz	r3, 800850a <_isatty_r+0x1a>
 8008508:	6023      	str	r3, [r4, #0]
 800850a:	bd38      	pop	{r3, r4, r5, pc}
 800850c:	2001f918 	.word	0x2001f918

08008510 <_sbrk_r>:
 8008510:	b538      	push	{r3, r4, r5, lr}
 8008512:	4d06      	ldr	r5, [pc, #24]	; (800852c <_sbrk_r+0x1c>)
 8008514:	2300      	movs	r3, #0
 8008516:	4604      	mov	r4, r0
 8008518:	4608      	mov	r0, r1
 800851a:	602b      	str	r3, [r5, #0]
 800851c:	f7f9 fd30 	bl	8001f80 <_sbrk>
 8008520:	1c43      	adds	r3, r0, #1
 8008522:	d102      	bne.n	800852a <_sbrk_r+0x1a>
 8008524:	682b      	ldr	r3, [r5, #0]
 8008526:	b103      	cbz	r3, 800852a <_sbrk_r+0x1a>
 8008528:	6023      	str	r3, [r4, #0]
 800852a:	bd38      	pop	{r3, r4, r5, pc}
 800852c:	2001f918 	.word	0x2001f918

08008530 <_init>:
 8008530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008532:	bf00      	nop
 8008534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008536:	bc08      	pop	{r3}
 8008538:	469e      	mov	lr, r3
 800853a:	4770      	bx	lr

0800853c <_fini>:
 800853c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800853e:	bf00      	nop
 8008540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008542:	bc08      	pop	{r3}
 8008544:	469e      	mov	lr, r3
 8008546:	4770      	bx	lr
